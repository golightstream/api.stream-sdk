syntax = "proto3";
package apis.event.v2;

option go_package = "github.com/golightstream/apistream-layout-services/libraries/go/protocol/apis/event/v1";
option java_package = "stream.api.event";
option java_multiple_files = true;

import "google/api/annotations.proto";
import "google/protobuf/struct.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "google/api/field_behavior.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
	info: {
		title: "Event API"
		version: "2.0"
	}

	host: "live.api.stream"
	base_path: "/event/v2"
	schemes: HTTPS
	consumes: "application/json"
	produces: "application/json"
};

// Targetting for an event
// Event targetting allows you to listen or publish an event against a specific target. You can assume that:
// When subscribing, you will receive events for the chosen scope and any higher scope that isn't targetted. This means
// - An event published against a layoutId can be listened to by targetting the given layoutId, projectId or collectionId
// - An event published against a collectionId can be subscribed by scoping to any given projectId or layoutId under the collection.
message EventTarget {
	// Subscribe to events in a given collection.
	optional string collection_id = 5 [
		(google.api.field_behavior) = OPTIONAL,
		(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { example: "\"624c6f475887b2894ed87c89\"" }
	];

	// Subscribe to events in a given project.
	optional string project_id = 4  [
		(google.api.field_behavior) = OPTIONAL,
		(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { example: "\"624c6f465887b2894ed87c87\"" }
	];

	// Stream events to a specific layout.
	// Note: when specified, collection_id and project_id are implictly defined. If you choose
	// to define them, you they _must_ match the layout.
	optional string layout_id = 1  [
		(google.api.field_behavior) = OPTIONAL,
		(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { example: "\"713f6e91-3831-4421-a720-1c8084d10525\"", format: "uuid" }
	];
}

// Publish a custom event
message PublishEventRequest {
	// Name of the event.
	string name = 1 [
		(google.api.field_behavior) = REQUIRED,
		(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { example: "\"my_app:user_chat\"", min_length: 1, max_length: 128 }
	];

	// Value of the event. This can be a free-form value which we do not inspect.
	google.protobuf.Struct payload = 2 [
		(google.api.field_behavior) = REQUIRED,
		(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { example: "{ \"custom_event\": true }" }
	];

	// Metadata associated with the publishing of the event.
	// Typically this is information about _why_ the event happened. Use `payload` for
	// _what_ the event is.
	optional google.protobuf.Value request_metadata = 4 [
		(google.api.field_behavior) = OPTIONAL,
		(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { example: "{ \"example_data\": true }" }
	];

	// Scope the event to a specific target
	optional EventTarget target = 3;
}

// Response of an event being forwarded to a subscription.
// note: if this socket is also the publisher, this payload will be
// sent twice. Once for `published` and once for `event`. You can use `correlation_id`
// to identify the published event.
message PublishEventResponse {
	// Name of the event.
	string name = 1 [
		(google.api.field_behavior) = REQUIRED,
		(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { example: "\"my_app:user_chat\"", min_length: 1, max_length: 128 }
	];

	// Value of the event.
	google.protobuf.Struct payload = 2 [
		(google.api.field_behavior) = REQUIRED,
		(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { example: "{ \"custom_event\": true }" }
	];

	// Custom scoping parameters.
	optional EventTarget target = 3;

	// Metadata associated with the publishing of the event
	optional google.protobuf.Value request_metadata = 4 [
		(google.api.field_behavior) = OPTIONAL,
		(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { example: "{ \"example_data\": true }" }
	];

	// Internal ID of the event.
	string id = 5 [
		(google.api.field_behavior) = OPTIONAL,
		(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { example: "\"7f23f76c-1990-4a50-b3b9-d615703c777f\"", format: "uuid" }
	];
}

// The event API provides a mechanism for you to subscribe and publish events between
// your backend services and the composition, as well as receive events from the live and layout api.
service EventService {
	// Stream Events
	// buf:lint:ignore RPC_REQUEST_STANDARD_NAME
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	rpc Stream(stream EventsStreamRequest) returns (stream EventsStreamResponse) {
		option (google.api.http) = {
			get: "/stream",
		};
	}

	// Publish Event
	// buf:lint:ignore RPC_REQUEST_STANDARD_NAME
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	rpc Publish(PublishEventRequest) returns (PublishEventResponse) {
		option (google.api.http) = {
			post: "/publish",
			body: "*"
		};
		option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
			responses: {
				key: "404"
				value: {
					description: "Layout not found"
				}
			}
		};
	}
}

enum EventsStreamMessageType {
	EVENTS_STREAM_MESSAGE_TYPE_UNSPECIFIED = 0;
	EVENTS_STREAM_MESSAGE_TYPE_PING = 1;
	EVENTS_STREAM_MESSAGE_TYPE_ERROR = 2;
	EVENTS_STREAM_MESSAGE_TYPE_SUBSCRIBED = 3;
	EVENTS_STREAM_MESSAGE_TYPE_UNSUBSCRIBED = 4;
	EVENTS_STREAM_MESSAGE_TYPE_PUBLISHED = 5;
}

// Payload to subscribe or unsubscribe from an event
message SubscribePayload {
	// Event name to subscribe to for custom events.
	// This can be a wildcard `my_service:*` or multiple events `my_event|my_other_event`.
	string name = 1 [
		(google.api.field_behavior) = REQUIRED,
		(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { example: "\"my_app:user_chat|other_events:*\"", min_length: 1, max_length: 128 }
	];

	// The target to subscribe to.
	optional EventTarget target = 2 [
		(google.api.field_behavior) = REQUIRED
	];
}

// Indicates an error with a message sent to the Event API.
// Tie `correlation_id` on the message sent to the Event API and the `correlation_id`
// on the parent message to understand which request this error is for.
message EventsStreamError {
	// The GRPC error code for the event.
	int32 code = 1 [
		(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { example: "13" }
	];

	// A mesasage indicating what the error is.
	string message = 2 [
		(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { example: "\"INTERNAL: Something went wrong\"" }
	];
}

// Indicate to the client that they should re-open their connection
message EventsStreamReconnectRequest {
	// Whether the access token needs to be refreshed before reconnecting.
	bool reauthenticate = 1 [
		(google.api.field_behavior) = REQUIRED,
		(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { example: "false" }
	];

	// A timestamp indicating when the connection should be reconnected by.
	// If you're maintaining multiple connections, you should reconnect at a random interval within this time range.
	string before_timestamp = 2 [
		(google.api.field_behavior) = REQUIRED,
		(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { example : "\"1649179486223\"" }
	];
}

// Payload sent to the event API
message EventsStreamRequest {
	// Optional value to tag any return values with. This can be any string-based value
	// that your are able to track.
	optional string correlation_id = 1 [
		(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { example: "\"7a59c49f-c0bb-4f94-9cbe-73af126dd1ea\"" }
	];

	oneof event_payload {
		// Subscribe to a new event.
		SubscribePayload subscribe = 100;
		// Unsubscribe from an event.
		SubscribePayload unsubscribe = 101;
		// Publish a new event.
		PublishEventRequest publish = 102;

		// Initiate a ping-pong message.
		string ping = 103 [
			(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { example: "\"1649179486223\"" }
		];
	}
}


// Payload returned from the event API.
message EventsStreamResponse {
	// Optional value to tag any return values with.
	// Correlation ID should be used to correlate requests sent down the socket,
	// enabling you to tie a `PUBLISH` to a `PUBLISHED``
	optional string correlation_id = 2  [
		(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { example: "\"7a59c49f-c0bb-4f94-9cbe-73af126dd1ea\"" }
	];

	// Optional session id
	// This is set by sending the `SessionId` header for any HTTP requests
	// and the `sessionId` query parameter for websockets.
	optional string session_id = 3  [
		(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { example: "\"0c596f1b-3428-47bb-a673-563211ca0c75\"" }
	];

	oneof event_payload {
		// Custom event emitted
		PublishEventResponse event = 100;

		// Ping payload
		string pong = 200;
		// Non-blocking streaming error
		EventsStreamError error = 201;
		// Subscribe to a new event.
		SubscribePayload subscribed = 202;
		// Unsubscribe from an event.
		SubscribePayload unsubscribed = 203;
		// Publish a new event.
		PublishEventResponse published = 204;
		// Inform the client should reoconnect before a timestamp.
		EventsStreamReconnectRequest reconnect_before = 205;
	}
}
