/* ---------------------------------------------------------------------------------------------
 * Copyright (c) Infiniscene, Inc. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * -------------------------------------------------------------------------------------------- */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: apis/event/v2/api.proto

package stream.api.event;

public interface EventsStreamResponseOrBuilder extends
    // @@protoc_insertion_point(interface_extends:apis.event.v2.EventsStreamResponse)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Optional value to tag any return values with.
   * Correlation ID should be used to correlate requests sent down the socket,
   * enabling you to tie a `PUBLISH` to a `PUBLISHED``
   * </pre>
   *
   * <code>optional string correlation_id = 2 [json_name = "correlationId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
   * @return Whether the correlationId field is set.
   */
  boolean hasCorrelationId();
  /**
   * <pre>
   * Optional value to tag any return values with.
   * Correlation ID should be used to correlate requests sent down the socket,
   * enabling you to tie a `PUBLISH` to a `PUBLISHED``
   * </pre>
   *
   * <code>optional string correlation_id = 2 [json_name = "correlationId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
   * @return The correlationId.
   */
  java.lang.String getCorrelationId();
  /**
   * <pre>
   * Optional value to tag any return values with.
   * Correlation ID should be used to correlate requests sent down the socket,
   * enabling you to tie a `PUBLISH` to a `PUBLISHED``
   * </pre>
   *
   * <code>optional string correlation_id = 2 [json_name = "correlationId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
   * @return The bytes for correlationId.
   */
  com.google.protobuf.ByteString
      getCorrelationIdBytes();

  /**
   * <pre>
   * Optional session id
   * This is set by sending the `SessionId` header for any HTTP requests
   * and the `sessionId` query parameter for websockets.
   * </pre>
   *
   * <code>optional string session_id = 3 [json_name = "sessionId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
   * @return Whether the sessionId field is set.
   */
  boolean hasSessionId();
  /**
   * <pre>
   * Optional session id
   * This is set by sending the `SessionId` header for any HTTP requests
   * and the `sessionId` query parameter for websockets.
   * </pre>
   *
   * <code>optional string session_id = 3 [json_name = "sessionId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
   * @return The sessionId.
   */
  java.lang.String getSessionId();
  /**
   * <pre>
   * Optional session id
   * This is set by sending the `SessionId` header for any HTTP requests
   * and the `sessionId` query parameter for websockets.
   * </pre>
   *
   * <code>optional string session_id = 3 [json_name = "sessionId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
   * @return The bytes for sessionId.
   */
  com.google.protobuf.ByteString
      getSessionIdBytes();

  /**
   * <pre>
   * Custom event emitted
   * </pre>
   *
   * <code>.apis.event.v2.PublishEventResponse event = 100 [json_name = "event"];</code>
   * @return Whether the event field is set.
   */
  boolean hasEvent();
  /**
   * <pre>
   * Custom event emitted
   * </pre>
   *
   * <code>.apis.event.v2.PublishEventResponse event = 100 [json_name = "event"];</code>
   * @return The event.
   */
  stream.api.event.PublishEventResponse getEvent();
  /**
   * <pre>
   * Custom event emitted
   * </pre>
   *
   * <code>.apis.event.v2.PublishEventResponse event = 100 [json_name = "event"];</code>
   */
  stream.api.event.PublishEventResponseOrBuilder getEventOrBuilder();

  /**
   * <pre>
   * Ping payload
   * </pre>
   *
   * <code>string pong = 200 [json_name = "pong"];</code>
   * @return Whether the pong field is set.
   */
  boolean hasPong();
  /**
   * <pre>
   * Ping payload
   * </pre>
   *
   * <code>string pong = 200 [json_name = "pong"];</code>
   * @return The pong.
   */
  java.lang.String getPong();
  /**
   * <pre>
   * Ping payload
   * </pre>
   *
   * <code>string pong = 200 [json_name = "pong"];</code>
   * @return The bytes for pong.
   */
  com.google.protobuf.ByteString
      getPongBytes();

  /**
   * <pre>
   * Non-blocking streaming error
   * </pre>
   *
   * <code>.apis.event.v2.EventsStreamError error = 201 [json_name = "error"];</code>
   * @return Whether the error field is set.
   */
  boolean hasError();
  /**
   * <pre>
   * Non-blocking streaming error
   * </pre>
   *
   * <code>.apis.event.v2.EventsStreamError error = 201 [json_name = "error"];</code>
   * @return The error.
   */
  stream.api.event.EventsStreamError getError();
  /**
   * <pre>
   * Non-blocking streaming error
   * </pre>
   *
   * <code>.apis.event.v2.EventsStreamError error = 201 [json_name = "error"];</code>
   */
  stream.api.event.EventsStreamErrorOrBuilder getErrorOrBuilder();

  /**
   * <pre>
   * Subscribe to a new event.
   * </pre>
   *
   * <code>.apis.event.v2.SubscribePayload subscribed = 202 [json_name = "subscribed"];</code>
   * @return Whether the subscribed field is set.
   */
  boolean hasSubscribed();
  /**
   * <pre>
   * Subscribe to a new event.
   * </pre>
   *
   * <code>.apis.event.v2.SubscribePayload subscribed = 202 [json_name = "subscribed"];</code>
   * @return The subscribed.
   */
  stream.api.event.SubscribePayload getSubscribed();
  /**
   * <pre>
   * Subscribe to a new event.
   * </pre>
   *
   * <code>.apis.event.v2.SubscribePayload subscribed = 202 [json_name = "subscribed"];</code>
   */
  stream.api.event.SubscribePayloadOrBuilder getSubscribedOrBuilder();

  /**
   * <pre>
   * Unsubscribe from an event.
   * </pre>
   *
   * <code>.apis.event.v2.SubscribePayload unsubscribed = 203 [json_name = "unsubscribed"];</code>
   * @return Whether the unsubscribed field is set.
   */
  boolean hasUnsubscribed();
  /**
   * <pre>
   * Unsubscribe from an event.
   * </pre>
   *
   * <code>.apis.event.v2.SubscribePayload unsubscribed = 203 [json_name = "unsubscribed"];</code>
   * @return The unsubscribed.
   */
  stream.api.event.SubscribePayload getUnsubscribed();
  /**
   * <pre>
   * Unsubscribe from an event.
   * </pre>
   *
   * <code>.apis.event.v2.SubscribePayload unsubscribed = 203 [json_name = "unsubscribed"];</code>
   */
  stream.api.event.SubscribePayloadOrBuilder getUnsubscribedOrBuilder();

  /**
   * <pre>
   * Publish a new event.
   * </pre>
   *
   * <code>.apis.event.v2.PublishEventResponse published = 204 [json_name = "published"];</code>
   * @return Whether the published field is set.
   */
  boolean hasPublished();
  /**
   * <pre>
   * Publish a new event.
   * </pre>
   *
   * <code>.apis.event.v2.PublishEventResponse published = 204 [json_name = "published"];</code>
   * @return The published.
   */
  stream.api.event.PublishEventResponse getPublished();
  /**
   * <pre>
   * Publish a new event.
   * </pre>
   *
   * <code>.apis.event.v2.PublishEventResponse published = 204 [json_name = "published"];</code>
   */
  stream.api.event.PublishEventResponseOrBuilder getPublishedOrBuilder();

  /**
   * <pre>
   * Inform the client should reoconnect before a timestamp.
   * </pre>
   *
   * <code>.apis.event.v2.EventsStreamReconnectRequest reconnect_before = 205 [json_name = "reconnectBefore"];</code>
   * @return Whether the reconnectBefore field is set.
   */
  boolean hasReconnectBefore();
  /**
   * <pre>
   * Inform the client should reoconnect before a timestamp.
   * </pre>
   *
   * <code>.apis.event.v2.EventsStreamReconnectRequest reconnect_before = 205 [json_name = "reconnectBefore"];</code>
   * @return The reconnectBefore.
   */
  stream.api.event.EventsStreamReconnectRequest getReconnectBefore();
  /**
   * <pre>
   * Inform the client should reoconnect before a timestamp.
   * </pre>
   *
   * <code>.apis.event.v2.EventsStreamReconnectRequest reconnect_before = 205 [json_name = "reconnectBefore"];</code>
   */
  stream.api.event.EventsStreamReconnectRequestOrBuilder getReconnectBeforeOrBuilder();

  public stream.api.event.EventsStreamResponse.EventPayloadCase getEventPayloadCase();
}
