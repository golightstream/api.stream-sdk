/*
---------------------------------------------------------------------------------------------
Copyright (c) Infiniscene, Inc. All rights reserved.
Licensed under the MIT License. See License.txt in the project root for license information.
---------------------------------------------------------------------------------------------
*/
// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: apis/event/v2/api.proto

package eventv2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EventService_Stream_FullMethodName  = "/apis.event.v2.EventService/Stream"
	EventService_Publish_FullMethodName = "/apis.event.v2.EventService/Publish"
)

// EventServiceClient is the client API for EventService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventServiceClient interface {
	// Stream Events
	// buf:lint:ignore RPC_REQUEST_STANDARD_NAME
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	Stream(ctx context.Context, opts ...grpc.CallOption) (EventService_StreamClient, error)
	// Publish Event
	// buf:lint:ignore RPC_REQUEST_STANDARD_NAME
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	Publish(ctx context.Context, in *PublishEventRequest, opts ...grpc.CallOption) (*PublishEventResponse, error)
}

type eventServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEventServiceClient(cc grpc.ClientConnInterface) EventServiceClient {
	return &eventServiceClient{cc}
}

func (c *eventServiceClient) Stream(ctx context.Context, opts ...grpc.CallOption) (EventService_StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &EventService_ServiceDesc.Streams[0], EventService_Stream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &eventServiceStreamClient{stream}
	return x, nil
}

type EventService_StreamClient interface {
	Send(*EventsStreamRequest) error
	Recv() (*EventsStreamResponse, error)
	grpc.ClientStream
}

type eventServiceStreamClient struct {
	grpc.ClientStream
}

func (x *eventServiceStreamClient) Send(m *EventsStreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *eventServiceStreamClient) Recv() (*EventsStreamResponse, error) {
	m := new(EventsStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *eventServiceClient) Publish(ctx context.Context, in *PublishEventRequest, opts ...grpc.CallOption) (*PublishEventResponse, error) {
	out := new(PublishEventResponse)
	err := c.cc.Invoke(ctx, EventService_Publish_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventServiceServer is the server API for EventService service.
// All implementations should embed UnimplementedEventServiceServer
// for forward compatibility
type EventServiceServer interface {
	// Stream Events
	// buf:lint:ignore RPC_REQUEST_STANDARD_NAME
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	Stream(EventService_StreamServer) error
	// Publish Event
	// buf:lint:ignore RPC_REQUEST_STANDARD_NAME
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	Publish(context.Context, *PublishEventRequest) (*PublishEventResponse, error)
}

// UnimplementedEventServiceServer should be embedded to have forward compatible implementations.
type UnimplementedEventServiceServer struct {
}

func (UnimplementedEventServiceServer) Stream(EventService_StreamServer) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}
func (UnimplementedEventServiceServer) Publish(context.Context, *PublishEventRequest) (*PublishEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}

// UnsafeEventServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventServiceServer will
// result in compilation errors.
type UnsafeEventServiceServer interface {
	mustEmbedUnimplementedEventServiceServer()
}

func RegisterEventServiceServer(s grpc.ServiceRegistrar, srv EventServiceServer) {
	s.RegisterService(&EventService_ServiceDesc, srv)
}

func _EventService_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EventServiceServer).Stream(&eventServiceStreamServer{stream})
}

type EventService_StreamServer interface {
	Send(*EventsStreamResponse) error
	Recv() (*EventsStreamRequest, error)
	grpc.ServerStream
}

type eventServiceStreamServer struct {
	grpc.ServerStream
}

func (x *eventServiceStreamServer) Send(m *EventsStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *eventServiceStreamServer) Recv() (*EventsStreamRequest, error) {
	m := new(EventsStreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _EventService_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventService_Publish_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).Publish(ctx, req.(*PublishEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EventService_ServiceDesc is the grpc.ServiceDesc for EventService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "apis.event.v2.EventService",
	HandlerType: (*EventServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Publish",
			Handler:    _EventService_Publish_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _EventService_Stream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "apis/event/v2/api.proto",
}

const (
	WebhookService_ListWebhookSubscriptions_FullMethodName  = "/apis.event.v2.WebhookService/ListWebhookSubscriptions"
	WebhookService_CreateWebhookSubscription_FullMethodName = "/apis.event.v2.WebhookService/CreateWebhookSubscription"
	WebhookService_DeleteWebhookSubscription_FullMethodName = "/apis.event.v2.WebhookService/DeleteWebhookSubscription"
)

// WebhookServiceClient is the client API for WebhookService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WebhookServiceClient interface {
	// List all webhook subscriptions.
	ListWebhookSubscriptions(ctx context.Context, in *ListWebhookSubscriptionsRequest, opts ...grpc.CallOption) (*ListWebhookSubscriptionsResponse, error)
	// Create a new webhook subscription.
	CreateWebhookSubscription(ctx context.Context, in *CreateWebhookSubscriptionRequest, opts ...grpc.CallOption) (*CreateWebhookSubscriptionResponse, error)
	// Delete a webhook subscription.
	// Existing events queued will be delivered before the subscription is removed.
	DeleteWebhookSubscription(ctx context.Context, in *DeleteWebhookSubscriptionRequest, opts ...grpc.CallOption) (*DeleteWebhookSubscriptionResponse, error)
}

type webhookServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWebhookServiceClient(cc grpc.ClientConnInterface) WebhookServiceClient {
	return &webhookServiceClient{cc}
}

func (c *webhookServiceClient) ListWebhookSubscriptions(ctx context.Context, in *ListWebhookSubscriptionsRequest, opts ...grpc.CallOption) (*ListWebhookSubscriptionsResponse, error) {
	out := new(ListWebhookSubscriptionsResponse)
	err := c.cc.Invoke(ctx, WebhookService_ListWebhookSubscriptions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webhookServiceClient) CreateWebhookSubscription(ctx context.Context, in *CreateWebhookSubscriptionRequest, opts ...grpc.CallOption) (*CreateWebhookSubscriptionResponse, error) {
	out := new(CreateWebhookSubscriptionResponse)
	err := c.cc.Invoke(ctx, WebhookService_CreateWebhookSubscription_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webhookServiceClient) DeleteWebhookSubscription(ctx context.Context, in *DeleteWebhookSubscriptionRequest, opts ...grpc.CallOption) (*DeleteWebhookSubscriptionResponse, error) {
	out := new(DeleteWebhookSubscriptionResponse)
	err := c.cc.Invoke(ctx, WebhookService_DeleteWebhookSubscription_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebhookServiceServer is the server API for WebhookService service.
// All implementations should embed UnimplementedWebhookServiceServer
// for forward compatibility
type WebhookServiceServer interface {
	// List all webhook subscriptions.
	ListWebhookSubscriptions(context.Context, *ListWebhookSubscriptionsRequest) (*ListWebhookSubscriptionsResponse, error)
	// Create a new webhook subscription.
	CreateWebhookSubscription(context.Context, *CreateWebhookSubscriptionRequest) (*CreateWebhookSubscriptionResponse, error)
	// Delete a webhook subscription.
	// Existing events queued will be delivered before the subscription is removed.
	DeleteWebhookSubscription(context.Context, *DeleteWebhookSubscriptionRequest) (*DeleteWebhookSubscriptionResponse, error)
}

// UnimplementedWebhookServiceServer should be embedded to have forward compatible implementations.
type UnimplementedWebhookServiceServer struct {
}

func (UnimplementedWebhookServiceServer) ListWebhookSubscriptions(context.Context, *ListWebhookSubscriptionsRequest) (*ListWebhookSubscriptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWebhookSubscriptions not implemented")
}
func (UnimplementedWebhookServiceServer) CreateWebhookSubscription(context.Context, *CreateWebhookSubscriptionRequest) (*CreateWebhookSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWebhookSubscription not implemented")
}
func (UnimplementedWebhookServiceServer) DeleteWebhookSubscription(context.Context, *DeleteWebhookSubscriptionRequest) (*DeleteWebhookSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWebhookSubscription not implemented")
}

// UnsafeWebhookServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WebhookServiceServer will
// result in compilation errors.
type UnsafeWebhookServiceServer interface {
	mustEmbedUnimplementedWebhookServiceServer()
}

func RegisterWebhookServiceServer(s grpc.ServiceRegistrar, srv WebhookServiceServer) {
	s.RegisterService(&WebhookService_ServiceDesc, srv)
}

func _WebhookService_ListWebhookSubscriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWebhookSubscriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookServiceServer).ListWebhookSubscriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebhookService_ListWebhookSubscriptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookServiceServer).ListWebhookSubscriptions(ctx, req.(*ListWebhookSubscriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebhookService_CreateWebhookSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWebhookSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookServiceServer).CreateWebhookSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebhookService_CreateWebhookSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookServiceServer).CreateWebhookSubscription(ctx, req.(*CreateWebhookSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebhookService_DeleteWebhookSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWebhookSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookServiceServer).DeleteWebhookSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebhookService_DeleteWebhookSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookServiceServer).DeleteWebhookSubscription(ctx, req.(*DeleteWebhookSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WebhookService_ServiceDesc is the grpc.ServiceDesc for WebhookService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WebhookService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "apis.event.v2.WebhookService",
	HandlerType: (*WebhookServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListWebhookSubscriptions",
			Handler:    _WebhookService_ListWebhookSubscriptions_Handler,
		},
		{
			MethodName: "CreateWebhookSubscription",
			Handler:    _WebhookService_CreateWebhookSubscription_Handler,
		},
		{
			MethodName: "DeleteWebhookSubscription",
			Handler:    _WebhookService_DeleteWebhookSubscription_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apis/event/v2/api.proto",
}

const (
	HistoryService_GetEvents_FullMethodName = "/apis.event.v2.HistoryService/GetEvents"
)

// HistoryServiceClient is the client API for HistoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HistoryServiceClient interface {
	GetEvents(ctx context.Context, in *GetEventsRequest, opts ...grpc.CallOption) (*GetEventsResponse, error)
}

type historyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHistoryServiceClient(cc grpc.ClientConnInterface) HistoryServiceClient {
	return &historyServiceClient{cc}
}

func (c *historyServiceClient) GetEvents(ctx context.Context, in *GetEventsRequest, opts ...grpc.CallOption) (*GetEventsResponse, error) {
	out := new(GetEventsResponse)
	err := c.cc.Invoke(ctx, HistoryService_GetEvents_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HistoryServiceServer is the server API for HistoryService service.
// All implementations should embed UnimplementedHistoryServiceServer
// for forward compatibility
type HistoryServiceServer interface {
	GetEvents(context.Context, *GetEventsRequest) (*GetEventsResponse, error)
}

// UnimplementedHistoryServiceServer should be embedded to have forward compatible implementations.
type UnimplementedHistoryServiceServer struct {
}

func (UnimplementedHistoryServiceServer) GetEvents(context.Context, *GetEventsRequest) (*GetEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEvents not implemented")
}

// UnsafeHistoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HistoryServiceServer will
// result in compilation errors.
type UnsafeHistoryServiceServer interface {
	mustEmbedUnimplementedHistoryServiceServer()
}

func RegisterHistoryServiceServer(s grpc.ServiceRegistrar, srv HistoryServiceServer) {
	s.RegisterService(&HistoryService_ServiceDesc, srv)
}

func _HistoryService_GetEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryServiceServer).GetEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HistoryService_GetEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryServiceServer).GetEvents(ctx, req.(*GetEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HistoryService_ServiceDesc is the grpc.ServiceDesc for HistoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HistoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "apis.event.v2.HistoryService",
	HandlerType: (*HistoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEvents",
			Handler:    _HistoryService_GetEvents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apis/event/v2/api.proto",
}
