/*
---------------------------------------------------------------------------------------------
Copyright (c) Infiniscene, Inc. All rights reserved.
Licensed under the MIT License. See License.txt in the project root for license information.
---------------------------------------------------------------------------------------------
*/
// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        (unknown)
// source: apis/event/v2/api.proto

package eventv2

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EventsStreamMessageType int32

const (
	EventsStreamMessageType_EVENTS_STREAM_MESSAGE_TYPE_UNSPECIFIED  EventsStreamMessageType = 0
	EventsStreamMessageType_EVENTS_STREAM_MESSAGE_TYPE_PING         EventsStreamMessageType = 1
	EventsStreamMessageType_EVENTS_STREAM_MESSAGE_TYPE_ERROR        EventsStreamMessageType = 2
	EventsStreamMessageType_EVENTS_STREAM_MESSAGE_TYPE_SUBSCRIBED   EventsStreamMessageType = 3
	EventsStreamMessageType_EVENTS_STREAM_MESSAGE_TYPE_UNSUBSCRIBED EventsStreamMessageType = 4
	EventsStreamMessageType_EVENTS_STREAM_MESSAGE_TYPE_PUBLISHED    EventsStreamMessageType = 5
)

// Enum value maps for EventsStreamMessageType.
var (
	EventsStreamMessageType_name = map[int32]string{
		0: "EVENTS_STREAM_MESSAGE_TYPE_UNSPECIFIED",
		1: "EVENTS_STREAM_MESSAGE_TYPE_PING",
		2: "EVENTS_STREAM_MESSAGE_TYPE_ERROR",
		3: "EVENTS_STREAM_MESSAGE_TYPE_SUBSCRIBED",
		4: "EVENTS_STREAM_MESSAGE_TYPE_UNSUBSCRIBED",
		5: "EVENTS_STREAM_MESSAGE_TYPE_PUBLISHED",
	}
	EventsStreamMessageType_value = map[string]int32{
		"EVENTS_STREAM_MESSAGE_TYPE_UNSPECIFIED":  0,
		"EVENTS_STREAM_MESSAGE_TYPE_PING":         1,
		"EVENTS_STREAM_MESSAGE_TYPE_ERROR":        2,
		"EVENTS_STREAM_MESSAGE_TYPE_SUBSCRIBED":   3,
		"EVENTS_STREAM_MESSAGE_TYPE_UNSUBSCRIBED": 4,
		"EVENTS_STREAM_MESSAGE_TYPE_PUBLISHED":    5,
	}
)

func (x EventsStreamMessageType) Enum() *EventsStreamMessageType {
	p := new(EventsStreamMessageType)
	*p = x
	return p
}

func (x EventsStreamMessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventsStreamMessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_apis_event_v2_api_proto_enumTypes[0].Descriptor()
}

func (EventsStreamMessageType) Type() protoreflect.EnumType {
	return &file_apis_event_v2_api_proto_enumTypes[0]
}

func (x EventsStreamMessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventsStreamMessageType.Descriptor instead.
func (EventsStreamMessageType) EnumDescriptor() ([]byte, []int) {
	return file_apis_event_v2_api_proto_rawDescGZIP(), []int{0}
}

type GetEventsQuery_PaginationOrder int32

const (
	GetEventsQuery_PAGINATION_ORDER_UNSPECIFIED     GetEventsQuery_PaginationOrder = 0
	GetEventsQuery_PAGINATION_ORDER_CREATED_AT_DESC GetEventsQuery_PaginationOrder = 1
	GetEventsQuery_PAGINATION_ORDER_CREATED_AT_ASC  GetEventsQuery_PaginationOrder = 2
)

// Enum value maps for GetEventsQuery_PaginationOrder.
var (
	GetEventsQuery_PaginationOrder_name = map[int32]string{
		0: "PAGINATION_ORDER_UNSPECIFIED",
		1: "PAGINATION_ORDER_CREATED_AT_DESC",
		2: "PAGINATION_ORDER_CREATED_AT_ASC",
	}
	GetEventsQuery_PaginationOrder_value = map[string]int32{
		"PAGINATION_ORDER_UNSPECIFIED":     0,
		"PAGINATION_ORDER_CREATED_AT_DESC": 1,
		"PAGINATION_ORDER_CREATED_AT_ASC":  2,
	}
)

func (x GetEventsQuery_PaginationOrder) Enum() *GetEventsQuery_PaginationOrder {
	p := new(GetEventsQuery_PaginationOrder)
	*p = x
	return p
}

func (x GetEventsQuery_PaginationOrder) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetEventsQuery_PaginationOrder) Descriptor() protoreflect.EnumDescriptor {
	return file_apis_event_v2_api_proto_enumTypes[1].Descriptor()
}

func (GetEventsQuery_PaginationOrder) Type() protoreflect.EnumType {
	return &file_apis_event_v2_api_proto_enumTypes[1]
}

func (x GetEventsQuery_PaginationOrder) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetEventsQuery_PaginationOrder.Descriptor instead.
func (GetEventsQuery_PaginationOrder) EnumDescriptor() ([]byte, []int) {
	return file_apis_event_v2_api_proto_rawDescGZIP(), []int{16, 0}
}

// Targetting for an event
// Event targetting allows you to listen or publish an event against a specific target. You can assume that:
// When subscribing, you will receive events for the chosen scope and any higher scope that isn't targetted. This means
// - An event published against a layoutId can be listened to by targetting the given layoutId, projectId or collectionId
// - An event published against a collectionId can be subscribed by scoping to any given projectId or layoutId under the collection.
type EventTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Subscribe to events in a given collection.
	CollectionId *string `protobuf:"bytes,5,opt,name=collection_id,json=collectionId,proto3,oneof" json:"collection_id,omitempty"`
	// Subscribe to events in a given project.
	ProjectId *string `protobuf:"bytes,4,opt,name=project_id,json=projectId,proto3,oneof" json:"project_id,omitempty"`
	// Stream events to a specific layout.
	// Note: when specified, collection_id and project_id are implictly defined. If you choose
	// to define them, you they _must_ match the layout.
	LayoutId *string `protobuf:"bytes,1,opt,name=layout_id,json=layoutId,proto3,oneof" json:"layout_id,omitempty"`
}

func (x *EventTarget) Reset() {
	*x = EventTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_event_v2_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventTarget) ProtoMessage() {}

func (x *EventTarget) ProtoReflect() protoreflect.Message {
	mi := &file_apis_event_v2_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventTarget.ProtoReflect.Descriptor instead.
func (*EventTarget) Descriptor() ([]byte, []int) {
	return file_apis_event_v2_api_proto_rawDescGZIP(), []int{0}
}

func (x *EventTarget) GetCollectionId() string {
	if x != nil && x.CollectionId != nil {
		return *x.CollectionId
	}
	return ""
}

func (x *EventTarget) GetProjectId() string {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return ""
}

func (x *EventTarget) GetLayoutId() string {
	if x != nil && x.LayoutId != nil {
		return *x.LayoutId
	}
	return ""
}

type ServiceEventTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Subscribe to events in a given collection.
	// this is deprecated, prefer `service_user_id`.
	UserId *string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3,oneof" json:"user_id,omitempty"`
	// Subscribe to events in a given collection.
	CollectionId *string `protobuf:"bytes,2,opt,name=collection_id,json=collectionId,proto3,oneof" json:"collection_id,omitempty"`
	// Subscribe to events in a given project.
	ProjectId *string `protobuf:"bytes,3,opt,name=project_id,json=projectId,proto3,oneof" json:"project_id,omitempty"`
	// Stream events to a specific layout.
	// Note: when specified, collection_id and project_id are implictly defined. If you choose
	// to define them, you they _must_ match the layout.
	LayoutId *string `protobuf:"bytes,4,opt,name=layout_id,json=layoutId,proto3,oneof" json:"layout_id,omitempty"`
	// Subscribe to events by a given user, this takes priority over user_id
	ServiceUserId *string `protobuf:"bytes,5,opt,name=service_user_id,json=serviceUserId,proto3,oneof" json:"service_user_id,omitempty"`
}

func (x *ServiceEventTarget) Reset() {
	*x = ServiceEventTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_event_v2_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceEventTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceEventTarget) ProtoMessage() {}

func (x *ServiceEventTarget) ProtoReflect() protoreflect.Message {
	mi := &file_apis_event_v2_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceEventTarget.ProtoReflect.Descriptor instead.
func (*ServiceEventTarget) Descriptor() ([]byte, []int) {
	return file_apis_event_v2_api_proto_rawDescGZIP(), []int{1}
}

func (x *ServiceEventTarget) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *ServiceEventTarget) GetCollectionId() string {
	if x != nil && x.CollectionId != nil {
		return *x.CollectionId
	}
	return ""
}

func (x *ServiceEventTarget) GetProjectId() string {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return ""
}

func (x *ServiceEventTarget) GetLayoutId() string {
	if x != nil && x.LayoutId != nil {
		return *x.LayoutId
	}
	return ""
}

func (x *ServiceEventTarget) GetServiceUserId() string {
	if x != nil && x.ServiceUserId != nil {
		return *x.ServiceUserId
	}
	return ""
}

// Publish a custom event
type PublishEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the event.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Value of the event. This can be a free-form value which we do not inspect.
	Payload *structpb.Struct `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	// Metadata associated with the publishing of the event.
	// Typically this is information about _why_ the event happened. Use `payload` for
	// _what_ the event is.
	RequestMetadata *structpb.Value `protobuf:"bytes,4,opt,name=request_metadata,json=requestMetadata,proto3,oneof" json:"request_metadata,omitempty"`
	// Scope the event to a specific target
	Target *EventTarget `protobuf:"bytes,3,opt,name=target,proto3,oneof" json:"target,omitempty"`
}

func (x *PublishEventRequest) Reset() {
	*x = PublishEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_event_v2_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishEventRequest) ProtoMessage() {}

func (x *PublishEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apis_event_v2_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishEventRequest.ProtoReflect.Descriptor instead.
func (*PublishEventRequest) Descriptor() ([]byte, []int) {
	return file_apis_event_v2_api_proto_rawDescGZIP(), []int{2}
}

func (x *PublishEventRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PublishEventRequest) GetPayload() *structpb.Struct {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *PublishEventRequest) GetRequestMetadata() *structpb.Value {
	if x != nil {
		return x.RequestMetadata
	}
	return nil
}

func (x *PublishEventRequest) GetTarget() *EventTarget {
	if x != nil {
		return x.Target
	}
	return nil
}

// Response of an event being forwarded to a subscription.
// note: if this socket is also the publisher, this payload will be
// sent twice. Once for `published` and once for `event`. You can use `correlation_id`
// to identify the published event.
type PublishEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the event.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Value of the event.
	Payload *structpb.Struct `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	// Custom scoping parameters.
	Target *EventTarget `protobuf:"bytes,3,opt,name=target,proto3,oneof" json:"target,omitempty"`
	// Metadata associated with the publishing of the event
	RequestMetadata *structpb.Value `protobuf:"bytes,4,opt,name=request_metadata,json=requestMetadata,proto3,oneof" json:"request_metadata,omitempty"`
	// Internal ID of the event.
	Id string `protobuf:"bytes,5,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *PublishEventResponse) Reset() {
	*x = PublishEventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_event_v2_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishEventResponse) ProtoMessage() {}

func (x *PublishEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apis_event_v2_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishEventResponse.ProtoReflect.Descriptor instead.
func (*PublishEventResponse) Descriptor() ([]byte, []int) {
	return file_apis_event_v2_api_proto_rawDescGZIP(), []int{3}
}

func (x *PublishEventResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PublishEventResponse) GetPayload() *structpb.Struct {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *PublishEventResponse) GetTarget() *EventTarget {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *PublishEventResponse) GetRequestMetadata() *structpb.Value {
	if x != nil {
		return x.RequestMetadata
	}
	return nil
}

func (x *PublishEventResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type WebhookSubscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Subscription identifier
	WebhookId string `protobuf:"bytes,1,opt,name=webhook_id,json=webhookId,proto3" json:"webhook_id,omitempty"`
	// Event name to subscribe to for custom events, this can be a wildcard `my_service:*`
	Events []string `protobuf:"bytes,2,rep,name=events,proto3" json:"events,omitempty"`
	// The target to subscribe to. If not defined, all events will be sent.
	Target *ServiceEventTarget `protobuf:"bytes,3,opt,name=target,proto3,oneof" json:"target,omitempty"`
	// The URL to send the event to.
	Url       string  `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
	TimeoutMs *uint32 `protobuf:"varint,5,opt,name=timeout_ms,json=timeoutMs,proto3,oneof" json:"timeout_ms,omitempty"`
}

func (x *WebhookSubscription) Reset() {
	*x = WebhookSubscription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_event_v2_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebhookSubscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebhookSubscription) ProtoMessage() {}

func (x *WebhookSubscription) ProtoReflect() protoreflect.Message {
	mi := &file_apis_event_v2_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebhookSubscription.ProtoReflect.Descriptor instead.
func (*WebhookSubscription) Descriptor() ([]byte, []int) {
	return file_apis_event_v2_api_proto_rawDescGZIP(), []int{4}
}

func (x *WebhookSubscription) GetWebhookId() string {
	if x != nil {
		return x.WebhookId
	}
	return ""
}

func (x *WebhookSubscription) GetEvents() []string {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *WebhookSubscription) GetTarget() *ServiceEventTarget {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *WebhookSubscription) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *WebhookSubscription) GetTimeoutMs() uint32 {
	if x != nil && x.TimeoutMs != nil {
		return *x.TimeoutMs
	}
	return 0
}

type ListWebhookSubscriptionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The target to filter by.
	Target *ServiceEventTarget `protobuf:"bytes,1,opt,name=target,proto3,oneof" json:"target,omitempty"`
}

func (x *ListWebhookSubscriptionsRequest) Reset() {
	*x = ListWebhookSubscriptionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_event_v2_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWebhookSubscriptionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWebhookSubscriptionsRequest) ProtoMessage() {}

func (x *ListWebhookSubscriptionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apis_event_v2_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWebhookSubscriptionsRequest.ProtoReflect.Descriptor instead.
func (*ListWebhookSubscriptionsRequest) Descriptor() ([]byte, []int) {
	return file_apis_event_v2_api_proto_rawDescGZIP(), []int{5}
}

func (x *ListWebhookSubscriptionsRequest) GetTarget() *ServiceEventTarget {
	if x != nil {
		return x.Target
	}
	return nil
}

type ListWebhookSubscriptionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subscriptions []*WebhookSubscription `protobuf:"bytes,1,rep,name=subscriptions,proto3" json:"subscriptions,omitempty"`
}

func (x *ListWebhookSubscriptionsResponse) Reset() {
	*x = ListWebhookSubscriptionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_event_v2_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWebhookSubscriptionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWebhookSubscriptionsResponse) ProtoMessage() {}

func (x *ListWebhookSubscriptionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apis_event_v2_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWebhookSubscriptionsResponse.ProtoReflect.Descriptor instead.
func (*ListWebhookSubscriptionsResponse) Descriptor() ([]byte, []int) {
	return file_apis_event_v2_api_proto_rawDescGZIP(), []int{6}
}

func (x *ListWebhookSubscriptionsResponse) GetSubscriptions() []*WebhookSubscription {
	if x != nil {
		return x.Subscriptions
	}
	return nil
}

type CreateWebhookSubscriptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Event's to subscribe to for custom events, this can be a wildcard `my_service:*`
	Events []string `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
	// The target to subscribe to. If not defined, all events will be sent.
	Target *ServiceEventTarget `protobuf:"bytes,2,opt,name=target,proto3,oneof" json:"target,omitempty"`
	// The URL to send the event to.
	Url       string  `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	TimeoutMs *uint32 `protobuf:"varint,4,opt,name=timeout_ms,json=timeoutMs,proto3,oneof" json:"timeout_ms,omitempty"`
}

func (x *CreateWebhookSubscriptionRequest) Reset() {
	*x = CreateWebhookSubscriptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_event_v2_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateWebhookSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWebhookSubscriptionRequest) ProtoMessage() {}

func (x *CreateWebhookSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apis_event_v2_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWebhookSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*CreateWebhookSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_apis_event_v2_api_proto_rawDescGZIP(), []int{7}
}

func (x *CreateWebhookSubscriptionRequest) GetEvents() []string {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *CreateWebhookSubscriptionRequest) GetTarget() *ServiceEventTarget {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *CreateWebhookSubscriptionRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *CreateWebhookSubscriptionRequest) GetTimeoutMs() uint32 {
	if x != nil && x.TimeoutMs != nil {
		return *x.TimeoutMs
	}
	return 0
}

type CreateWebhookSubscriptionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subscription *WebhookSubscription `protobuf:"bytes,1,opt,name=subscription,proto3" json:"subscription,omitempty"`
}

func (x *CreateWebhookSubscriptionResponse) Reset() {
	*x = CreateWebhookSubscriptionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_event_v2_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateWebhookSubscriptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWebhookSubscriptionResponse) ProtoMessage() {}

func (x *CreateWebhookSubscriptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apis_event_v2_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWebhookSubscriptionResponse.ProtoReflect.Descriptor instead.
func (*CreateWebhookSubscriptionResponse) Descriptor() ([]byte, []int) {
	return file_apis_event_v2_api_proto_rawDescGZIP(), []int{8}
}

func (x *CreateWebhookSubscriptionResponse) GetSubscription() *WebhookSubscription {
	if x != nil {
		return x.Subscription
	}
	return nil
}

type DeleteWebhookSubscriptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The webhook subscription identifier.
	WebhookId string `protobuf:"bytes,1,opt,name=webhook_id,json=webhookId,proto3" json:"webhook_id,omitempty"`
}

func (x *DeleteWebhookSubscriptionRequest) Reset() {
	*x = DeleteWebhookSubscriptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_event_v2_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteWebhookSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteWebhookSubscriptionRequest) ProtoMessage() {}

func (x *DeleteWebhookSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apis_event_v2_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteWebhookSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*DeleteWebhookSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_apis_event_v2_api_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteWebhookSubscriptionRequest) GetWebhookId() string {
	if x != nil {
		return x.WebhookId
	}
	return ""
}

type DeleteWebhookSubscriptionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteWebhookSubscriptionResponse) Reset() {
	*x = DeleteWebhookSubscriptionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_event_v2_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteWebhookSubscriptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteWebhookSubscriptionResponse) ProtoMessage() {}

func (x *DeleteWebhookSubscriptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apis_event_v2_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteWebhookSubscriptionResponse.ProtoReflect.Descriptor instead.
func (*DeleteWebhookSubscriptionResponse) Descriptor() ([]byte, []int) {
	return file_apis_event_v2_api_proto_rawDescGZIP(), []int{10}
}

// Payload to subscribe or unsubscribe from an event
type SubscribePayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Event name to subscribe to for custom events.
	// This can be a wildcard `my_service:*` or multiple events `my_event|my_other_event`. This is deprecated, prefer `events`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Event name to subscribe to for custom events, this can be a wildcard `my_service:*`
	Events []string `protobuf:"bytes,3,rep,name=events,proto3" json:"events,omitempty"`
	// The target to subscribe to.
	Target *EventTarget `protobuf:"bytes,2,opt,name=target,proto3,oneof" json:"target,omitempty"`
}

func (x *SubscribePayload) Reset() {
	*x = SubscribePayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_event_v2_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribePayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribePayload) ProtoMessage() {}

func (x *SubscribePayload) ProtoReflect() protoreflect.Message {
	mi := &file_apis_event_v2_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribePayload.ProtoReflect.Descriptor instead.
func (*SubscribePayload) Descriptor() ([]byte, []int) {
	return file_apis_event_v2_api_proto_rawDescGZIP(), []int{11}
}

func (x *SubscribePayload) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SubscribePayload) GetEvents() []string {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *SubscribePayload) GetTarget() *EventTarget {
	if x != nil {
		return x.Target
	}
	return nil
}

// Indicates an error with a message sent to the Event API.
// Tie `correlation_id` on the message sent to the Event API and the `correlation_id`
// on the parent message to understand which request this error is for.
type EventsStreamError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The GRPC error code for the event.
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// A mesasage indicating what the error is.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *EventsStreamError) Reset() {
	*x = EventsStreamError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_event_v2_api_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventsStreamError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventsStreamError) ProtoMessage() {}

func (x *EventsStreamError) ProtoReflect() protoreflect.Message {
	mi := &file_apis_event_v2_api_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventsStreamError.ProtoReflect.Descriptor instead.
func (*EventsStreamError) Descriptor() ([]byte, []int) {
	return file_apis_event_v2_api_proto_rawDescGZIP(), []int{12}
}

func (x *EventsStreamError) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *EventsStreamError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Indicate to the client that they should re-open their connection
type EventsStreamReconnectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether the access token needs to be refreshed before reconnecting.
	Reauthenticate bool `protobuf:"varint,1,opt,name=reauthenticate,proto3" json:"reauthenticate,omitempty"`
	// A timestamp indicating when the connection should be reconnected by.
	// If you're maintaining multiple connections, you should reconnect at a random interval within this time range.
	BeforeTimestamp string `protobuf:"bytes,2,opt,name=before_timestamp,json=beforeTimestamp,proto3" json:"before_timestamp,omitempty"`
}

func (x *EventsStreamReconnectRequest) Reset() {
	*x = EventsStreamReconnectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_event_v2_api_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventsStreamReconnectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventsStreamReconnectRequest) ProtoMessage() {}

func (x *EventsStreamReconnectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apis_event_v2_api_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventsStreamReconnectRequest.ProtoReflect.Descriptor instead.
func (*EventsStreamReconnectRequest) Descriptor() ([]byte, []int) {
	return file_apis_event_v2_api_proto_rawDescGZIP(), []int{13}
}

func (x *EventsStreamReconnectRequest) GetReauthenticate() bool {
	if x != nil {
		return x.Reauthenticate
	}
	return false
}

func (x *EventsStreamReconnectRequest) GetBeforeTimestamp() string {
	if x != nil {
		return x.BeforeTimestamp
	}
	return ""
}

// Payload sent to the event API
type EventsStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional value to tag any return values with. This can be any string-based value
	// that your are able to track.
	CorrelationId *string `protobuf:"bytes,1,opt,name=correlation_id,json=correlationId,proto3,oneof" json:"correlation_id,omitempty"`
	// Types that are assignable to EventPayload:
	//
	//	*EventsStreamRequest_Subscribe
	//	*EventsStreamRequest_Unsubscribe
	//	*EventsStreamRequest_Publish
	//	*EventsStreamRequest_Ping
	EventPayload isEventsStreamRequest_EventPayload `protobuf_oneof:"event_payload"`
}

func (x *EventsStreamRequest) Reset() {
	*x = EventsStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_event_v2_api_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventsStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventsStreamRequest) ProtoMessage() {}

func (x *EventsStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apis_event_v2_api_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventsStreamRequest.ProtoReflect.Descriptor instead.
func (*EventsStreamRequest) Descriptor() ([]byte, []int) {
	return file_apis_event_v2_api_proto_rawDescGZIP(), []int{14}
}

func (x *EventsStreamRequest) GetCorrelationId() string {
	if x != nil && x.CorrelationId != nil {
		return *x.CorrelationId
	}
	return ""
}

func (m *EventsStreamRequest) GetEventPayload() isEventsStreamRequest_EventPayload {
	if m != nil {
		return m.EventPayload
	}
	return nil
}

func (x *EventsStreamRequest) GetSubscribe() *SubscribePayload {
	if x, ok := x.GetEventPayload().(*EventsStreamRequest_Subscribe); ok {
		return x.Subscribe
	}
	return nil
}

func (x *EventsStreamRequest) GetUnsubscribe() *SubscribePayload {
	if x, ok := x.GetEventPayload().(*EventsStreamRequest_Unsubscribe); ok {
		return x.Unsubscribe
	}
	return nil
}

func (x *EventsStreamRequest) GetPublish() *PublishEventRequest {
	if x, ok := x.GetEventPayload().(*EventsStreamRequest_Publish); ok {
		return x.Publish
	}
	return nil
}

func (x *EventsStreamRequest) GetPing() string {
	if x, ok := x.GetEventPayload().(*EventsStreamRequest_Ping); ok {
		return x.Ping
	}
	return ""
}

type isEventsStreamRequest_EventPayload interface {
	isEventsStreamRequest_EventPayload()
}

type EventsStreamRequest_Subscribe struct {
	// Subscribe to a new event.
	Subscribe *SubscribePayload `protobuf:"bytes,100,opt,name=subscribe,proto3,oneof"`
}

type EventsStreamRequest_Unsubscribe struct {
	// Unsubscribe from an event.
	Unsubscribe *SubscribePayload `protobuf:"bytes,101,opt,name=unsubscribe,proto3,oneof"`
}

type EventsStreamRequest_Publish struct {
	// Publish a new event.
	Publish *PublishEventRequest `protobuf:"bytes,102,opt,name=publish,proto3,oneof"`
}

type EventsStreamRequest_Ping struct {
	// Initiate a ping-pong message.
	Ping string `protobuf:"bytes,103,opt,name=ping,proto3,oneof"`
}

func (*EventsStreamRequest_Subscribe) isEventsStreamRequest_EventPayload() {}

func (*EventsStreamRequest_Unsubscribe) isEventsStreamRequest_EventPayload() {}

func (*EventsStreamRequest_Publish) isEventsStreamRequest_EventPayload() {}

func (*EventsStreamRequest_Ping) isEventsStreamRequest_EventPayload() {}

// Payload returned from the event API.
type EventsStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional value to tag any return values with.
	// Correlation ID should be used to correlate requests sent down the socket,
	// enabling you to tie a `PUBLISH` to a `PUBLISHED“
	CorrelationId *string `protobuf:"bytes,2,opt,name=correlation_id,json=correlationId,proto3,oneof" json:"correlation_id,omitempty"`
	// Optional session id
	// This is set by sending the `SessionId` header for any HTTP requests
	// and the `sessionId` query parameter for websockets.
	SessionId *string `protobuf:"bytes,3,opt,name=session_id,json=sessionId,proto3,oneof" json:"session_id,omitempty"`
	// Types that are assignable to EventPayload:
	//
	//	*EventsStreamResponse_Event
	//	*EventsStreamResponse_Pong
	//	*EventsStreamResponse_Error
	//	*EventsStreamResponse_Subscribed
	//	*EventsStreamResponse_Unsubscribed
	//	*EventsStreamResponse_Published
	//	*EventsStreamResponse_ReconnectBefore
	EventPayload isEventsStreamResponse_EventPayload `protobuf_oneof:"event_payload"`
}

func (x *EventsStreamResponse) Reset() {
	*x = EventsStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_event_v2_api_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventsStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventsStreamResponse) ProtoMessage() {}

func (x *EventsStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apis_event_v2_api_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventsStreamResponse.ProtoReflect.Descriptor instead.
func (*EventsStreamResponse) Descriptor() ([]byte, []int) {
	return file_apis_event_v2_api_proto_rawDescGZIP(), []int{15}
}

func (x *EventsStreamResponse) GetCorrelationId() string {
	if x != nil && x.CorrelationId != nil {
		return *x.CorrelationId
	}
	return ""
}

func (x *EventsStreamResponse) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (m *EventsStreamResponse) GetEventPayload() isEventsStreamResponse_EventPayload {
	if m != nil {
		return m.EventPayload
	}
	return nil
}

func (x *EventsStreamResponse) GetEvent() *PublishEventResponse {
	if x, ok := x.GetEventPayload().(*EventsStreamResponse_Event); ok {
		return x.Event
	}
	return nil
}

func (x *EventsStreamResponse) GetPong() string {
	if x, ok := x.GetEventPayload().(*EventsStreamResponse_Pong); ok {
		return x.Pong
	}
	return ""
}

func (x *EventsStreamResponse) GetError() *EventsStreamError {
	if x, ok := x.GetEventPayload().(*EventsStreamResponse_Error); ok {
		return x.Error
	}
	return nil
}

func (x *EventsStreamResponse) GetSubscribed() *SubscribePayload {
	if x, ok := x.GetEventPayload().(*EventsStreamResponse_Subscribed); ok {
		return x.Subscribed
	}
	return nil
}

func (x *EventsStreamResponse) GetUnsubscribed() *SubscribePayload {
	if x, ok := x.GetEventPayload().(*EventsStreamResponse_Unsubscribed); ok {
		return x.Unsubscribed
	}
	return nil
}

func (x *EventsStreamResponse) GetPublished() *PublishEventResponse {
	if x, ok := x.GetEventPayload().(*EventsStreamResponse_Published); ok {
		return x.Published
	}
	return nil
}

func (x *EventsStreamResponse) GetReconnectBefore() *EventsStreamReconnectRequest {
	if x, ok := x.GetEventPayload().(*EventsStreamResponse_ReconnectBefore); ok {
		return x.ReconnectBefore
	}
	return nil
}

type isEventsStreamResponse_EventPayload interface {
	isEventsStreamResponse_EventPayload()
}

type EventsStreamResponse_Event struct {
	// Custom event emitted
	Event *PublishEventResponse `protobuf:"bytes,100,opt,name=event,proto3,oneof"`
}

type EventsStreamResponse_Pong struct {
	// Ping payload
	Pong string `protobuf:"bytes,200,opt,name=pong,proto3,oneof"`
}

type EventsStreamResponse_Error struct {
	// Non-blocking streaming error
	Error *EventsStreamError `protobuf:"bytes,201,opt,name=error,proto3,oneof"`
}

type EventsStreamResponse_Subscribed struct {
	// Subscribe to a new event.
	Subscribed *SubscribePayload `protobuf:"bytes,202,opt,name=subscribed,proto3,oneof"`
}

type EventsStreamResponse_Unsubscribed struct {
	// Unsubscribe from an event.
	Unsubscribed *SubscribePayload `protobuf:"bytes,203,opt,name=unsubscribed,proto3,oneof"`
}

type EventsStreamResponse_Published struct {
	// Publish a new event.
	Published *PublishEventResponse `protobuf:"bytes,204,opt,name=published,proto3,oneof"`
}

type EventsStreamResponse_ReconnectBefore struct {
	// Inform the client should reoconnect before a timestamp.
	ReconnectBefore *EventsStreamReconnectRequest `protobuf:"bytes,205,opt,name=reconnect_before,json=reconnectBefore,proto3,oneof"`
}

func (*EventsStreamResponse_Event) isEventsStreamResponse_EventPayload() {}

func (*EventsStreamResponse_Pong) isEventsStreamResponse_EventPayload() {}

func (*EventsStreamResponse_Error) isEventsStreamResponse_EventPayload() {}

func (*EventsStreamResponse_Subscribed) isEventsStreamResponse_EventPayload() {}

func (*EventsStreamResponse_Unsubscribed) isEventsStreamResponse_EventPayload() {}

func (*EventsStreamResponse_Published) isEventsStreamResponse_EventPayload() {}

func (*EventsStreamResponse_ReconnectBefore) isEventsStreamResponse_EventPayload() {}

type GetEventsQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Defaults to 100
	Limit int32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	// Defaults to CREATED_AT_DESC
	Order  GetEventsQuery_PaginationOrder `protobuf:"varint,2,opt,name=order,proto3,enum=apis.event.v2.GetEventsQuery_PaginationOrder" json:"order,omitempty"`
	Events []string                       `protobuf:"bytes,3,rep,name=events,proto3" json:"events,omitempty"`
	// The target to filter by.
	Target *GetEventsQuery_Target `protobuf:"bytes,4,opt,name=target,proto3,oneof" json:"target,omitempty"`
	// Defaults to 1 day ago
	AfterTimestamp *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=after_timestamp,json=afterTimestamp,proto3,oneof" json:"after_timestamp,omitempty"`
	// Defaults to now
	BeforeTimestamp *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=before_timestamp,json=beforeTimestamp,proto3,oneof" json:"before_timestamp,omitempty"`
}

func (x *GetEventsQuery) Reset() {
	*x = GetEventsQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_event_v2_api_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEventsQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEventsQuery) ProtoMessage() {}

func (x *GetEventsQuery) ProtoReflect() protoreflect.Message {
	mi := &file_apis_event_v2_api_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEventsQuery.ProtoReflect.Descriptor instead.
func (*GetEventsQuery) Descriptor() ([]byte, []int) {
	return file_apis_event_v2_api_proto_rawDescGZIP(), []int{16}
}

func (x *GetEventsQuery) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetEventsQuery) GetOrder() GetEventsQuery_PaginationOrder {
	if x != nil {
		return x.Order
	}
	return GetEventsQuery_PAGINATION_ORDER_UNSPECIFIED
}

func (x *GetEventsQuery) GetEvents() []string {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *GetEventsQuery) GetTarget() *GetEventsQuery_Target {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *GetEventsQuery) GetAfterTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.AfterTimestamp
	}
	return nil
}

func (x *GetEventsQuery) GetBeforeTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.BeforeTimestamp
	}
	return nil
}

type GetEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Filter:
	//
	//	*GetEventsRequest_Cursor
	//	*GetEventsRequest_Query
	Filter isGetEventsRequest_Filter `protobuf_oneof:"filter"`
}

func (x *GetEventsRequest) Reset() {
	*x = GetEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_event_v2_api_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEventsRequest) ProtoMessage() {}

func (x *GetEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apis_event_v2_api_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEventsRequest.ProtoReflect.Descriptor instead.
func (*GetEventsRequest) Descriptor() ([]byte, []int) {
	return file_apis_event_v2_api_proto_rawDescGZIP(), []int{17}
}

func (m *GetEventsRequest) GetFilter() isGetEventsRequest_Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (x *GetEventsRequest) GetCursor() string {
	if x, ok := x.GetFilter().(*GetEventsRequest_Cursor); ok {
		return x.Cursor
	}
	return ""
}

func (x *GetEventsRequest) GetQuery() *GetEventsQuery {
	if x, ok := x.GetFilter().(*GetEventsRequest_Query); ok {
		return x.Query
	}
	return nil
}

type isGetEventsRequest_Filter interface {
	isGetEventsRequest_Filter()
}

type GetEventsRequest_Cursor struct {
	Cursor string `protobuf:"bytes,1,opt,name=cursor,proto3,oneof"`
}

type GetEventsRequest_Query struct {
	Query *GetEventsQuery `protobuf:"bytes,2,opt,name=query,proto3,oneof"`
}

func (*GetEventsRequest_Cursor) isGetEventsRequest_Filter() {}

func (*GetEventsRequest_Query) isGetEventsRequest_Filter() {}

type GetEventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events     []*Event `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
	NextCursor *string  `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3,oneof" json:"next_cursor,omitempty"`
}

func (x *GetEventsResponse) Reset() {
	*x = GetEventsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_event_v2_api_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEventsResponse) ProtoMessage() {}

func (x *GetEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apis_event_v2_api_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEventsResponse.ProtoReflect.Descriptor instead.
func (*GetEventsResponse) Descriptor() ([]byte, []int) {
	return file_apis_event_v2_api_proto_rawDescGZIP(), []int{18}
}

func (x *GetEventsResponse) GetEvents() []*Event {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *GetEventsResponse) GetNextCursor() string {
	if x != nil && x.NextCursor != nil {
		return *x.NextCursor
	}
	return ""
}

// A representation of an event
type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the event.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Value of the event.
	Payload *structpb.Struct `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	// Custom scoping parameters.
	Target *ServiceEventTarget `protobuf:"bytes,3,opt,name=target,proto3,oneof" json:"target,omitempty"`
	// Metadata associated with the publishing of the event
	RequestMetadata *structpb.Value `protobuf:"bytes,4,opt,name=request_metadata,json=requestMetadata,proto3,oneof" json:"request_metadata,omitempty"`
	// Internal ID of the event.
	Id string `protobuf:"bytes,5,opt,name=id,proto3" json:"id,omitempty"`
	// The time the event was first published.
	PublishedAt *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=published_at,json=publishedAt,proto3" json:"published_at,omitempty"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_event_v2_api_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_apis_event_v2_api_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_apis_event_v2_api_proto_rawDescGZIP(), []int{19}
}

func (x *Event) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Event) GetPayload() *structpb.Struct {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *Event) GetTarget() *ServiceEventTarget {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *Event) GetRequestMetadata() *structpb.Value {
	if x != nil {
		return x.RequestMetadata
	}
	return nil
}

func (x *Event) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Event) GetPublishedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.PublishedAt
	}
	return nil
}

type GetEventsQuery_TargetValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// By default this is assumed to be true, if set to false any events that aren't explicitly targetted will be included.
	// E.g you want to receive all events for a layout, but also want to receive broadcast events (only scoped to the project).
	ExplicitOnly bool `protobuf:"varint,2,opt,name=explicit_only,json=explicitOnly,proto3" json:"explicit_only,omitempty"`
}

func (x *GetEventsQuery_TargetValue) Reset() {
	*x = GetEventsQuery_TargetValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_event_v2_api_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEventsQuery_TargetValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEventsQuery_TargetValue) ProtoMessage() {}

func (x *GetEventsQuery_TargetValue) ProtoReflect() protoreflect.Message {
	mi := &file_apis_event_v2_api_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEventsQuery_TargetValue.ProtoReflect.Descriptor instead.
func (*GetEventsQuery_TargetValue) Descriptor() ([]byte, []int) {
	return file_apis_event_v2_api_proto_rawDescGZIP(), []int{16, 0}
}

func (x *GetEventsQuery_TargetValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *GetEventsQuery_TargetValue) GetExplicitOnly() bool {
	if x != nil {
		return x.ExplicitOnly
	}
	return false
}

type GetEventsQuery_Target struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceUserId *GetEventsQuery_TargetValue `protobuf:"bytes,1,opt,name=service_user_id,json=serviceUserId,proto3,oneof" json:"service_user_id,omitempty"`
	CollectionId  *GetEventsQuery_TargetValue `protobuf:"bytes,2,opt,name=collection_id,json=collectionId,proto3,oneof" json:"collection_id,omitempty"`
	ProjectId     *GetEventsQuery_TargetValue `protobuf:"bytes,3,opt,name=project_id,json=projectId,proto3,oneof" json:"project_id,omitempty"`
	LayoutId      *GetEventsQuery_TargetValue `protobuf:"bytes,4,opt,name=layout_id,json=layoutId,proto3,oneof" json:"layout_id,omitempty"`
}

func (x *GetEventsQuery_Target) Reset() {
	*x = GetEventsQuery_Target{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_event_v2_api_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEventsQuery_Target) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEventsQuery_Target) ProtoMessage() {}

func (x *GetEventsQuery_Target) ProtoReflect() protoreflect.Message {
	mi := &file_apis_event_v2_api_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEventsQuery_Target.ProtoReflect.Descriptor instead.
func (*GetEventsQuery_Target) Descriptor() ([]byte, []int) {
	return file_apis_event_v2_api_proto_rawDescGZIP(), []int{16, 1}
}

func (x *GetEventsQuery_Target) GetServiceUserId() *GetEventsQuery_TargetValue {
	if x != nil {
		return x.ServiceUserId
	}
	return nil
}

func (x *GetEventsQuery_Target) GetCollectionId() *GetEventsQuery_TargetValue {
	if x != nil {
		return x.CollectionId
	}
	return nil
}

func (x *GetEventsQuery_Target) GetProjectId() *GetEventsQuery_TargetValue {
	if x != nil {
		return x.ProjectId
	}
	return nil
}

func (x *GetEventsQuery_Target) GetLayoutId() *GetEventsQuery_TargetValue {
	if x != nil {
		return x.LayoutId
	}
	return nil
}

var File_apis_event_v2_api_proto protoreflect.FileDescriptor

var file_apis_event_v2_api_proto_rawDesc = []byte{
	0x0a, 0x17, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x32, 0x2f,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67,
	0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xab, 0x02, 0x0a, 0x0b, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x4c, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0x92,
	0x41, 0x1c, 0x4a, 0x1a, 0x22, 0x36, 0x32, 0x34, 0x63, 0x36, 0x66, 0x34, 0x37, 0x35, 0x38, 0x38,
	0x37, 0x62, 0x32, 0x38, 0x39, 0x34, 0x65, 0x64, 0x38, 0x37, 0x63, 0x38, 0x39, 0x22, 0xe0, 0x41,
	0x01, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0x92, 0x41, 0x1c, 0x4a, 0x1a, 0x22,
	0x36, 0x32, 0x34, 0x63, 0x36, 0x66, 0x34, 0x36, 0x35, 0x38, 0x38, 0x37, 0x62, 0x32, 0x38, 0x39,
	0x34, 0x65, 0x64, 0x38, 0x37, 0x63, 0x38, 0x37, 0x22, 0xe0, 0x41, 0x01, 0x48, 0x01, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x57, 0x0a, 0x09,
	0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x35, 0x92, 0x41, 0x2f, 0x4a, 0x26, 0x22, 0x37, 0x31, 0x33, 0x66, 0x36, 0x65, 0x39, 0x31, 0x2d,
	0x33, 0x38, 0x33, 0x31, 0x2d, 0x34, 0x34, 0x32, 0x31, 0x2d, 0x61, 0x37, 0x32, 0x30, 0x2d, 0x31,
	0x63, 0x38, 0x30, 0x38, 0x34, 0x64, 0x31, 0x30, 0x35, 0x32, 0x35, 0x22, 0xa2, 0x02, 0x04, 0x75,
	0x75, 0x69, 0x64, 0xe0, 0x41, 0x01, 0x48, 0x02, 0x52, 0x08, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6c, 0x61, 0x79, 0x6f, 0x75,
	0x74, 0x5f, 0x69, 0x64, 0x22, 0xe5, 0x03, 0x0a, 0x12, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x40, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0x92, 0x41,
	0x1c, 0x4a, 0x1a, 0x22, 0x36, 0x32, 0x34, 0x63, 0x36, 0x66, 0x34, 0x37, 0x35, 0x38, 0x38, 0x37,
	0x62, 0x32, 0x38, 0x39, 0x34, 0x65, 0x64, 0x38, 0x37, 0x63, 0x38, 0x39, 0x22, 0xe0, 0x41, 0x01,
	0x48, 0x00, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x4c, 0x0a,
	0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0x92, 0x41, 0x1c, 0x4a, 0x1a, 0x22, 0x36, 0x32, 0x34, 0x63,
	0x36, 0x66, 0x34, 0x37, 0x35, 0x38, 0x38, 0x37, 0x62, 0x32, 0x38, 0x39, 0x34, 0x65, 0x64, 0x38,
	0x37, 0x63, 0x38, 0x39, 0x22, 0xe0, 0x41, 0x01, 0x48, 0x01, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x22, 0x92, 0x41, 0x1c, 0x4a, 0x1a, 0x22, 0x36, 0x32, 0x34, 0x63, 0x36, 0x66, 0x34, 0x36, 0x35,
	0x38, 0x38, 0x37, 0x62, 0x32, 0x38, 0x39, 0x34, 0x65, 0x64, 0x38, 0x37, 0x63, 0x38, 0x37, 0x22,
	0xe0, 0x41, 0x01, 0x48, 0x02, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x57, 0x0a, 0x09, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x35, 0x92, 0x41, 0x2f, 0x4a, 0x26, 0x22, 0x37, 0x31,
	0x33, 0x66, 0x36, 0x65, 0x39, 0x31, 0x2d, 0x33, 0x38, 0x33, 0x31, 0x2d, 0x34, 0x34, 0x32, 0x31,
	0x2d, 0x61, 0x37, 0x32, 0x30, 0x2d, 0x31, 0x63, 0x38, 0x30, 0x38, 0x34, 0x64, 0x31, 0x30, 0x35,
	0x32, 0x35, 0x22, 0xa2, 0x02, 0x04, 0x75, 0x75, 0x69, 0x64, 0xe0, 0x41, 0x01, 0x48, 0x03, 0x52,
	0x08, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x0f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0x92, 0x41, 0x1c, 0x4a, 0x1a, 0x22, 0x36, 0x32, 0x34,
	0x63, 0x36, 0x66, 0x34, 0x37, 0x35, 0x38, 0x38, 0x37, 0x62, 0x32, 0x38, 0x39, 0x34, 0x65, 0x64,
	0x38, 0x37, 0x63, 0x38, 0x39, 0x22, 0xe0, 0x41, 0x01, 0x48, 0x04, 0x52, 0x0d, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6c,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22, 0xe3, 0x02, 0x0a,
	0x13, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1a, 0x4a, 0x12, 0x22, 0x6d, 0x79, 0x5f, 0x61, 0x70, 0x70,
	0x3a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x22, 0x78, 0x80, 0x01, 0x80, 0x01,
	0x01, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x53, 0x0a, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x42, 0x20, 0x92, 0x41, 0x1a, 0x4a, 0x18, 0x7b, 0x20, 0x22, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x3a, 0x20, 0x74, 0x72, 0x75,
	0x65, 0x20, 0x7d, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x68, 0x0a, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x20, 0x92, 0x41, 0x1a, 0x4a, 0x18, 0x7b, 0x20, 0x22, 0x65, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3a, 0x20, 0x74, 0x72, 0x75, 0x65, 0x20, 0x7d,
	0xe0, 0x41, 0x01, 0x48, 0x00, 0x52, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x06, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x48, 0x01, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x88,
	0x01, 0x01, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x22, 0xab, 0x03, 0x0a, 0x14, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1a, 0x4a, 0x12,
	0x22, 0x6d, 0x79, 0x5f, 0x61, 0x70, 0x70, 0x3a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61,
	0x74, 0x22, 0x78, 0x80, 0x01, 0x80, 0x01, 0x01, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x53, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x20, 0x92, 0x41, 0x1a,
	0x4a, 0x18, 0x7b, 0x20, 0x22, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x22, 0x3a, 0x20, 0x74, 0x72, 0x75, 0x65, 0x20, 0x7d, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x37, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x48, 0x00, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x68, 0x0a, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x20, 0x92, 0x41, 0x1a, 0x4a, 0x18, 0x7b, 0x20, 0x22, 0x65, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3a, 0x20, 0x74, 0x72, 0x75, 0x65, 0x20, 0x7d,
	0xe0, 0x41, 0x01, 0x48, 0x01, 0x52, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x35, 0x92, 0x41, 0x2f, 0x4a, 0x26, 0x22, 0x37, 0x66, 0x32,
	0x33, 0x66, 0x37, 0x36, 0x63, 0x2d, 0x31, 0x39, 0x39, 0x30, 0x2d, 0x34, 0x61, 0x35, 0x30, 0x2d,
	0x62, 0x33, 0x62, 0x39, 0x2d, 0x64, 0x36, 0x31, 0x35, 0x37, 0x30, 0x33, 0x63, 0x37, 0x37, 0x37,
	0x66, 0x22, 0xa2, 0x02, 0x04, 0x75, 0x75, 0x69, 0x64, 0xe0, 0x41, 0x01, 0x52, 0x02, 0x69, 0x64,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x82, 0x03, 0x0a, 0x13, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x0a, 0x77, 0x65, 0x62, 0x68,
	0x6f, 0x6f, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x32, 0x92, 0x41,
	0x2f, 0x4a, 0x26, 0x22, 0x37, 0x66, 0x32, 0x33, 0x66, 0x37, 0x36, 0x63, 0x2d, 0x31, 0x39, 0x39,
	0x30, 0x2d, 0x34, 0x61, 0x35, 0x30, 0x2d, 0x62, 0x33, 0x62, 0x39, 0x2d, 0x64, 0x36, 0x31, 0x35,
	0x37, 0x30, 0x33, 0x63, 0x37, 0x37, 0x37, 0x66, 0x22, 0xa2, 0x02, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x52, 0x09, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x06, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x2f, 0x92, 0x41, 0x29,
	0x4a, 0x21, 0x22, 0x6d, 0x79, 0x5f, 0x61, 0x70, 0x70, 0x3a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63,
	0x68, 0x61, 0x74, 0x7c, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x3a, 0x2a, 0x22, 0x78, 0x80, 0x01, 0x80, 0x01, 0x01, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x43, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x48, 0x00, 0x52, 0x06,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0x92, 0x41, 0x23, 0x4a, 0x1b, 0x22, 0x68, 0x74,
	0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x6d, 0x79, 0x61, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x22, 0x78, 0x80, 0x01, 0x80, 0x01, 0x01, 0xe0, 0x41,
	0x02, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x33, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x5f, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0f, 0x92, 0x41, 0x0c, 0x3a,
	0x04, 0x35, 0x30, 0x30, 0x30, 0x4a, 0x04, 0x35, 0x30, 0x30, 0x30, 0x48, 0x01, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x73, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x5f, 0x6d, 0x73, 0x22, 0x6c, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x65, 0x62,
	0x68, 0x6f, 0x6f, 0x6b, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x48, 0x00, 0x52, 0x06, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x22, 0x6c, 0x0a, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x65, 0x62, 0x68, 0x6f,
	0x6f, 0x6b, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x57,
	0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0xbc, 0x02, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x65, 0x62, 0x68,
	0x6f, 0x6f, 0x6b, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x2f, 0x92, 0x41, 0x29, 0x4a, 0x21, 0x22, 0x6d, 0x79,
	0x5f, 0x61, 0x70, 0x70, 0x3a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x7c, 0x6f,
	0x74, 0x68, 0x65, 0x72, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x2a, 0x22, 0x78, 0x80,
	0x01, 0x80, 0x01, 0x01, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x43, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x48, 0x00, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x29, 0x92, 0x41, 0x23, 0x4a, 0x1b, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f,
	0x2f, 0x6d, 0x79, 0x61, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x65, 0x62, 0x68, 0x6f,
	0x6f, 0x6b, 0x22, 0x78, 0x80, 0x01, 0x80, 0x01, 0x01, 0xe0, 0x41, 0x02, 0x52, 0x03, 0x75, 0x72,
	0x6c, 0x12, 0x33, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0f, 0x92, 0x41, 0x0c, 0x3a, 0x04, 0x35, 0x30, 0x30, 0x30,
	0x4a, 0x04, 0x35, 0x30, 0x30, 0x30, 0x48, 0x01, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x4d, 0x73, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x73,
	0x22, 0x6b, 0x0a, 0x21, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f,
	0x6b, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x57, 0x65, 0x62, 0x68,
	0x6f, 0x6f, 0x6b, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x75, 0x0a,
	0x20, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x51, 0x0a, 0x0a, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x32, 0x92, 0x41, 0x2f, 0x4a, 0x26, 0x22, 0x37, 0x66, 0x32,
	0x33, 0x66, 0x37, 0x36, 0x63, 0x2d, 0x31, 0x39, 0x39, 0x30, 0x2d, 0x34, 0x61, 0x35, 0x30, 0x2d,
	0x62, 0x33, 0x62, 0x39, 0x2d, 0x64, 0x36, 0x31, 0x35, 0x37, 0x30, 0x33, 0x63, 0x37, 0x37, 0x37,
	0x66, 0x22, 0xa2, 0x02, 0x04, 0x75, 0x75, 0x69, 0x64, 0x52, 0x09, 0x77, 0x65, 0x62, 0x68, 0x6f,
	0x6f, 0x6b, 0x49, 0x64, 0x22, 0x23, 0x0a, 0x21, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x65,
	0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe9, 0x01, 0x0a, 0x10, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x43,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2f, 0x92, 0x41,
	0x29, 0x4a, 0x21, 0x22, 0x6d, 0x79, 0x5f, 0x61, 0x70, 0x70, 0x3a, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x63, 0x68, 0x61, 0x74, 0x7c, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x3a, 0x2a, 0x22, 0x78, 0x80, 0x01, 0x80, 0x01, 0x01, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x42, 0x2f, 0x92, 0x41, 0x29, 0x4a, 0x21, 0x22, 0x6d, 0x79, 0x5f, 0x61, 0x70,
	0x70, 0x3a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x7c, 0x6f, 0x74, 0x68, 0x65,
	0x72, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x2a, 0x22, 0x78, 0x80, 0x01, 0x80, 0x01,
	0x01, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x06,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x48, 0x00, 0x52,
	0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x71, 0x0a, 0x11, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0x92, 0x41, 0x04, 0x4a, 0x02, 0x31,
	0x33, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3f, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0x92, 0x41, 0x22, 0x4a, 0x20, 0x22,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x3a, 0x20, 0x53, 0x6f, 0x6d, 0x65, 0x74, 0x68,
	0x69, 0x6e, 0x67, 0x20, 0x77, 0x65, 0x6e, 0x74, 0x20, 0x77, 0x72, 0x6f, 0x6e, 0x67, 0x22, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x99, 0x01, 0x0a, 0x1c, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x0e, 0x72, 0x65, 0x61,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x0d, 0x92, 0x41, 0x07, 0x4a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0xe0, 0x41, 0x02,
	0x52, 0x0e, 0x72, 0x65, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x12, 0x42, 0x0a, 0x10, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x11, 0x4a,
	0x0f, 0x22, 0x31, 0x36, 0x34, 0x39, 0x31, 0x37, 0x39, 0x34, 0x38, 0x36, 0x32, 0x32, 0x33, 0x22,
	0xe0, 0x41, 0x02, 0x52, 0x0f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x22, 0x84, 0x03, 0x0a, 0x13, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x57, 0x0a, 0x0e,
	0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0x92, 0x41, 0x28, 0x4a, 0x26, 0x22, 0x37, 0x61, 0x35, 0x39,
	0x63, 0x34, 0x39, 0x66, 0x2d, 0x63, 0x30, 0x62, 0x62, 0x2d, 0x34, 0x66, 0x39, 0x34, 0x2d, 0x39,
	0x63, 0x62, 0x65, 0x2d, 0x37, 0x33, 0x61, 0x66, 0x31, 0x32, 0x36, 0x64, 0x64, 0x31, 0x65, 0x61,
	0x22, 0x48, 0x01, 0x52, 0x0d, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x09, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x43, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x0b,
	0x75, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x3e, 0x0a, 0x07, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x07, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x12, 0x2a, 0x0a, 0x04, 0x70,
	0x69, 0x6e, 0x67, 0x18, 0x67, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x11, 0x4a, 0x0f,
	0x22, 0x31, 0x36, 0x34, 0x39, 0x31, 0x37, 0x39, 0x34, 0x38, 0x36, 0x32, 0x32, 0x33, 0x22, 0x48,
	0x00, 0x52, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x42, 0x0f, 0x0a, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x63, 0x6f, 0x72,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x22, 0xaf, 0x05, 0x0a, 0x14,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x0e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0x92, 0x41,
	0x28, 0x4a, 0x26, 0x22, 0x37, 0x61, 0x35, 0x39, 0x63, 0x34, 0x39, 0x66, 0x2d, 0x63, 0x30, 0x62,
	0x62, 0x2d, 0x34, 0x66, 0x39, 0x34, 0x2d, 0x39, 0x63, 0x62, 0x65, 0x2d, 0x37, 0x33, 0x61, 0x66,
	0x31, 0x32, 0x36, 0x64, 0x64, 0x31, 0x65, 0x61, 0x22, 0x48, 0x01, 0x52, 0x0d, 0x63, 0x6f, 0x72,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a,
	0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x2b, 0x92, 0x41, 0x28, 0x4a, 0x26, 0x22, 0x30, 0x63, 0x35, 0x39, 0x36, 0x66, 0x31,
	0x62, 0x2d, 0x33, 0x34, 0x32, 0x38, 0x2d, 0x34, 0x37, 0x62, 0x62, 0x2d, 0x61, 0x36, 0x37, 0x33,
	0x2d, 0x35, 0x36, 0x33, 0x32, 0x31, 0x31, 0x63, 0x61, 0x30, 0x63, 0x37, 0x35, 0x22, 0x48, 0x02,
	0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3b,
	0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x04, 0x70,
	0x6f, 0x6e, 0x67, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x70, 0x6f,
	0x6e, 0x67, 0x12, 0x39, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0xc9, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x32, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x42, 0x0a,
	0x0a, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x18, 0xca, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x32, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x64, 0x12, 0x46, 0x0a, 0x0c, 0x75, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x64, 0x18, 0xcb, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x0c, 0x75, 0x6e, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x12, 0x44, 0x0a, 0x09, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0xcc, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12,
	0x59, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x62, 0x65, 0x66,
	0x6f, 0x72, 0x65, 0x18, 0xcd, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x22, 0xf1, 0x07,
	0x0a, 0x0e, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x43, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x41, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x48, 0x00, 0x52, 0x06, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x0f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x01, 0x52, 0x0e, 0x61,
	0x66, 0x74, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x88, 0x01, 0x01,
	0x12, 0x4a, 0x0a, 0x10, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x02, 0x52, 0x0f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x88, 0x01, 0x01, 0x1a, 0x48, 0x0a, 0x0b,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x6f, 0x6e,
	0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63,
	0x69, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x1a, 0x94, 0x03, 0x0a, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x12, 0x56, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x53, 0x0a, 0x0d, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32,
	0x2e, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x01, 0x52, 0x0c, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x4d,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x02, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a,
	0x09, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32,
	0x2e, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x03, 0x52, 0x08, 0x6c,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x22, 0x7e, 0x0a,
	0x0f, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x20, 0x0a, 0x1c, 0x50, 0x41, 0x47, 0x49, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f,
	0x52, 0x44, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x50, 0x41, 0x47, 0x49, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x41,
	0x54, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x50, 0x41, 0x47, 0x49,
	0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x52, 0x45,
	0x41, 0x54, 0x45, 0x44, 0x5f, 0x41, 0x54, 0x5f, 0x41, 0x53, 0x43, 0x10, 0x02, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x66, 0x74,
	0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x13, 0x0a, 0x11,
	0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x22, 0x6d, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12,
	0x35, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x47,
	0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52,
	0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x42, 0x08, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x22, 0x77, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x73,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74,
	0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x22, 0xe2, 0x03, 0x0a, 0x05, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x20, 0x92, 0x41, 0x1a, 0x4a, 0x12, 0x22, 0x6d, 0x79, 0x5f, 0x61, 0x70, 0x70, 0x3a,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x22, 0x78, 0x80, 0x01, 0x80, 0x01, 0x01,
	0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x53, 0x0a, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x42, 0x20, 0x92, 0x41, 0x1a, 0x4a, 0x18, 0x7b, 0x20, 0x22, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x3a, 0x20, 0x74, 0x72, 0x75, 0x65,
	0x20, 0x7d, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x3e,
	0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x48, 0x00, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x68,
	0x0a, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x20, 0x92, 0x41, 0x1a, 0x4a, 0x18, 0x7b, 0x20, 0x22, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3a, 0x20, 0x74, 0x72, 0x75, 0x65, 0x20, 0x7d, 0xe0,
	0x41, 0x01, 0x48, 0x01, 0x52, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x35, 0x92, 0x41, 0x2f, 0x4a, 0x26, 0x22, 0x37, 0x66, 0x32, 0x33,
	0x66, 0x37, 0x36, 0x63, 0x2d, 0x31, 0x39, 0x39, 0x30, 0x2d, 0x34, 0x61, 0x35, 0x30, 0x2d, 0x62,
	0x33, 0x62, 0x39, 0x2d, 0x64, 0x36, 0x31, 0x35, 0x37, 0x30, 0x33, 0x63, 0x37, 0x37, 0x37, 0x66,
	0x22, 0xa2, 0x02, 0x04, 0x75, 0x75, 0x69, 0x64, 0xe0, 0x41, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x3d, 0x0a, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2a, 0x92,
	0x02, 0x0a, 0x17, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x26, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x53, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x4d, 0x45, 0x53, 0x53,
	0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x53,
	0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x4d, 0x45, 0x53,
	0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x02, 0x12, 0x29, 0x0a, 0x25, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x53, 0x54, 0x52, 0x45,
	0x41, 0x4d, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x44, 0x10, 0x03, 0x12, 0x2b, 0x0a, 0x27,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x4d, 0x45,
	0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x42,
	0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x44, 0x10, 0x04, 0x12, 0x28, 0x0a, 0x24, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x53, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41,
	0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x45,
	0x44, 0x10, 0x05, 0x32, 0xfe, 0x01, 0x0a, 0x0c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x66, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x22,
	0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x32, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x0f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x09, 0x12,
	0x07, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x28, 0x01, 0x30, 0x01, 0x12, 0x85, 0x01, 0x0a,
	0x07, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x12, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x31, 0x92, 0x41, 0x1b, 0x4a, 0x19, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x12, 0x0a,
	0x10, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e,
	0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x3a, 0x01, 0x2a, 0x22, 0x08, 0x2f, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x32, 0xd9, 0x03, 0x0a, 0x0e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x8e, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74,
	0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x11, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0b, 0x12, 0x09, 0x2f,
	0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x12, 0x94, 0x01, 0x0a, 0x19, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x65, 0x62,
	0x68, 0x6f, 0x6f, 0x6b, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x65,
	0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x14, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x0e, 0x3a, 0x01, 0x2a, 0x22, 0x09, 0x2f, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x12,
	0x9e, 0x01, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f,
	0x6b, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x2e,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30,
	0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x2a, 0x16, 0x2f, 0x77, 0x65, 0x62, 0x68, 0x6f,
	0x6f, 0x6b, 0x73, 0x2f, 0x7b, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x5f, 0x69, 0x64, 0x7d,
	0x32, 0x72, 0x0a, 0x0e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x60, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x1f, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e,
	0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32,
	0x2e, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x10, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0a, 0x12, 0x08, 0x2f, 0x68, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x42, 0x97, 0x02, 0x92, 0x41, 0x55, 0x12, 0x10, 0x0a, 0x09, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x20, 0x41, 0x50, 0x49, 0x32, 0x03, 0x32, 0x2e, 0x30, 0x1a, 0x0f, 0x6c, 0x69,
	0x76, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x22, 0x09, 0x2f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x32, 0x2a, 0x01, 0x02, 0x32, 0x10, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x0a,
	0x11, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x32, 0x42, 0x08, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4a,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x67, 0x6f, 0x2f, 0x73, 0x64, 0x6b, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2f,
	0x76, 0x32, 0x3b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x76, 0x32, 0xa2, 0x02, 0x03, 0x41, 0x45, 0x58,
	0xaa, 0x02, 0x0d, 0x41, 0x70, 0x69, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x56, 0x32,
	0xca, 0x02, 0x0d, 0x41, 0x70, 0x69, 0x73, 0x5c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5c, 0x56, 0x32,
	0xe2, 0x02, 0x19, 0x41, 0x70, 0x69, 0x73, 0x5c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5c, 0x56, 0x32,
	0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0f, 0x41,
	0x70, 0x69, 0x73, 0x3a, 0x3a, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x3a, 0x3a, 0x56, 0x32, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_apis_event_v2_api_proto_rawDescOnce sync.Once
	file_apis_event_v2_api_proto_rawDescData = file_apis_event_v2_api_proto_rawDesc
)

func file_apis_event_v2_api_proto_rawDescGZIP() []byte {
	file_apis_event_v2_api_proto_rawDescOnce.Do(func() {
		file_apis_event_v2_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_apis_event_v2_api_proto_rawDescData)
	})
	return file_apis_event_v2_api_proto_rawDescData
}

var file_apis_event_v2_api_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_apis_event_v2_api_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_apis_event_v2_api_proto_goTypes = []interface{}{
	(EventsStreamMessageType)(0),              // 0: apis.event.v2.EventsStreamMessageType
	(GetEventsQuery_PaginationOrder)(0),       // 1: apis.event.v2.GetEventsQuery.PaginationOrder
	(*EventTarget)(nil),                       // 2: apis.event.v2.EventTarget
	(*ServiceEventTarget)(nil),                // 3: apis.event.v2.ServiceEventTarget
	(*PublishEventRequest)(nil),               // 4: apis.event.v2.PublishEventRequest
	(*PublishEventResponse)(nil),              // 5: apis.event.v2.PublishEventResponse
	(*WebhookSubscription)(nil),               // 6: apis.event.v2.WebhookSubscription
	(*ListWebhookSubscriptionsRequest)(nil),   // 7: apis.event.v2.ListWebhookSubscriptionsRequest
	(*ListWebhookSubscriptionsResponse)(nil),  // 8: apis.event.v2.ListWebhookSubscriptionsResponse
	(*CreateWebhookSubscriptionRequest)(nil),  // 9: apis.event.v2.CreateWebhookSubscriptionRequest
	(*CreateWebhookSubscriptionResponse)(nil), // 10: apis.event.v2.CreateWebhookSubscriptionResponse
	(*DeleteWebhookSubscriptionRequest)(nil),  // 11: apis.event.v2.DeleteWebhookSubscriptionRequest
	(*DeleteWebhookSubscriptionResponse)(nil), // 12: apis.event.v2.DeleteWebhookSubscriptionResponse
	(*SubscribePayload)(nil),                  // 13: apis.event.v2.SubscribePayload
	(*EventsStreamError)(nil),                 // 14: apis.event.v2.EventsStreamError
	(*EventsStreamReconnectRequest)(nil),      // 15: apis.event.v2.EventsStreamReconnectRequest
	(*EventsStreamRequest)(nil),               // 16: apis.event.v2.EventsStreamRequest
	(*EventsStreamResponse)(nil),              // 17: apis.event.v2.EventsStreamResponse
	(*GetEventsQuery)(nil),                    // 18: apis.event.v2.GetEventsQuery
	(*GetEventsRequest)(nil),                  // 19: apis.event.v2.GetEventsRequest
	(*GetEventsResponse)(nil),                 // 20: apis.event.v2.GetEventsResponse
	(*Event)(nil),                             // 21: apis.event.v2.Event
	(*GetEventsQuery_TargetValue)(nil),        // 22: apis.event.v2.GetEventsQuery.TargetValue
	(*GetEventsQuery_Target)(nil),             // 23: apis.event.v2.GetEventsQuery.Target
	(*structpb.Struct)(nil),                   // 24: google.protobuf.Struct
	(*structpb.Value)(nil),                    // 25: google.protobuf.Value
	(*timestamppb.Timestamp)(nil),             // 26: google.protobuf.Timestamp
}
var file_apis_event_v2_api_proto_depIdxs = []int32{
	24, // 0: apis.event.v2.PublishEventRequest.payload:type_name -> google.protobuf.Struct
	25, // 1: apis.event.v2.PublishEventRequest.request_metadata:type_name -> google.protobuf.Value
	2,  // 2: apis.event.v2.PublishEventRequest.target:type_name -> apis.event.v2.EventTarget
	24, // 3: apis.event.v2.PublishEventResponse.payload:type_name -> google.protobuf.Struct
	2,  // 4: apis.event.v2.PublishEventResponse.target:type_name -> apis.event.v2.EventTarget
	25, // 5: apis.event.v2.PublishEventResponse.request_metadata:type_name -> google.protobuf.Value
	3,  // 6: apis.event.v2.WebhookSubscription.target:type_name -> apis.event.v2.ServiceEventTarget
	3,  // 7: apis.event.v2.ListWebhookSubscriptionsRequest.target:type_name -> apis.event.v2.ServiceEventTarget
	6,  // 8: apis.event.v2.ListWebhookSubscriptionsResponse.subscriptions:type_name -> apis.event.v2.WebhookSubscription
	3,  // 9: apis.event.v2.CreateWebhookSubscriptionRequest.target:type_name -> apis.event.v2.ServiceEventTarget
	6,  // 10: apis.event.v2.CreateWebhookSubscriptionResponse.subscription:type_name -> apis.event.v2.WebhookSubscription
	2,  // 11: apis.event.v2.SubscribePayload.target:type_name -> apis.event.v2.EventTarget
	13, // 12: apis.event.v2.EventsStreamRequest.subscribe:type_name -> apis.event.v2.SubscribePayload
	13, // 13: apis.event.v2.EventsStreamRequest.unsubscribe:type_name -> apis.event.v2.SubscribePayload
	4,  // 14: apis.event.v2.EventsStreamRequest.publish:type_name -> apis.event.v2.PublishEventRequest
	5,  // 15: apis.event.v2.EventsStreamResponse.event:type_name -> apis.event.v2.PublishEventResponse
	14, // 16: apis.event.v2.EventsStreamResponse.error:type_name -> apis.event.v2.EventsStreamError
	13, // 17: apis.event.v2.EventsStreamResponse.subscribed:type_name -> apis.event.v2.SubscribePayload
	13, // 18: apis.event.v2.EventsStreamResponse.unsubscribed:type_name -> apis.event.v2.SubscribePayload
	5,  // 19: apis.event.v2.EventsStreamResponse.published:type_name -> apis.event.v2.PublishEventResponse
	15, // 20: apis.event.v2.EventsStreamResponse.reconnect_before:type_name -> apis.event.v2.EventsStreamReconnectRequest
	1,  // 21: apis.event.v2.GetEventsQuery.order:type_name -> apis.event.v2.GetEventsQuery.PaginationOrder
	23, // 22: apis.event.v2.GetEventsQuery.target:type_name -> apis.event.v2.GetEventsQuery.Target
	26, // 23: apis.event.v2.GetEventsQuery.after_timestamp:type_name -> google.protobuf.Timestamp
	26, // 24: apis.event.v2.GetEventsQuery.before_timestamp:type_name -> google.protobuf.Timestamp
	18, // 25: apis.event.v2.GetEventsRequest.query:type_name -> apis.event.v2.GetEventsQuery
	21, // 26: apis.event.v2.GetEventsResponse.events:type_name -> apis.event.v2.Event
	24, // 27: apis.event.v2.Event.payload:type_name -> google.protobuf.Struct
	3,  // 28: apis.event.v2.Event.target:type_name -> apis.event.v2.ServiceEventTarget
	25, // 29: apis.event.v2.Event.request_metadata:type_name -> google.protobuf.Value
	26, // 30: apis.event.v2.Event.published_at:type_name -> google.protobuf.Timestamp
	22, // 31: apis.event.v2.GetEventsQuery.Target.service_user_id:type_name -> apis.event.v2.GetEventsQuery.TargetValue
	22, // 32: apis.event.v2.GetEventsQuery.Target.collection_id:type_name -> apis.event.v2.GetEventsQuery.TargetValue
	22, // 33: apis.event.v2.GetEventsQuery.Target.project_id:type_name -> apis.event.v2.GetEventsQuery.TargetValue
	22, // 34: apis.event.v2.GetEventsQuery.Target.layout_id:type_name -> apis.event.v2.GetEventsQuery.TargetValue
	16, // 35: apis.event.v2.EventService.Stream:input_type -> apis.event.v2.EventsStreamRequest
	4,  // 36: apis.event.v2.EventService.Publish:input_type -> apis.event.v2.PublishEventRequest
	7,  // 37: apis.event.v2.WebhookService.ListWebhookSubscriptions:input_type -> apis.event.v2.ListWebhookSubscriptionsRequest
	9,  // 38: apis.event.v2.WebhookService.CreateWebhookSubscription:input_type -> apis.event.v2.CreateWebhookSubscriptionRequest
	11, // 39: apis.event.v2.WebhookService.DeleteWebhookSubscription:input_type -> apis.event.v2.DeleteWebhookSubscriptionRequest
	19, // 40: apis.event.v2.HistoryService.GetEvents:input_type -> apis.event.v2.GetEventsRequest
	17, // 41: apis.event.v2.EventService.Stream:output_type -> apis.event.v2.EventsStreamResponse
	5,  // 42: apis.event.v2.EventService.Publish:output_type -> apis.event.v2.PublishEventResponse
	8,  // 43: apis.event.v2.WebhookService.ListWebhookSubscriptions:output_type -> apis.event.v2.ListWebhookSubscriptionsResponse
	10, // 44: apis.event.v2.WebhookService.CreateWebhookSubscription:output_type -> apis.event.v2.CreateWebhookSubscriptionResponse
	12, // 45: apis.event.v2.WebhookService.DeleteWebhookSubscription:output_type -> apis.event.v2.DeleteWebhookSubscriptionResponse
	20, // 46: apis.event.v2.HistoryService.GetEvents:output_type -> apis.event.v2.GetEventsResponse
	41, // [41:47] is the sub-list for method output_type
	35, // [35:41] is the sub-list for method input_type
	35, // [35:35] is the sub-list for extension type_name
	35, // [35:35] is the sub-list for extension extendee
	0,  // [0:35] is the sub-list for field type_name
}

func init() { file_apis_event_v2_api_proto_init() }
func file_apis_event_v2_api_proto_init() {
	if File_apis_event_v2_api_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_apis_event_v2_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_event_v2_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceEventTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_event_v2_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_event_v2_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishEventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_event_v2_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebhookSubscription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_event_v2_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWebhookSubscriptionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_event_v2_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWebhookSubscriptionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_event_v2_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateWebhookSubscriptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_event_v2_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateWebhookSubscriptionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_event_v2_api_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteWebhookSubscriptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_event_v2_api_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteWebhookSubscriptionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_event_v2_api_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribePayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_event_v2_api_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventsStreamError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_event_v2_api_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventsStreamReconnectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_event_v2_api_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventsStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_event_v2_api_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventsStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_event_v2_api_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEventsQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_event_v2_api_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_event_v2_api_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEventsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_event_v2_api_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_event_v2_api_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEventsQuery_TargetValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_event_v2_api_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEventsQuery_Target); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_apis_event_v2_api_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_apis_event_v2_api_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_apis_event_v2_api_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_apis_event_v2_api_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_apis_event_v2_api_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_apis_event_v2_api_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_apis_event_v2_api_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_apis_event_v2_api_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_apis_event_v2_api_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*EventsStreamRequest_Subscribe)(nil),
		(*EventsStreamRequest_Unsubscribe)(nil),
		(*EventsStreamRequest_Publish)(nil),
		(*EventsStreamRequest_Ping)(nil),
	}
	file_apis_event_v2_api_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*EventsStreamResponse_Event)(nil),
		(*EventsStreamResponse_Pong)(nil),
		(*EventsStreamResponse_Error)(nil),
		(*EventsStreamResponse_Subscribed)(nil),
		(*EventsStreamResponse_Unsubscribed)(nil),
		(*EventsStreamResponse_Published)(nil),
		(*EventsStreamResponse_ReconnectBefore)(nil),
	}
	file_apis_event_v2_api_proto_msgTypes[16].OneofWrappers = []interface{}{}
	file_apis_event_v2_api_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*GetEventsRequest_Cursor)(nil),
		(*GetEventsRequest_Query)(nil),
	}
	file_apis_event_v2_api_proto_msgTypes[18].OneofWrappers = []interface{}{}
	file_apis_event_v2_api_proto_msgTypes[19].OneofWrappers = []interface{}{}
	file_apis_event_v2_api_proto_msgTypes[21].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_apis_event_v2_api_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_apis_event_v2_api_proto_goTypes,
		DependencyIndexes: file_apis_event_v2_api_proto_depIdxs,
		EnumInfos:         file_apis_event_v2_api_proto_enumTypes,
		MessageInfos:      file_apis_event_v2_api_proto_msgTypes,
	}.Build()
	File_apis_event_v2_api_proto = out.File
	file_apis_event_v2_api_proto_rawDesc = nil
	file_apis_event_v2_api_proto_goTypes = nil
	file_apis_event_v2_api_proto_depIdxs = nil
}
