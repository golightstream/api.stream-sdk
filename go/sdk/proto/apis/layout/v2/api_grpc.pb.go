/*
---------------------------------------------------------------------------------------------
Copyright (c) Infiniscene, Inc. All rights reserved.
Licensed under the MIT License. See License.txt in the project root for license information.
---------------------------------------------------------------------------------------------
*/
// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: apis/layout/v2/api.proto

package layoutv2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LayerService_ListLayers_FullMethodName  = "/apis.layout.v2.LayerService/ListLayers"
	LayerService_CreateLayer_FullMethodName = "/apis.layout.v2.LayerService/CreateLayer"
	LayerService_GetLayer_FullMethodName    = "/apis.layout.v2.LayerService/GetLayer"
	LayerService_UpdateLayer_FullMethodName = "/apis.layout.v2.LayerService/UpdateLayer"
	LayerService_DeleteLayer_FullMethodName = "/apis.layout.v2.LayerService/DeleteLayer"
	LayerService_Batch_FullMethodName       = "/apis.layout.v2.LayerService/Batch"
)

// LayerServiceClient is the client API for LayerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LayerServiceClient interface {
	// List all layers
	ListLayers(ctx context.Context, in *ListLayersRequest, opts ...grpc.CallOption) (*ListLayersResponse, error)
	// Create a layer
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	CreateLayer(ctx context.Context, in *CreateLayerRequest, opts ...grpc.CallOption) (*Layer, error)
	// Get a single layer
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	GetLayer(ctx context.Context, in *GetLayerRequest, opts ...grpc.CallOption) (*Layer, error)
	// Update a layer
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	UpdateLayer(ctx context.Context, in *UpdateLayerRequest, opts ...grpc.CallOption) (*Layer, error)
	// Delete a layer
	DeleteLayer(ctx context.Context, in *DeleteLayerRequest, opts ...grpc.CallOption) (*DeleteLayerResponse, error)
	// Batch update
	// buf:lint:ignore RPC_REQUEST_STANDARD_NAME
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	Batch(ctx context.Context, in *BatchLayerRequest, opts ...grpc.CallOption) (*BatchLayerResponse, error)
}

type layerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLayerServiceClient(cc grpc.ClientConnInterface) LayerServiceClient {
	return &layerServiceClient{cc}
}

func (c *layerServiceClient) ListLayers(ctx context.Context, in *ListLayersRequest, opts ...grpc.CallOption) (*ListLayersResponse, error) {
	out := new(ListLayersResponse)
	err := c.cc.Invoke(ctx, LayerService_ListLayers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *layerServiceClient) CreateLayer(ctx context.Context, in *CreateLayerRequest, opts ...grpc.CallOption) (*Layer, error) {
	out := new(Layer)
	err := c.cc.Invoke(ctx, LayerService_CreateLayer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *layerServiceClient) GetLayer(ctx context.Context, in *GetLayerRequest, opts ...grpc.CallOption) (*Layer, error) {
	out := new(Layer)
	err := c.cc.Invoke(ctx, LayerService_GetLayer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *layerServiceClient) UpdateLayer(ctx context.Context, in *UpdateLayerRequest, opts ...grpc.CallOption) (*Layer, error) {
	out := new(Layer)
	err := c.cc.Invoke(ctx, LayerService_UpdateLayer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *layerServiceClient) DeleteLayer(ctx context.Context, in *DeleteLayerRequest, opts ...grpc.CallOption) (*DeleteLayerResponse, error) {
	out := new(DeleteLayerResponse)
	err := c.cc.Invoke(ctx, LayerService_DeleteLayer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *layerServiceClient) Batch(ctx context.Context, in *BatchLayerRequest, opts ...grpc.CallOption) (*BatchLayerResponse, error) {
	out := new(BatchLayerResponse)
	err := c.cc.Invoke(ctx, LayerService_Batch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LayerServiceServer is the server API for LayerService service.
// All implementations should embed UnimplementedLayerServiceServer
// for forward compatibility
type LayerServiceServer interface {
	// List all layers
	ListLayers(context.Context, *ListLayersRequest) (*ListLayersResponse, error)
	// Create a layer
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	CreateLayer(context.Context, *CreateLayerRequest) (*Layer, error)
	// Get a single layer
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	GetLayer(context.Context, *GetLayerRequest) (*Layer, error)
	// Update a layer
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	UpdateLayer(context.Context, *UpdateLayerRequest) (*Layer, error)
	// Delete a layer
	DeleteLayer(context.Context, *DeleteLayerRequest) (*DeleteLayerResponse, error)
	// Batch update
	// buf:lint:ignore RPC_REQUEST_STANDARD_NAME
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	Batch(context.Context, *BatchLayerRequest) (*BatchLayerResponse, error)
}

// UnimplementedLayerServiceServer should be embedded to have forward compatible implementations.
type UnimplementedLayerServiceServer struct {
}

func (UnimplementedLayerServiceServer) ListLayers(context.Context, *ListLayersRequest) (*ListLayersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLayers not implemented")
}
func (UnimplementedLayerServiceServer) CreateLayer(context.Context, *CreateLayerRequest) (*Layer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLayer not implemented")
}
func (UnimplementedLayerServiceServer) GetLayer(context.Context, *GetLayerRequest) (*Layer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLayer not implemented")
}
func (UnimplementedLayerServiceServer) UpdateLayer(context.Context, *UpdateLayerRequest) (*Layer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLayer not implemented")
}
func (UnimplementedLayerServiceServer) DeleteLayer(context.Context, *DeleteLayerRequest) (*DeleteLayerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLayer not implemented")
}
func (UnimplementedLayerServiceServer) Batch(context.Context, *BatchLayerRequest) (*BatchLayerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Batch not implemented")
}

// UnsafeLayerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LayerServiceServer will
// result in compilation errors.
type UnsafeLayerServiceServer interface {
	mustEmbedUnimplementedLayerServiceServer()
}

func RegisterLayerServiceServer(s grpc.ServiceRegistrar, srv LayerServiceServer) {
	s.RegisterService(&LayerService_ServiceDesc, srv)
}

func _LayerService_ListLayers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLayersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LayerServiceServer).ListLayers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LayerService_ListLayers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LayerServiceServer).ListLayers(ctx, req.(*ListLayersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LayerService_CreateLayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LayerServiceServer).CreateLayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LayerService_CreateLayer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LayerServiceServer).CreateLayer(ctx, req.(*CreateLayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LayerService_GetLayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LayerServiceServer).GetLayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LayerService_GetLayer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LayerServiceServer).GetLayer(ctx, req.(*GetLayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LayerService_UpdateLayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LayerServiceServer).UpdateLayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LayerService_UpdateLayer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LayerServiceServer).UpdateLayer(ctx, req.(*UpdateLayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LayerService_DeleteLayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LayerServiceServer).DeleteLayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LayerService_DeleteLayer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LayerServiceServer).DeleteLayer(ctx, req.(*DeleteLayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LayerService_Batch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchLayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LayerServiceServer).Batch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LayerService_Batch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LayerServiceServer).Batch(ctx, req.(*BatchLayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LayerService_ServiceDesc is the grpc.ServiceDesc for LayerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LayerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "apis.layout.v2.LayerService",
	HandlerType: (*LayerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListLayers",
			Handler:    _LayerService_ListLayers_Handler,
		},
		{
			MethodName: "CreateLayer",
			Handler:    _LayerService_CreateLayer_Handler,
		},
		{
			MethodName: "GetLayer",
			Handler:    _LayerService_GetLayer_Handler,
		},
		{
			MethodName: "UpdateLayer",
			Handler:    _LayerService_UpdateLayer_Handler,
		},
		{
			MethodName: "DeleteLayer",
			Handler:    _LayerService_DeleteLayer_Handler,
		},
		{
			MethodName: "Batch",
			Handler:    _LayerService_Batch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apis/layout/v2/api.proto",
}

const (
	LayoutService_ListLayouts_FullMethodName  = "/apis.layout.v2.LayoutService/ListLayouts"
	LayoutService_CreateLayout_FullMethodName = "/apis.layout.v2.LayoutService/CreateLayout"
	LayoutService_GetLayout_FullMethodName    = "/apis.layout.v2.LayoutService/GetLayout"
	LayoutService_UpdateLayout_FullMethodName = "/apis.layout.v2.LayoutService/UpdateLayout"
	LayoutService_DeleteLayout_FullMethodName = "/apis.layout.v2.LayoutService/DeleteLayout"
)

// LayoutServiceClient is the client API for LayoutService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LayoutServiceClient interface {
	// Get all layouts owned by the user.
	ListLayouts(ctx context.Context, in *ListLayoutsRequest, opts ...grpc.CallOption) (*ListLayoutsResponse, error)
	// Create a new layout
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	CreateLayout(ctx context.Context, in *CreateLayoutRequest, opts ...grpc.CallOption) (*Layout, error)
	// Get a layout
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	GetLayout(ctx context.Context, in *GetLayoutRequest, opts ...grpc.CallOption) (*Layout, error)
	// Update a layout
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	UpdateLayout(ctx context.Context, in *UpdateLayoutRequest, opts ...grpc.CallOption) (*Layout, error)
	// Delete a layout
	DeleteLayout(ctx context.Context, in *DeleteLayoutRequest, opts ...grpc.CallOption) (*DeleteLayoutResponse, error)
}

type layoutServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLayoutServiceClient(cc grpc.ClientConnInterface) LayoutServiceClient {
	return &layoutServiceClient{cc}
}

func (c *layoutServiceClient) ListLayouts(ctx context.Context, in *ListLayoutsRequest, opts ...grpc.CallOption) (*ListLayoutsResponse, error) {
	out := new(ListLayoutsResponse)
	err := c.cc.Invoke(ctx, LayoutService_ListLayouts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *layoutServiceClient) CreateLayout(ctx context.Context, in *CreateLayoutRequest, opts ...grpc.CallOption) (*Layout, error) {
	out := new(Layout)
	err := c.cc.Invoke(ctx, LayoutService_CreateLayout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *layoutServiceClient) GetLayout(ctx context.Context, in *GetLayoutRequest, opts ...grpc.CallOption) (*Layout, error) {
	out := new(Layout)
	err := c.cc.Invoke(ctx, LayoutService_GetLayout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *layoutServiceClient) UpdateLayout(ctx context.Context, in *UpdateLayoutRequest, opts ...grpc.CallOption) (*Layout, error) {
	out := new(Layout)
	err := c.cc.Invoke(ctx, LayoutService_UpdateLayout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *layoutServiceClient) DeleteLayout(ctx context.Context, in *DeleteLayoutRequest, opts ...grpc.CallOption) (*DeleteLayoutResponse, error) {
	out := new(DeleteLayoutResponse)
	err := c.cc.Invoke(ctx, LayoutService_DeleteLayout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LayoutServiceServer is the server API for LayoutService service.
// All implementations should embed UnimplementedLayoutServiceServer
// for forward compatibility
type LayoutServiceServer interface {
	// Get all layouts owned by the user.
	ListLayouts(context.Context, *ListLayoutsRequest) (*ListLayoutsResponse, error)
	// Create a new layout
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	CreateLayout(context.Context, *CreateLayoutRequest) (*Layout, error)
	// Get a layout
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	GetLayout(context.Context, *GetLayoutRequest) (*Layout, error)
	// Update a layout
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	UpdateLayout(context.Context, *UpdateLayoutRequest) (*Layout, error)
	// Delete a layout
	DeleteLayout(context.Context, *DeleteLayoutRequest) (*DeleteLayoutResponse, error)
}

// UnimplementedLayoutServiceServer should be embedded to have forward compatible implementations.
type UnimplementedLayoutServiceServer struct {
}

func (UnimplementedLayoutServiceServer) ListLayouts(context.Context, *ListLayoutsRequest) (*ListLayoutsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLayouts not implemented")
}
func (UnimplementedLayoutServiceServer) CreateLayout(context.Context, *CreateLayoutRequest) (*Layout, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLayout not implemented")
}
func (UnimplementedLayoutServiceServer) GetLayout(context.Context, *GetLayoutRequest) (*Layout, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLayout not implemented")
}
func (UnimplementedLayoutServiceServer) UpdateLayout(context.Context, *UpdateLayoutRequest) (*Layout, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLayout not implemented")
}
func (UnimplementedLayoutServiceServer) DeleteLayout(context.Context, *DeleteLayoutRequest) (*DeleteLayoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLayout not implemented")
}

// UnsafeLayoutServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LayoutServiceServer will
// result in compilation errors.
type UnsafeLayoutServiceServer interface {
	mustEmbedUnimplementedLayoutServiceServer()
}

func RegisterLayoutServiceServer(s grpc.ServiceRegistrar, srv LayoutServiceServer) {
	s.RegisterService(&LayoutService_ServiceDesc, srv)
}

func _LayoutService_ListLayouts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLayoutsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LayoutServiceServer).ListLayouts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LayoutService_ListLayouts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LayoutServiceServer).ListLayouts(ctx, req.(*ListLayoutsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LayoutService_CreateLayout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLayoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LayoutServiceServer).CreateLayout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LayoutService_CreateLayout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LayoutServiceServer).CreateLayout(ctx, req.(*CreateLayoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LayoutService_GetLayout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLayoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LayoutServiceServer).GetLayout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LayoutService_GetLayout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LayoutServiceServer).GetLayout(ctx, req.(*GetLayoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LayoutService_UpdateLayout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLayoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LayoutServiceServer).UpdateLayout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LayoutService_UpdateLayout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LayoutServiceServer).UpdateLayout(ctx, req.(*UpdateLayoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LayoutService_DeleteLayout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLayoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LayoutServiceServer).DeleteLayout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LayoutService_DeleteLayout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LayoutServiceServer).DeleteLayout(ctx, req.(*DeleteLayoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LayoutService_ServiceDesc is the grpc.ServiceDesc for LayoutService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LayoutService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "apis.layout.v2.LayoutService",
	HandlerType: (*LayoutServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListLayouts",
			Handler:    _LayoutService_ListLayouts_Handler,
		},
		{
			MethodName: "CreateLayout",
			Handler:    _LayoutService_CreateLayout_Handler,
		},
		{
			MethodName: "GetLayout",
			Handler:    _LayoutService_GetLayout_Handler,
		},
		{
			MethodName: "UpdateLayout",
			Handler:    _LayoutService_UpdateLayout_Handler,
		},
		{
			MethodName: "DeleteLayout",
			Handler:    _LayoutService_DeleteLayout_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apis/layout/v2/api.proto",
}
