/*
---------------------------------------------------------------------------------------------
Copyright (c) Infiniscene, Inc. All rights reserved.
Licensed under the MIT License. See License.txt in the project root for license information.
---------------------------------------------------------------------------------------------
*/
// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        (unknown)
// source: apis/layout/v2/api.proto

package layoutv2

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The type of layout, specifying how it functions.
type LayoutType int32

const (
	LayoutType_LAYOUT_TYPE_UNSPECIFIED LayoutType = 0
	// A layout managed by Studio Kit
	LayoutType_LAYOUT_TYPE_SCENELESS LayoutType = 1
	// A layout managed via the layout API for use with our scene-based renderer.
	LayoutType_LAYOUT_TYPE_SCENE LayoutType = 2
)

// Enum value maps for LayoutType.
var (
	LayoutType_name = map[int32]string{
		0: "LAYOUT_TYPE_UNSPECIFIED",
		1: "LAYOUT_TYPE_SCENELESS",
		2: "LAYOUT_TYPE_SCENE",
	}
	LayoutType_value = map[string]int32{
		"LAYOUT_TYPE_UNSPECIFIED": 0,
		"LAYOUT_TYPE_SCENELESS":   1,
		"LAYOUT_TYPE_SCENE":       2,
	}
)

func (x LayoutType) Enum() *LayoutType {
	p := new(LayoutType)
	*p = x
	return p
}

func (x LayoutType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LayoutType) Descriptor() protoreflect.EnumDescriptor {
	return file_apis_layout_v2_api_proto_enumTypes[0].Descriptor()
}

func (LayoutType) Type() protoreflect.EnumType {
	return &file_apis_layout_v2_api_proto_enumTypes[0]
}

func (x LayoutType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LayoutType.Descriptor instead.
func (LayoutType) EnumDescriptor() ([]byte, []int) {
	return file_apis_layout_v2_api_proto_rawDescGZIP(), []int{0}
}

// Define how to apply animations in a batch request.
type RequestAnimationMode int32

const (
	RequestAnimationMode_REQUEST_ANIMATION_MODE_UNSPECIFIED RequestAnimationMode = 0
	// All animations in the batch will be applied at once.
	RequestAnimationMode_REQUEST_ANIMATION_MODE_PARALLEL RequestAnimationMode = 1
	// Each layer update will appy after all animations on the previous layer(s) have completed.
	RequestAnimationMode_REQUEST_ANIMATION_MODE_SERIES RequestAnimationMode = 2
)

// Enum value maps for RequestAnimationMode.
var (
	RequestAnimationMode_name = map[int32]string{
		0: "REQUEST_ANIMATION_MODE_UNSPECIFIED",
		1: "REQUEST_ANIMATION_MODE_PARALLEL",
		2: "REQUEST_ANIMATION_MODE_SERIES",
	}
	RequestAnimationMode_value = map[string]int32{
		"REQUEST_ANIMATION_MODE_UNSPECIFIED": 0,
		"REQUEST_ANIMATION_MODE_PARALLEL":    1,
		"REQUEST_ANIMATION_MODE_SERIES":      2,
	}
)

func (x RequestAnimationMode) Enum() *RequestAnimationMode {
	p := new(RequestAnimationMode)
	*p = x
	return p
}

func (x RequestAnimationMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RequestAnimationMode) Descriptor() protoreflect.EnumDescriptor {
	return file_apis_layout_v2_api_proto_enumTypes[1].Descriptor()
}

func (RequestAnimationMode) Type() protoreflect.EnumType {
	return &file_apis_layout_v2_api_proto_enumTypes[1]
}

func (x RequestAnimationMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RequestAnimationMode.Descriptor instead.
func (RequestAnimationMode) EnumDescriptor() ([]byte, []int) {
	return file_apis_layout_v2_api_proto_rawDescGZIP(), []int{1}
}

type EventSubType int32

const (
	EventSubType_EVENT_SUB_TYPE_UNSPECIFIED EventSubType = 0
	EventSubType_EVENT_SUB_TYPE_CREATE      EventSubType = 1
	EventSubType_EVENT_SUB_TYPE_UPDATE      EventSubType = 2
	EventSubType_EVENT_SUB_TYPE_DELETE      EventSubType = 3
	EventSubType_EVENT_SUB_TYPE_BATCH       EventSubType = 4
)

// Enum value maps for EventSubType.
var (
	EventSubType_name = map[int32]string{
		0: "EVENT_SUB_TYPE_UNSPECIFIED",
		1: "EVENT_SUB_TYPE_CREATE",
		2: "EVENT_SUB_TYPE_UPDATE",
		3: "EVENT_SUB_TYPE_DELETE",
		4: "EVENT_SUB_TYPE_BATCH",
	}
	EventSubType_value = map[string]int32{
		"EVENT_SUB_TYPE_UNSPECIFIED": 0,
		"EVENT_SUB_TYPE_CREATE":      1,
		"EVENT_SUB_TYPE_UPDATE":      2,
		"EVENT_SUB_TYPE_DELETE":      3,
		"EVENT_SUB_TYPE_BATCH":       4,
	}
)

func (x EventSubType) Enum() *EventSubType {
	p := new(EventSubType)
	*p = x
	return p
}

func (x EventSubType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventSubType) Descriptor() protoreflect.EnumDescriptor {
	return file_apis_layout_v2_api_proto_enumTypes[2].Descriptor()
}

func (EventSubType) Type() protoreflect.EnumType {
	return &file_apis_layout_v2_api_proto_enumTypes[2]
}

func (x EventSubType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventSubType.Descriptor instead.
func (EventSubType) EnumDescriptor() ([]byte, []int) {
	return file_apis_layout_v2_api_proto_rawDescGZIP(), []int{2}
}

type EventType int32

const (
	EventType_EVENT_TYPE_UNSPECIFIED EventType = 0
	EventType_EVENT_TYPE_LAYOUT      EventType = 1
	EventType_EVENT_TYPE_LAYER       EventType = 2
)

// Enum value maps for EventType.
var (
	EventType_name = map[int32]string{
		0: "EVENT_TYPE_UNSPECIFIED",
		1: "EVENT_TYPE_LAYOUT",
		2: "EVENT_TYPE_LAYER",
	}
	EventType_value = map[string]int32{
		"EVENT_TYPE_UNSPECIFIED": 0,
		"EVENT_TYPE_LAYOUT":      1,
		"EVENT_TYPE_LAYER":       2,
	}
)

func (x EventType) Enum() *EventType {
	p := new(EventType)
	*p = x
	return p
}

func (x EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_apis_layout_v2_api_proto_enumTypes[3].Descriptor()
}

func (EventType) Type() protoreflect.EnumType {
	return &file_apis_layout_v2_api_proto_enumTypes[3]
}

func (x EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventType.Descriptor instead.
func (EventType) EnumDescriptor() ([]byte, []int) {
	return file_apis_layout_v2_api_proto_rawDescGZIP(), []int{3}
}

// Direction for the animation to display in.
type Transition_TransitionDirection int32

const (
	Transition_TRANSITION_DIRECTION_UNSPECIFIED Transition_TransitionDirection = 0
	Transition_TRANSITION_DIRECTION_LEFT        Transition_TransitionDirection = 1
	Transition_TRANSITION_DIRECTION_RIGHT       Transition_TransitionDirection = 2
	Transition_TRANSITION_DIRECTION_UP          Transition_TransitionDirection = 3
	Transition_TRANSITION_DIRECTION_DOWN        Transition_TransitionDirection = 4
)

// Enum value maps for Transition_TransitionDirection.
var (
	Transition_TransitionDirection_name = map[int32]string{
		0: "TRANSITION_DIRECTION_UNSPECIFIED",
		1: "TRANSITION_DIRECTION_LEFT",
		2: "TRANSITION_DIRECTION_RIGHT",
		3: "TRANSITION_DIRECTION_UP",
		4: "TRANSITION_DIRECTION_DOWN",
	}
	Transition_TransitionDirection_value = map[string]int32{
		"TRANSITION_DIRECTION_UNSPECIFIED": 0,
		"TRANSITION_DIRECTION_LEFT":        1,
		"TRANSITION_DIRECTION_RIGHT":       2,
		"TRANSITION_DIRECTION_UP":          3,
		"TRANSITION_DIRECTION_DOWN":        4,
	}
)

func (x Transition_TransitionDirection) Enum() *Transition_TransitionDirection {
	p := new(Transition_TransitionDirection)
	*p = x
	return p
}

func (x Transition_TransitionDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Transition_TransitionDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_apis_layout_v2_api_proto_enumTypes[4].Descriptor()
}

func (Transition_TransitionDirection) Type() protoreflect.EnumType {
	return &file_apis_layout_v2_api_proto_enumTypes[4]
}

func (x Transition_TransitionDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Transition_TransitionDirection.Descriptor instead.
func (Transition_TransitionDirection) EnumDescriptor() ([]byte, []int) {
	return file_apis_layout_v2_api_proto_rawDescGZIP(), []int{0, 0}
}

type Transition_TransitionSwipeType int32

const (
	// Both layouts are animated together
	Transition_TRANSITION_SWIPE_TYPE_UNSPECIFIED Transition_TransitionSwipeType = 0
	// Both layouts are animated together
	Transition_TRANSITION_SWIPE_TYPE_COMBINED Transition_TransitionSwipeType = 1
	// The source animation is moved out of the way
	Transition_TRANSITION_SWIPE_TYPE_SOURCE Transition_TransitionSwipeType = 2
	// The destination layout is overlaid
	Transition_TRANSITION_SWIPE_TYPE_DESTINATION Transition_TransitionSwipeType = 3
)

// Enum value maps for Transition_TransitionSwipeType.
var (
	Transition_TransitionSwipeType_name = map[int32]string{
		0: "TRANSITION_SWIPE_TYPE_UNSPECIFIED",
		1: "TRANSITION_SWIPE_TYPE_COMBINED",
		2: "TRANSITION_SWIPE_TYPE_SOURCE",
		3: "TRANSITION_SWIPE_TYPE_DESTINATION",
	}
	Transition_TransitionSwipeType_value = map[string]int32{
		"TRANSITION_SWIPE_TYPE_UNSPECIFIED": 0,
		"TRANSITION_SWIPE_TYPE_COMBINED":    1,
		"TRANSITION_SWIPE_TYPE_SOURCE":      2,
		"TRANSITION_SWIPE_TYPE_DESTINATION": 3,
	}
)

func (x Transition_TransitionSwipeType) Enum() *Transition_TransitionSwipeType {
	p := new(Transition_TransitionSwipeType)
	*p = x
	return p
}

func (x Transition_TransitionSwipeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Transition_TransitionSwipeType) Descriptor() protoreflect.EnumDescriptor {
	return file_apis_layout_v2_api_proto_enumTypes[5].Descriptor()
}

func (Transition_TransitionSwipeType) Type() protoreflect.EnumType {
	return &file_apis_layout_v2_api_proto_enumTypes[5]
}

func (x Transition_TransitionSwipeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Transition_TransitionSwipeType.Descriptor instead.
func (Transition_TransitionSwipeType) EnumDescriptor() ([]byte, []int) {
	return file_apis_layout_v2_api_proto_rawDescGZIP(), []int{0, 1}
}

// Transition defines a transition into this layout.
type Transition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of layout IDs to apply this transition to. If empty,
	// this transition will apply to all scene switches which _do not_ have a matching transition.
	// If multiple transitions match (e.g multiple targetting the layout), a transition will be chosen at random.
	FromLayoutIds []string `protobuf:"bytes,1,rep,name=from_layout_ids,json=fromLayoutIds,proto3" json:"from_layout_ids,omitempty"`
	// The type of transition to play.
	//
	// Types that are assignable to TransitionType:
	//
	//	*Transition_Cut
	//	*Transition_Crossfade
	//	*Transition_FadeToColor
	//	*Transition_Swipe
	//	*Transition_Stinger
	TransitionType isTransition_TransitionType `protobuf_oneof:"transition_type"`
}

func (x *Transition) Reset() {
	*x = Transition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_layout_v2_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transition) ProtoMessage() {}

func (x *Transition) ProtoReflect() protoreflect.Message {
	mi := &file_apis_layout_v2_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transition.ProtoReflect.Descriptor instead.
func (*Transition) Descriptor() ([]byte, []int) {
	return file_apis_layout_v2_api_proto_rawDescGZIP(), []int{0}
}

func (x *Transition) GetFromLayoutIds() []string {
	if x != nil {
		return x.FromLayoutIds
	}
	return nil
}

func (m *Transition) GetTransitionType() isTransition_TransitionType {
	if m != nil {
		return m.TransitionType
	}
	return nil
}

func (x *Transition) GetCut() *Transition_TransitionCut {
	if x, ok := x.GetTransitionType().(*Transition_Cut); ok {
		return x.Cut
	}
	return nil
}

func (x *Transition) GetCrossfade() *Transition_TransitionCrossfade {
	if x, ok := x.GetTransitionType().(*Transition_Crossfade); ok {
		return x.Crossfade
	}
	return nil
}

func (x *Transition) GetFadeToColor() *Transition_TransitionFadeToColor {
	if x, ok := x.GetTransitionType().(*Transition_FadeToColor); ok {
		return x.FadeToColor
	}
	return nil
}

func (x *Transition) GetSwipe() *Transition_TransitionSwipe {
	if x, ok := x.GetTransitionType().(*Transition_Swipe); ok {
		return x.Swipe
	}
	return nil
}

func (x *Transition) GetStinger() *Transition_TransitionStinger {
	if x, ok := x.GetTransitionType().(*Transition_Stinger); ok {
		return x.Stinger
	}
	return nil
}

type isTransition_TransitionType interface {
	isTransition_TransitionType()
}

type Transition_Cut struct {
	Cut *Transition_TransitionCut `protobuf:"bytes,10,opt,name=cut,proto3,oneof"`
}

type Transition_Crossfade struct {
	Crossfade *Transition_TransitionCrossfade `protobuf:"bytes,11,opt,name=crossfade,proto3,oneof"`
}

type Transition_FadeToColor struct {
	FadeToColor *Transition_TransitionFadeToColor `protobuf:"bytes,12,opt,name=fade_to_color,json=fadeToColor,proto3,oneof"`
}

type Transition_Swipe struct {
	Swipe *Transition_TransitionSwipe `protobuf:"bytes,13,opt,name=swipe,proto3,oneof"`
}

type Transition_Stinger struct {
	Stinger *Transition_TransitionStinger `protobuf:"bytes,14,opt,name=stinger,proto3,oneof"`
}

func (*Transition_Cut) isTransition_TransitionType() {}

func (*Transition_Crossfade) isTransition_TransitionType() {}

func (*Transition_FadeToColor) isTransition_TransitionType() {}

func (*Transition_Swipe) isTransition_TransitionType() {}

func (*Transition_Stinger) isTransition_TransitionType() {}

// A Layout represents a container for multiple layers.
type Layout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// internal ID for the layout
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// width of the layout in pixels
	Width int32 `protobuf:"varint,2,opt,name=width,proto3" json:"width,omitempty"`
	// height of the layout in pixels
	Height int32 `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
	// Custom metadata for the layout. This is freeform.
	Metadata     *structpb.Value `protobuf:"bytes,6,opt,name=metadata,proto3,oneof" json:"metadata,omitempty"`
	ProjectId    *string         `protobuf:"bytes,7,opt,name=project_id,json=projectId,proto3,oneof" json:"project_id,omitempty"`
	CollectionId *string         `protobuf:"bytes,8,opt,name=collection_id,json=collectionId,proto3,oneof" json:"collection_id,omitempty"`
	Type         *LayoutType     `protobuf:"varint,9,opt,name=type,proto3,enum=apis.layout.v2.LayoutType,oneof" json:"type,omitempty"`
	// Transitions to apply when switching to this scene from another
	// note: this is only available for layouts of type `LAYOUT_TYPE_SCENE`.
	Transitions []*Transition `protobuf:"bytes,10,rep,name=transitions,proto3" json:"transitions,omitempty"`
	// Metadata sent with the request
	RequestMetadata *structpb.Value `protobuf:"bytes,101,opt,name=request_metadata,json=requestMetadata,proto3,oneof" json:"request_metadata,omitempty"`
}

func (x *Layout) Reset() {
	*x = Layout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_layout_v2_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Layout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Layout) ProtoMessage() {}

func (x *Layout) ProtoReflect() protoreflect.Message {
	mi := &file_apis_layout_v2_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Layout.ProtoReflect.Descriptor instead.
func (*Layout) Descriptor() ([]byte, []int) {
	return file_apis_layout_v2_api_proto_rawDescGZIP(), []int{1}
}

func (x *Layout) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Layout) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *Layout) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *Layout) GetMetadata() *structpb.Value {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Layout) GetProjectId() string {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return ""
}

func (x *Layout) GetCollectionId() string {
	if x != nil && x.CollectionId != nil {
		return *x.CollectionId
	}
	return ""
}

func (x *Layout) GetType() LayoutType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return LayoutType_LAYOUT_TYPE_UNSPECIFIED
}

func (x *Layout) GetTransitions() []*Transition {
	if x != nil {
		return x.Transitions
	}
	return nil
}

func (x *Layout) GetRequestMetadata() *structpb.Value {
	if x != nil {
		return x.RequestMetadata
	}
	return nil
}

// The Layer represents a single item within a layout.
type Layer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the type of layer we're interacting with: e.g alert, banner
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Custom value for the layer. This is freeform.
	Data *structpb.Struct `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	// x position in pixels. This can be null if the layer has no absolute position.
	X *structpb.Value `protobuf:"bytes,3,opt,name=x,proto3" json:"x,omitempty"`
	// y position in pixels. Can be null if the layer has no absolute position.
	Y *structpb.Value `protobuf:"bytes,4,opt,name=y,proto3" json:"y,omitempty"`
	// width in pixels of the layer. can be null if the layer is dynamically sizable.
	Width *structpb.Value `protobuf:"bytes,5,opt,name=width,proto3" json:"width,omitempty"`
	// height in pixels of the layer. can be null if the layer is dynamically sizable.
	Height *structpb.Value `protobuf:"bytes,6,opt,name=height,proto3" json:"height,omitempty"`
	// rotation of layer in degrees of the layer.
	Rotation float64 `protobuf:"fixed64,7,opt,name=rotation,proto3" json:"rotation,omitempty"`
	// opacity of the layer. This is the same as the CSS value, 0 being transparent and 1 being opaque.
	Opacity float64 `protobuf:"fixed64,8,opt,name=opacity,proto3" json:"opacity,omitempty"`
	// Scale of the layer. This is expontential, with 1 equaling the normal size of the layer.
	// note: width/height will be affected.
	Scale float64 `protobuf:"fixed64,9,opt,name=scale,proto3" json:"scale,omitempty"`
	// whether the layer should be rendered.
	Hidden bool `protobuf:"varint,10,opt,name=hidden,proto3" json:"hidden,omitempty"`
	// children of the layer.
	Children *structpb.ListValue `protobuf:"bytes,12,opt,name=children,proto3" json:"children,omitempty"`
	// Custom metadata for the layer. This is freeform.
	Metadata *structpb.Value `protobuf:"bytes,14,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// id of the layer
	Id string `protobuf:"bytes,100,opt,name=id,proto3" json:"id,omitempty"`
	// the layout this layer is associated with.
	LayoutId string `protobuf:"bytes,102,opt,name=layout_id,json=layoutId,proto3" json:"layout_id,omitempty"`
	// Metadata sent with the request
	RequestMetadata *structpb.Value `protobuf:"bytes,101,opt,name=request_metadata,json=requestMetadata,proto3,oneof" json:"request_metadata,omitempty"`
	// Animation information for the layer which should be applied on update.
	RequestAnimation []*LayerAnimation `protobuf:"bytes,103,rep,name=request_animation,json=requestAnimation,proto3" json:"request_animation,omitempty"`
}

func (x *Layer) Reset() {
	*x = Layer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_layout_v2_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Layer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Layer) ProtoMessage() {}

func (x *Layer) ProtoReflect() protoreflect.Message {
	mi := &file_apis_layout_v2_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Layer.ProtoReflect.Descriptor instead.
func (*Layer) Descriptor() ([]byte, []int) {
	return file_apis_layout_v2_api_proto_rawDescGZIP(), []int{2}
}

func (x *Layer) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Layer) GetData() *structpb.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Layer) GetX() *structpb.Value {
	if x != nil {
		return x.X
	}
	return nil
}

func (x *Layer) GetY() *structpb.Value {
	if x != nil {
		return x.Y
	}
	return nil
}

func (x *Layer) GetWidth() *structpb.Value {
	if x != nil {
		return x.Width
	}
	return nil
}

func (x *Layer) GetHeight() *structpb.Value {
	if x != nil {
		return x.Height
	}
	return nil
}

func (x *Layer) GetRotation() float64 {
	if x != nil {
		return x.Rotation
	}
	return 0
}

func (x *Layer) GetOpacity() float64 {
	if x != nil {
		return x.Opacity
	}
	return 0
}

func (x *Layer) GetScale() float64 {
	if x != nil {
		return x.Scale
	}
	return 0
}

func (x *Layer) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

func (x *Layer) GetChildren() *structpb.ListValue {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *Layer) GetMetadata() *structpb.Value {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Layer) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Layer) GetLayoutId() string {
	if x != nil {
		return x.LayoutId
	}
	return ""
}

func (x *Layer) GetRequestMetadata() *structpb.Value {
	if x != nil {
		return x.RequestMetadata
	}
	return nil
}

func (x *Layer) GetRequestAnimation() []*LayerAnimation {
	if x != nil {
		return x.RequestAnimation
	}
	return nil
}

// Request to delete a specific layer.
type DeleteLayerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the id of the Layout
	LayoutId string `protobuf:"bytes,1,opt,name=layout_id,json=layoutId,proto3" json:"layout_id,omitempty"`
	// the id of the Layer
	LayerId string `protobuf:"bytes,2,opt,name=layer_id,json=layerId,proto3" json:"layer_id,omitempty"`
	// Metadata associated with the deletion of a layer
	Payload *DeleteLayerPayload `protobuf:"bytes,3,opt,name=payload,proto3,oneof" json:"payload,omitempty"`
}

func (x *DeleteLayerRequest) Reset() {
	*x = DeleteLayerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_layout_v2_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteLayerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteLayerRequest) ProtoMessage() {}

func (x *DeleteLayerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apis_layout_v2_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteLayerRequest.ProtoReflect.Descriptor instead.
func (*DeleteLayerRequest) Descriptor() ([]byte, []int) {
	return file_apis_layout_v2_api_proto_rawDescGZIP(), []int{3}
}

func (x *DeleteLayerRequest) GetLayoutId() string {
	if x != nil {
		return x.LayoutId
	}
	return ""
}

func (x *DeleteLayerRequest) GetLayerId() string {
	if x != nil {
		return x.LayerId
	}
	return ""
}

func (x *DeleteLayerRequest) GetPayload() *DeleteLayerPayload {
	if x != nil {
		return x.Payload
	}
	return nil
}

type DeleteLayerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The layer id that was deleted
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The layout this layer belongs to.
	LayoutId string `protobuf:"bytes,2,opt,name=layout_id,json=layoutId,proto3" json:"layout_id,omitempty"`
	// Optional request metadata sent with the delete request
	RequestMetadata *structpb.Value `protobuf:"bytes,100,opt,name=request_metadata,json=requestMetadata,proto3,oneof" json:"request_metadata,omitempty"`
}

func (x *DeleteLayerResponse) Reset() {
	*x = DeleteLayerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_layout_v2_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteLayerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteLayerResponse) ProtoMessage() {}

func (x *DeleteLayerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apis_layout_v2_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteLayerResponse.ProtoReflect.Descriptor instead.
func (*DeleteLayerResponse) Descriptor() ([]byte, []int) {
	return file_apis_layout_v2_api_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteLayerResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeleteLayerResponse) GetLayoutId() string {
	if x != nil {
		return x.LayoutId
	}
	return ""
}

func (x *DeleteLayerResponse) GetRequestMetadata() *structpb.Value {
	if x != nil {
		return x.RequestMetadata
	}
	return nil
}

// A batch update for layers within a layout, indicating creation, removal and updates to layers.
type BatchLayerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of responses
	Layers []*BatchLayerResponse_BatchLayerItem `protobuf:"bytes,2,rep,name=layers,proto3" json:"layers,omitempty"`
	// The layout this batch update belongs to.
	LayoutId string `protobuf:"bytes,3,opt,name=layout_id,json=layoutId,proto3" json:"layout_id,omitempty"`
	// Metadata sent with the request
	RequestMetadata *structpb.Value `protobuf:"bytes,100,opt,name=request_metadata,json=requestMetadata,proto3,oneof" json:"request_metadata,omitempty"`
	// Order in which layer animations are applied in the batch.
	RequestAnimationMode RequestAnimationMode `protobuf:"varint,101,opt,name=request_animation_mode,json=requestAnimationMode,proto3,enum=apis.layout.v2.RequestAnimationMode" json:"request_animation_mode,omitempty"`
}

func (x *BatchLayerResponse) Reset() {
	*x = BatchLayerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_layout_v2_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchLayerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchLayerResponse) ProtoMessage() {}

func (x *BatchLayerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apis_layout_v2_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchLayerResponse.ProtoReflect.Descriptor instead.
func (*BatchLayerResponse) Descriptor() ([]byte, []int) {
	return file_apis_layout_v2_api_proto_rawDescGZIP(), []int{5}
}

func (x *BatchLayerResponse) GetLayers() []*BatchLayerResponse_BatchLayerItem {
	if x != nil {
		return x.Layers
	}
	return nil
}

func (x *BatchLayerResponse) GetLayoutId() string {
	if x != nil {
		return x.LayoutId
	}
	return ""
}

func (x *BatchLayerResponse) GetRequestMetadata() *structpb.Value {
	if x != nil {
		return x.RequestMetadata
	}
	return nil
}

func (x *BatchLayerResponse) GetRequestAnimationMode() RequestAnimationMode {
	if x != nil {
		return x.RequestAnimationMode
	}
	return RequestAnimationMode_REQUEST_ANIMATION_MODE_UNSPECIFIED
}

// Partial layout
type PartialLayout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// width of the layer in pixels
	Width *int32 `protobuf:"varint,2,opt,name=width,proto3,oneof" json:"width,omitempty"`
	// height of the layer in pixels
	Height *int32 `protobuf:"varint,3,opt,name=height,proto3,oneof" json:"height,omitempty"`
	// Metadata associated with a layout. This is freeform JSON.
	Metadata *structpb.Value `protobuf:"bytes,6,opt,name=metadata,proto3,oneof" json:"metadata,omitempty"`
	// Project ID from the Live API for the layout
	// note: this cannot be changed for existing layouts.
	ProjectId *string `protobuf:"bytes,7,opt,name=project_id,json=projectId,proto3,oneof" json:"project_id,omitempty"`
	// Collection ID from the Live API for the layout
	// note: this cannot be changed once set.
	CollectionId *string `protobuf:"bytes,8,opt,name=collection_id,json=collectionId,proto3,oneof" json:"collection_id,omitempty"`
	// The type of layout to use.
	// Typically you should use LAYOUT_TYPE_SCENE to manage layouts via the API. This automatically
	// creates a "root" layer for all layers to be under.
	// LAYOUT_TYPE_SCENELESS is used for layouts managed by the Studio SDK.
	Type *LayoutType `protobuf:"varint,9,opt,name=type,proto3,enum=apis.layout.v2.LayoutType,oneof" json:"type,omitempty"`
	// Transitions to apply when switching to this scene from another
	// note: this is only available for layouts of type `LAYOUT_TYPE_SCENE`.
	Transitions []*Transition `protobuf:"bytes,10,rep,name=transitions,proto3" json:"transitions,omitempty"`
	// Metadata associated with the publishing of the event
	RequestMetadata *structpb.Value `protobuf:"bytes,101,opt,name=request_metadata,json=requestMetadata,proto3,oneof" json:"request_metadata,omitempty"`
}

func (x *PartialLayout) Reset() {
	*x = PartialLayout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_layout_v2_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartialLayout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartialLayout) ProtoMessage() {}

func (x *PartialLayout) ProtoReflect() protoreflect.Message {
	mi := &file_apis_layout_v2_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartialLayout.ProtoReflect.Descriptor instead.
func (*PartialLayout) Descriptor() ([]byte, []int) {
	return file_apis_layout_v2_api_proto_rawDescGZIP(), []int{6}
}

func (x *PartialLayout) GetWidth() int32 {
	if x != nil && x.Width != nil {
		return *x.Width
	}
	return 0
}

func (x *PartialLayout) GetHeight() int32 {
	if x != nil && x.Height != nil {
		return *x.Height
	}
	return 0
}

func (x *PartialLayout) GetMetadata() *structpb.Value {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *PartialLayout) GetProjectId() string {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return ""
}

func (x *PartialLayout) GetCollectionId() string {
	if x != nil && x.CollectionId != nil {
		return *x.CollectionId
	}
	return ""
}

func (x *PartialLayout) GetType() LayoutType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return LayoutType_LAYOUT_TYPE_UNSPECIFIED
}

func (x *PartialLayout) GetTransitions() []*Transition {
	if x != nil {
		return x.Transitions
	}
	return nil
}

func (x *PartialLayout) GetRequestMetadata() *structpb.Value {
	if x != nil {
		return x.RequestMetadata
	}
	return nil
}

// Filter options for listing layouts. Each request
// parameter will filter the response down (AND)
type ListLayoutsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId    *string     `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3,oneof" json:"project_id,omitempty"`
	CollectionId *string     `protobuf:"bytes,2,opt,name=collection_id,json=collectionId,proto3,oneof" json:"collection_id,omitempty"`
	Type         *LayoutType `protobuf:"varint,3,opt,name=type,proto3,enum=apis.layout.v2.LayoutType,oneof" json:"type,omitempty"`
}

func (x *ListLayoutsRequest) Reset() {
	*x = ListLayoutsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_layout_v2_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLayoutsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLayoutsRequest) ProtoMessage() {}

func (x *ListLayoutsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apis_layout_v2_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLayoutsRequest.ProtoReflect.Descriptor instead.
func (*ListLayoutsRequest) Descriptor() ([]byte, []int) {
	return file_apis_layout_v2_api_proto_rawDescGZIP(), []int{7}
}

func (x *ListLayoutsRequest) GetProjectId() string {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return ""
}

func (x *ListLayoutsRequest) GetCollectionId() string {
	if x != nil && x.CollectionId != nil {
		return *x.CollectionId
	}
	return ""
}

func (x *ListLayoutsRequest) GetType() LayoutType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return LayoutType_LAYOUT_TYPE_UNSPECIFIED
}

type ListLayoutsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// All layouts returned.
	Layouts []*Layout `protobuf:"bytes,1,rep,name=layouts,proto3" json:"layouts,omitempty"`
}

func (x *ListLayoutsResponse) Reset() {
	*x = ListLayoutsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_layout_v2_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLayoutsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLayoutsResponse) ProtoMessage() {}

func (x *ListLayoutsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apis_layout_v2_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLayoutsResponse.ProtoReflect.Descriptor instead.
func (*ListLayoutsResponse) Descriptor() ([]byte, []int) {
	return file_apis_layout_v2_api_proto_rawDescGZIP(), []int{8}
}

func (x *ListLayoutsResponse) GetLayouts() []*Layout {
	if x != nil {
		return x.Layouts
	}
	return nil
}

type CreateLayoutRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// layout to create
	Layout *PartialLayout `protobuf:"bytes,2,opt,name=layout,proto3" json:"layout,omitempty"`
}

func (x *CreateLayoutRequest) Reset() {
	*x = CreateLayoutRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_layout_v2_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateLayoutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLayoutRequest) ProtoMessage() {}

func (x *CreateLayoutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apis_layout_v2_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLayoutRequest.ProtoReflect.Descriptor instead.
func (*CreateLayoutRequest) Descriptor() ([]byte, []int) {
	return file_apis_layout_v2_api_proto_rawDescGZIP(), []int{9}
}

func (x *CreateLayoutRequest) GetLayout() *PartialLayout {
	if x != nil {
		return x.Layout
	}
	return nil
}

type GetLayoutRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the id of the Layout
	LayoutId string `protobuf:"bytes,1,opt,name=layout_id,json=layoutId,proto3" json:"layout_id,omitempty"`
}

func (x *GetLayoutRequest) Reset() {
	*x = GetLayoutRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_layout_v2_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLayoutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLayoutRequest) ProtoMessage() {}

func (x *GetLayoutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apis_layout_v2_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLayoutRequest.ProtoReflect.Descriptor instead.
func (*GetLayoutRequest) Descriptor() ([]byte, []int) {
	return file_apis_layout_v2_api_proto_rawDescGZIP(), []int{10}
}

func (x *GetLayoutRequest) GetLayoutId() string {
	if x != nil {
		return x.LayoutId
	}
	return ""
}

type UpdateLayoutRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the id of the Layout
	LayoutId string `protobuf:"bytes,1,opt,name=layout_id,json=layoutId,proto3" json:"layout_id,omitempty"`
	// layout data to update with.
	Layout *PartialLayout `protobuf:"bytes,3,opt,name=layout,proto3" json:"layout,omitempty"`
}

func (x *UpdateLayoutRequest) Reset() {
	*x = UpdateLayoutRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_layout_v2_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateLayoutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLayoutRequest) ProtoMessage() {}

func (x *UpdateLayoutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apis_layout_v2_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLayoutRequest.ProtoReflect.Descriptor instead.
func (*UpdateLayoutRequest) Descriptor() ([]byte, []int) {
	return file_apis_layout_v2_api_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateLayoutRequest) GetLayoutId() string {
	if x != nil {
		return x.LayoutId
	}
	return ""
}

func (x *UpdateLayoutRequest) GetLayout() *PartialLayout {
	if x != nil {
		return x.Layout
	}
	return nil
}

type DeleteLayoutPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Metadata associated with the deletion of the layout
	RequestMetadata *structpb.Value `protobuf:"bytes,100,opt,name=request_metadata,json=requestMetadata,proto3,oneof" json:"request_metadata,omitempty"`
}

func (x *DeleteLayoutPayload) Reset() {
	*x = DeleteLayoutPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_layout_v2_api_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteLayoutPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteLayoutPayload) ProtoMessage() {}

func (x *DeleteLayoutPayload) ProtoReflect() protoreflect.Message {
	mi := &file_apis_layout_v2_api_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteLayoutPayload.ProtoReflect.Descriptor instead.
func (*DeleteLayoutPayload) Descriptor() ([]byte, []int) {
	return file_apis_layout_v2_api_proto_rawDescGZIP(), []int{12}
}

func (x *DeleteLayoutPayload) GetRequestMetadata() *structpb.Value {
	if x != nil {
		return x.RequestMetadata
	}
	return nil
}

// Request to delete a specific layout.
type DeleteLayoutRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the id of the Layout
	LayoutId string `protobuf:"bytes,1,opt,name=layout_id,json=layoutId,proto3" json:"layout_id,omitempty"`
	// Metadata associated with the deletion of a layout
	Payload *DeleteLayoutPayload `protobuf:"bytes,2,opt,name=payload,proto3,oneof" json:"payload,omitempty"`
}

func (x *DeleteLayoutRequest) Reset() {
	*x = DeleteLayoutRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_layout_v2_api_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteLayoutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteLayoutRequest) ProtoMessage() {}

func (x *DeleteLayoutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apis_layout_v2_api_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteLayoutRequest.ProtoReflect.Descriptor instead.
func (*DeleteLayoutRequest) Descriptor() ([]byte, []int) {
	return file_apis_layout_v2_api_proto_rawDescGZIP(), []int{13}
}

func (x *DeleteLayoutRequest) GetLayoutId() string {
	if x != nil {
		return x.LayoutId
	}
	return ""
}

func (x *DeleteLayoutRequest) GetPayload() *DeleteLayoutPayload {
	if x != nil {
		return x.Payload
	}
	return nil
}

type DeleteLayoutResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the layout deleted
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata associated with the deletion of a layout
	RequestMetadata *structpb.Value `protobuf:"bytes,100,opt,name=request_metadata,json=requestMetadata,proto3,oneof" json:"request_metadata,omitempty"`
}

func (x *DeleteLayoutResponse) Reset() {
	*x = DeleteLayoutResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_layout_v2_api_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteLayoutResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteLayoutResponse) ProtoMessage() {}

func (x *DeleteLayoutResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apis_layout_v2_api_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteLayoutResponse.ProtoReflect.Descriptor instead.
func (*DeleteLayoutResponse) Descriptor() ([]byte, []int) {
	return file_apis_layout_v2_api_proto_rawDescGZIP(), []int{14}
}

func (x *DeleteLayoutResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeleteLayoutResponse) GetRequestMetadata() *structpb.Value {
	if x != nil {
		return x.RequestMetadata
	}
	return nil
}

// Represents how we should apply the action, transitioning from the current state to the new state.
// If multiple LayerAnimation's are defined, the final LayerAnimation will be used that has a matching property!
//
// note: this is currently only supported where layout type is "scene".
type LayerAnimation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The properties to animate on. Currently x, y, width, height, opacity and scale are supported. "*" can be used to target all properties.
	Properties []string `protobuf:"bytes,1,rep,name=properties,proto3" json:"properties,omitempty"`
	// The duration to transition over in milliseconds
	DurationMs int32 `protobuf:"varint,2,opt,name=duration_ms,json=durationMs,proto3" json:"duration_ms,omitempty"`
	// A delay to offset the animation by.
	DelayMs *int32 `protobuf:"varint,4,opt,name=delay_ms,json=delayMs,proto3,oneof" json:"delay_ms,omitempty"`
	// The easing mode for the transition.
	// This value can be anything supported as an easing function: https://developer.mozilla.org/en-US/docs/Web/CSS/easing-function
	EasingMode *string `protobuf:"bytes,5,opt,name=easing_mode,json=easingMode,proto3,oneof" json:"easing_mode,omitempty"`
}

func (x *LayerAnimation) Reset() {
	*x = LayerAnimation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_layout_v2_api_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LayerAnimation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LayerAnimation) ProtoMessage() {}

func (x *LayerAnimation) ProtoReflect() protoreflect.Message {
	mi := &file_apis_layout_v2_api_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LayerAnimation.ProtoReflect.Descriptor instead.
func (*LayerAnimation) Descriptor() ([]byte, []int) {
	return file_apis_layout_v2_api_proto_rawDescGZIP(), []int{15}
}

func (x *LayerAnimation) GetProperties() []string {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *LayerAnimation) GetDurationMs() int32 {
	if x != nil {
		return x.DurationMs
	}
	return 0
}

func (x *LayerAnimation) GetDelayMs() int32 {
	if x != nil && x.DelayMs != nil {
		return *x.DelayMs
	}
	return 0
}

func (x *LayerAnimation) GetEasingMode() string {
	if x != nil && x.EasingMode != nil {
		return *x.EasingMode
	}
	return ""
}

// Partial Layer for creating and updating.
type PartialLayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the type of layer we're interacting with: e.g alert, banner
	Type *string `protobuf:"bytes,1,opt,name=type,proto3,oneof" json:"type,omitempty"`
	// Custom value for the layer. This is freeform.
	Data *structpb.Struct `protobuf:"bytes,2,opt,name=data,proto3,oneof" json:"data,omitempty"`
	// x position in pixels. This can be null if the layer has no absolute position.
	X *structpb.Value `protobuf:"bytes,3,opt,name=x,proto3" json:"x,omitempty"`
	// y position in pixels. Can be null if the layer has no absolute position.
	Y *structpb.Value `protobuf:"bytes,4,opt,name=y,proto3" json:"y,omitempty"`
	// width in pixels of the layer. can be null if the layer is dynamically sizable.
	Width *structpb.Value `protobuf:"bytes,5,opt,name=width,proto3" json:"width,omitempty"`
	// height in pixels of the layer. can be null if the layer is dynamically sizable.
	Height *structpb.Value `protobuf:"bytes,6,opt,name=height,proto3" json:"height,omitempty"`
	// rotation of layer in degrees of the layer.
	Rotation *float64 `protobuf:"fixed64,7,opt,name=rotation,proto3,oneof" json:"rotation,omitempty"`
	// opacity of the layer. This is the same as the CSS value, 0 being transparent and 1 being opaque.
	Opacity *float64 `protobuf:"fixed64,8,opt,name=opacity,proto3,oneof" json:"opacity,omitempty"`
	// Scale of the layer. This is expontential, with 1 equaling the normal size of the layer.
	// note: width/height will be affected.
	Scale *float64 `protobuf:"fixed64,9,opt,name=scale,proto3,oneof" json:"scale,omitempty"`
	// whether the layer should be rendered.
	Hidden *bool `protobuf:"varint,10,opt,name=hidden,proto3,oneof" json:"hidden,omitempty"`
	// children of the layer.
	Children *structpb.ListValue `protobuf:"bytes,12,opt,name=children,proto3,oneof" json:"children,omitempty"`
	// parent layer to asssign to.
	ParentId *string         `protobuf:"bytes,13,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	Metadata *structpb.Value `protobuf:"bytes,14,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Metadata sent with the request
	RequestMetadata *structpb.Value `protobuf:"bytes,100,opt,name=request_metadata,json=requestMetadata,proto3,oneof" json:"request_metadata,omitempty"`
	// Animation information for the layer.
	RequestAnimation []*LayerAnimation `protobuf:"bytes,103,rep,name=request_animation,json=requestAnimation,proto3" json:"request_animation,omitempty"`
}

func (x *PartialLayer) Reset() {
	*x = PartialLayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_layout_v2_api_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartialLayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartialLayer) ProtoMessage() {}

func (x *PartialLayer) ProtoReflect() protoreflect.Message {
	mi := &file_apis_layout_v2_api_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartialLayer.ProtoReflect.Descriptor instead.
func (*PartialLayer) Descriptor() ([]byte, []int) {
	return file_apis_layout_v2_api_proto_rawDescGZIP(), []int{16}
}

func (x *PartialLayer) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *PartialLayer) GetData() *structpb.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *PartialLayer) GetX() *structpb.Value {
	if x != nil {
		return x.X
	}
	return nil
}

func (x *PartialLayer) GetY() *structpb.Value {
	if x != nil {
		return x.Y
	}
	return nil
}

func (x *PartialLayer) GetWidth() *structpb.Value {
	if x != nil {
		return x.Width
	}
	return nil
}

func (x *PartialLayer) GetHeight() *structpb.Value {
	if x != nil {
		return x.Height
	}
	return nil
}

func (x *PartialLayer) GetRotation() float64 {
	if x != nil && x.Rotation != nil {
		return *x.Rotation
	}
	return 0
}

func (x *PartialLayer) GetOpacity() float64 {
	if x != nil && x.Opacity != nil {
		return *x.Opacity
	}
	return 0
}

func (x *PartialLayer) GetScale() float64 {
	if x != nil && x.Scale != nil {
		return *x.Scale
	}
	return 0
}

func (x *PartialLayer) GetHidden() bool {
	if x != nil && x.Hidden != nil {
		return *x.Hidden
	}
	return false
}

func (x *PartialLayer) GetChildren() *structpb.ListValue {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *PartialLayer) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *PartialLayer) GetMetadata() *structpb.Value {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *PartialLayer) GetRequestMetadata() *structpb.Value {
	if x != nil {
		return x.RequestMetadata
	}
	return nil
}

func (x *PartialLayer) GetRequestAnimation() []*LayerAnimation {
	if x != nil {
		return x.RequestAnimation
	}
	return nil
}

// Partial Layer for updating.
type PartialLayerWithID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the layer.
	Id string `protobuf:"bytes,1000,opt,name=id,proto3" json:"id,omitempty"`
	// the type of layer we're interacting with: e.g alert, banner
	Type *string `protobuf:"bytes,1,opt,name=type,proto3,oneof" json:"type,omitempty"`
	// Custom value for the layer. This is freeform.
	Data *structpb.Struct `protobuf:"bytes,2,opt,name=data,proto3,oneof" json:"data,omitempty"`
	// x position in pixels. This can be null if the layer has no absolute position.
	X *structpb.Value `protobuf:"bytes,3,opt,name=x,proto3" json:"x,omitempty"`
	// y position in pixels. Can be null if the layer has no absolute position.
	Y *structpb.Value `protobuf:"bytes,4,opt,name=y,proto3" json:"y,omitempty"`
	// width in pixels of the layer. can be null if the layer is dynamically sizable.
	Width *structpb.Value `protobuf:"bytes,5,opt,name=width,proto3" json:"width,omitempty"`
	// height in pixels of the layer. can be null if the layer is dynamically sizable.
	Height *structpb.Value `protobuf:"bytes,6,opt,name=height,proto3" json:"height,omitempty"`
	// rotation of layer in degrees of the layer.
	Rotation *float64 `protobuf:"fixed64,7,opt,name=rotation,proto3,oneof" json:"rotation,omitempty"`
	// opacity of the layer. This is the same as the CSS value, 0 being transparent and 1 being opaque.
	Opacity *float64 `protobuf:"fixed64,8,opt,name=opacity,proto3,oneof" json:"opacity,omitempty"`
	// Scale of the layer. This is expontential, with 1 equaling the normal size of the layer.
	// note: width/height will be affected.
	Scale *float64 `protobuf:"fixed64,9,opt,name=scale,proto3,oneof" json:"scale,omitempty"`
	// whether the layer should be rendered.
	Hidden *bool `protobuf:"varint,10,opt,name=hidden,proto3,oneof" json:"hidden,omitempty"`
	// children of the layer.
	Children *structpb.ListValue `protobuf:"bytes,12,opt,name=children,proto3,oneof" json:"children,omitempty"`
	// parent layer to asssign to.
	ParentId *string         `protobuf:"bytes,13,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	Metadata *structpb.Value `protobuf:"bytes,14,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Metadata sent with the request
	RequestMetadata *structpb.Value `protobuf:"bytes,100,opt,name=request_metadata,json=requestMetadata,proto3,oneof" json:"request_metadata,omitempty"`
	// Animation information for the layer.
	RequestAnimation []*LayerAnimation `protobuf:"bytes,103,rep,name=request_animation,json=requestAnimation,proto3" json:"request_animation,omitempty"`
}

func (x *PartialLayerWithID) Reset() {
	*x = PartialLayerWithID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_layout_v2_api_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartialLayerWithID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartialLayerWithID) ProtoMessage() {}

func (x *PartialLayerWithID) ProtoReflect() protoreflect.Message {
	mi := &file_apis_layout_v2_api_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartialLayerWithID.ProtoReflect.Descriptor instead.
func (*PartialLayerWithID) Descriptor() ([]byte, []int) {
	return file_apis_layout_v2_api_proto_rawDescGZIP(), []int{17}
}

func (x *PartialLayerWithID) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PartialLayerWithID) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *PartialLayerWithID) GetData() *structpb.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *PartialLayerWithID) GetX() *structpb.Value {
	if x != nil {
		return x.X
	}
	return nil
}

func (x *PartialLayerWithID) GetY() *structpb.Value {
	if x != nil {
		return x.Y
	}
	return nil
}

func (x *PartialLayerWithID) GetWidth() *structpb.Value {
	if x != nil {
		return x.Width
	}
	return nil
}

func (x *PartialLayerWithID) GetHeight() *structpb.Value {
	if x != nil {
		return x.Height
	}
	return nil
}

func (x *PartialLayerWithID) GetRotation() float64 {
	if x != nil && x.Rotation != nil {
		return *x.Rotation
	}
	return 0
}

func (x *PartialLayerWithID) GetOpacity() float64 {
	if x != nil && x.Opacity != nil {
		return *x.Opacity
	}
	return 0
}

func (x *PartialLayerWithID) GetScale() float64 {
	if x != nil && x.Scale != nil {
		return *x.Scale
	}
	return 0
}

func (x *PartialLayerWithID) GetHidden() bool {
	if x != nil && x.Hidden != nil {
		return *x.Hidden
	}
	return false
}

func (x *PartialLayerWithID) GetChildren() *structpb.ListValue {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *PartialLayerWithID) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *PartialLayerWithID) GetMetadata() *structpb.Value {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *PartialLayerWithID) GetRequestMetadata() *structpb.Value {
	if x != nil {
		return x.RequestMetadata
	}
	return nil
}

func (x *PartialLayerWithID) GetRequestAnimation() []*LayerAnimation {
	if x != nil {
		return x.RequestAnimation
	}
	return nil
}

type ListLayersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the id of the Layout
	LayoutId string `protobuf:"bytes,1,opt,name=layout_id,json=layoutId,proto3" json:"layout_id,omitempty"`
}

func (x *ListLayersRequest) Reset() {
	*x = ListLayersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_layout_v2_api_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLayersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLayersRequest) ProtoMessage() {}

func (x *ListLayersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apis_layout_v2_api_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLayersRequest.ProtoReflect.Descriptor instead.
func (*ListLayersRequest) Descriptor() ([]byte, []int) {
	return file_apis_layout_v2_api_proto_rawDescGZIP(), []int{18}
}

func (x *ListLayersRequest) GetLayoutId() string {
	if x != nil {
		return x.LayoutId
	}
	return ""
}

type ListLayersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// list of all layers
	Layers []*Layer `protobuf:"bytes,1,rep,name=layers,proto3" json:"layers,omitempty"`
}

func (x *ListLayersResponse) Reset() {
	*x = ListLayersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_layout_v2_api_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLayersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLayersResponse) ProtoMessage() {}

func (x *ListLayersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apis_layout_v2_api_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLayersResponse.ProtoReflect.Descriptor instead.
func (*ListLayersResponse) Descriptor() ([]byte, []int) {
	return file_apis_layout_v2_api_proto_rawDescGZIP(), []int{19}
}

func (x *ListLayersResponse) GetLayers() []*Layer {
	if x != nil {
		return x.Layers
	}
	return nil
}

type CreateLayerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the id of the Layout
	LayoutId string `protobuf:"bytes,1,opt,name=layout_id,json=layoutId,proto3" json:"layout_id,omitempty"`
	// layer to create - all fields have defaults except type.
	Layer *PartialLayer `protobuf:"bytes,2,opt,name=layer,proto3" json:"layer,omitempty"`
}

func (x *CreateLayerRequest) Reset() {
	*x = CreateLayerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_layout_v2_api_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateLayerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLayerRequest) ProtoMessage() {}

func (x *CreateLayerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apis_layout_v2_api_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLayerRequest.ProtoReflect.Descriptor instead.
func (*CreateLayerRequest) Descriptor() ([]byte, []int) {
	return file_apis_layout_v2_api_proto_rawDescGZIP(), []int{20}
}

func (x *CreateLayerRequest) GetLayoutId() string {
	if x != nil {
		return x.LayoutId
	}
	return ""
}

func (x *CreateLayerRequest) GetLayer() *PartialLayer {
	if x != nil {
		return x.Layer
	}
	return nil
}

type GetLayerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the id of the Layout
	LayoutId string `protobuf:"bytes,1,opt,name=layout_id,json=layoutId,proto3" json:"layout_id,omitempty"`
	// the id of the Layer
	LayerId string `protobuf:"bytes,2,opt,name=layer_id,json=layerId,proto3" json:"layer_id,omitempty"`
}

func (x *GetLayerRequest) Reset() {
	*x = GetLayerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_layout_v2_api_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLayerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLayerRequest) ProtoMessage() {}

func (x *GetLayerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apis_layout_v2_api_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLayerRequest.ProtoReflect.Descriptor instead.
func (*GetLayerRequest) Descriptor() ([]byte, []int) {
	return file_apis_layout_v2_api_proto_rawDescGZIP(), []int{21}
}

func (x *GetLayerRequest) GetLayoutId() string {
	if x != nil {
		return x.LayoutId
	}
	return ""
}

func (x *GetLayerRequest) GetLayerId() string {
	if x != nil {
		return x.LayerId
	}
	return ""
}

type UpdateLayerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the id of the Layout
	LayoutId string `protobuf:"bytes,1,opt,name=layout_id,json=layoutId,proto3" json:"layout_id,omitempty"`
	// the id of the Layer
	LayerId string `protobuf:"bytes,2,opt,name=layer_id,json=layerId,proto3" json:"layer_id,omitempty"`
	// layer data to update with.
	Layer *PartialLayer `protobuf:"bytes,3,opt,name=layer,proto3" json:"layer,omitempty"`
}

func (x *UpdateLayerRequest) Reset() {
	*x = UpdateLayerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_layout_v2_api_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateLayerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLayerRequest) ProtoMessage() {}

func (x *UpdateLayerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apis_layout_v2_api_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLayerRequest.ProtoReflect.Descriptor instead.
func (*UpdateLayerRequest) Descriptor() ([]byte, []int) {
	return file_apis_layout_v2_api_proto_rawDescGZIP(), []int{22}
}

func (x *UpdateLayerRequest) GetLayoutId() string {
	if x != nil {
		return x.LayoutId
	}
	return ""
}

func (x *UpdateLayerRequest) GetLayerId() string {
	if x != nil {
		return x.LayerId
	}
	return ""
}

func (x *UpdateLayerRequest) GetLayer() *PartialLayer {
	if x != nil {
		return x.Layer
	}
	return nil
}

type DeleteLayerPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Metadata associated with the deletion of a layer
	RequestMetadata *structpb.Value `protobuf:"bytes,100,opt,name=request_metadata,json=requestMetadata,proto3,oneof" json:"request_metadata,omitempty"`
}

func (x *DeleteLayerPayload) Reset() {
	*x = DeleteLayerPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_layout_v2_api_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteLayerPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteLayerPayload) ProtoMessage() {}

func (x *DeleteLayerPayload) ProtoReflect() protoreflect.Message {
	mi := &file_apis_layout_v2_api_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteLayerPayload.ProtoReflect.Descriptor instead.
func (*DeleteLayerPayload) Descriptor() ([]byte, []int) {
	return file_apis_layout_v2_api_proto_rawDescGZIP(), []int{23}
}

func (x *DeleteLayerPayload) GetRequestMetadata() *structpb.Value {
	if x != nil {
		return x.RequestMetadata
	}
	return nil
}

type BatchDeleteLayerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the layer deleted.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata associated with the deletion of a layer
	RequestMetadata *structpb.Value `protobuf:"bytes,100,opt,name=request_metadata,json=requestMetadata,proto3,oneof" json:"request_metadata,omitempty"`
}

func (x *BatchDeleteLayerRequest) Reset() {
	*x = BatchDeleteLayerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_layout_v2_api_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchDeleteLayerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchDeleteLayerRequest) ProtoMessage() {}

func (x *BatchDeleteLayerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apis_layout_v2_api_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchDeleteLayerRequest.ProtoReflect.Descriptor instead.
func (*BatchDeleteLayerRequest) Descriptor() ([]byte, []int) {
	return file_apis_layout_v2_api_proto_rawDescGZIP(), []int{24}
}

func (x *BatchDeleteLayerRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BatchDeleteLayerRequest) GetRequestMetadata() *structpb.Value {
	if x != nil {
		return x.RequestMetadata
	}
	return nil
}

// Batch request to modify a layout.
type BatchLayerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The layout all requests interact with.
	LayoutId string `protobuf:"bytes,1,opt,name=layout_id,json=layoutId,proto3" json:"layout_id,omitempty"`
	// List of layers to update
	Layers []*BatchLayerRequest_BatchItem `protobuf:"bytes,2,rep,name=layers,proto3" json:"layers,omitempty"`
	// Metadata sent with the request
	RequestMetadata *structpb.Value `protobuf:"bytes,100,opt,name=request_metadata,json=requestMetadata,proto3,oneof" json:"request_metadata,omitempty"`
	// Order in which layer animations are applied in the batch.
	RequestAnimationMode *RequestAnimationMode `protobuf:"varint,101,opt,name=request_animation_mode,json=requestAnimationMode,proto3,enum=apis.layout.v2.RequestAnimationMode,oneof" json:"request_animation_mode,omitempty"`
}

func (x *BatchLayerRequest) Reset() {
	*x = BatchLayerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_layout_v2_api_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchLayerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchLayerRequest) ProtoMessage() {}

func (x *BatchLayerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apis_layout_v2_api_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchLayerRequest.ProtoReflect.Descriptor instead.
func (*BatchLayerRequest) Descriptor() ([]byte, []int) {
	return file_apis_layout_v2_api_proto_rawDescGZIP(), []int{25}
}

func (x *BatchLayerRequest) GetLayoutId() string {
	if x != nil {
		return x.LayoutId
	}
	return ""
}

func (x *BatchLayerRequest) GetLayers() []*BatchLayerRequest_BatchItem {
	if x != nil {
		return x.Layers
	}
	return nil
}

func (x *BatchLayerRequest) GetRequestMetadata() *structpb.Value {
	if x != nil {
		return x.RequestMetadata
	}
	return nil
}

func (x *BatchLayerRequest) GetRequestAnimationMode() RequestAnimationMode {
	if x != nil && x.RequestAnimationMode != nil {
		return *x.RequestAnimationMode
	}
	return RequestAnimationMode_REQUEST_ANIMATION_MODE_UNSPECIFIED
}

type LayoutEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*LayoutEvent_Create
	//	*LayoutEvent_Update
	//	*LayoutEvent_Delete
	Type isLayoutEvent_Type `protobuf_oneof:"type"`
}

func (x *LayoutEvent) Reset() {
	*x = LayoutEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_layout_v2_api_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LayoutEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LayoutEvent) ProtoMessage() {}

func (x *LayoutEvent) ProtoReflect() protoreflect.Message {
	mi := &file_apis_layout_v2_api_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LayoutEvent.ProtoReflect.Descriptor instead.
func (*LayoutEvent) Descriptor() ([]byte, []int) {
	return file_apis_layout_v2_api_proto_rawDescGZIP(), []int{26}
}

func (m *LayoutEvent) GetType() isLayoutEvent_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *LayoutEvent) GetCreate() *Layout {
	if x, ok := x.GetType().(*LayoutEvent_Create); ok {
		return x.Create
	}
	return nil
}

func (x *LayoutEvent) GetUpdate() *Layout {
	if x, ok := x.GetType().(*LayoutEvent_Update); ok {
		return x.Update
	}
	return nil
}

func (x *LayoutEvent) GetDelete() *DeleteLayoutResponse {
	if x, ok := x.GetType().(*LayoutEvent_Delete); ok {
		return x.Delete
	}
	return nil
}

type isLayoutEvent_Type interface {
	isLayoutEvent_Type()
}

type LayoutEvent_Create struct {
	// New layout created
	Create *Layout `protobuf:"bytes,1,opt,name=create,proto3,oneof"`
}

type LayoutEvent_Update struct {
	// Existing layout updated
	Update *Layout `protobuf:"bytes,2,opt,name=update,proto3,oneof"`
}

type LayoutEvent_Delete struct {
	// Existing layout destroyed
	Delete *DeleteLayoutResponse `protobuf:"bytes,3,opt,name=delete,proto3,oneof"`
}

func (*LayoutEvent_Create) isLayoutEvent_Type() {}

func (*LayoutEvent_Update) isLayoutEvent_Type() {}

func (*LayoutEvent_Delete) isLayoutEvent_Type() {}

type LayerEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*LayerEvent_Create
	//	*LayerEvent_Update
	//	*LayerEvent_Delete
	//	*LayerEvent_Batch
	Type isLayerEvent_Type `protobuf_oneof:"type"`
}

func (x *LayerEvent) Reset() {
	*x = LayerEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_layout_v2_api_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LayerEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LayerEvent) ProtoMessage() {}

func (x *LayerEvent) ProtoReflect() protoreflect.Message {
	mi := &file_apis_layout_v2_api_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LayerEvent.ProtoReflect.Descriptor instead.
func (*LayerEvent) Descriptor() ([]byte, []int) {
	return file_apis_layout_v2_api_proto_rawDescGZIP(), []int{27}
}

func (m *LayerEvent) GetType() isLayerEvent_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *LayerEvent) GetCreate() *Layer {
	if x, ok := x.GetType().(*LayerEvent_Create); ok {
		return x.Create
	}
	return nil
}

func (x *LayerEvent) GetUpdate() *Layer {
	if x, ok := x.GetType().(*LayerEvent_Update); ok {
		return x.Update
	}
	return nil
}

func (x *LayerEvent) GetDelete() *DeleteLayerResponse {
	if x, ok := x.GetType().(*LayerEvent_Delete); ok {
		return x.Delete
	}
	return nil
}

func (x *LayerEvent) GetBatch() *BatchLayerResponse {
	if x, ok := x.GetType().(*LayerEvent_Batch); ok {
		return x.Batch
	}
	return nil
}

type isLayerEvent_Type interface {
	isLayerEvent_Type()
}

type LayerEvent_Create struct {
	// New layer added
	Create *Layer `protobuf:"bytes,1,opt,name=create,proto3,oneof"`
}

type LayerEvent_Update struct {
	// Existing layer updated
	Update *Layer `protobuf:"bytes,2,opt,name=update,proto3,oneof"`
}

type LayerEvent_Delete struct {
	// Existing layer destroyed
	Delete *DeleteLayerResponse `protobuf:"bytes,3,opt,name=delete,proto3,oneof"`
}

type LayerEvent_Batch struct {
	// Batch events
	Batch *BatchLayerResponse `protobuf:"bytes,4,opt,name=batch,proto3,oneof"`
}

func (*LayerEvent_Create) isLayerEvent_Type() {}

func (*LayerEvent_Update) isLayerEvent_Type() {}

func (*LayerEvent_Delete) isLayerEvent_Type() {}

func (*LayerEvent_Batch) isLayerEvent_Type() {}

// Event structure for an event sent from the layout
// api via the event api
type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*Event_Layout
	//	*Event_Layer
	Type isEvent_Type `protobuf_oneof:"type"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_layout_v2_api_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_apis_layout_v2_api_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_apis_layout_v2_api_proto_rawDescGZIP(), []int{28}
}

func (m *Event) GetType() isEvent_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *Event) GetLayout() *LayoutEvent {
	if x, ok := x.GetType().(*Event_Layout); ok {
		return x.Layout
	}
	return nil
}

func (x *Event) GetLayer() *LayerEvent {
	if x, ok := x.GetType().(*Event_Layer); ok {
		return x.Layer
	}
	return nil
}

type isEvent_Type interface {
	isEvent_Type()
}

type Event_Layout struct {
	Layout *LayoutEvent `protobuf:"bytes,1,opt,name=layout,proto3,oneof"`
}

type Event_Layer struct {
	Layer *LayerEvent `protobuf:"bytes,2,opt,name=layer,proto3,oneof"`
}

func (*Event_Layout) isEvent_Type() {}

func (*Event_Layer) isEvent_Type() {}

// Media definition
type Transition_TransitionMediaType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// External URL to the media content.
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// Volume to play the media at between 0 and 1.
	Volume float64 `protobuf:"fixed64,2,opt,name=volume,proto3" json:"volume,omitempty"`
}

func (x *Transition_TransitionMediaType) Reset() {
	*x = Transition_TransitionMediaType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_layout_v2_api_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transition_TransitionMediaType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transition_TransitionMediaType) ProtoMessage() {}

func (x *Transition_TransitionMediaType) ProtoReflect() protoreflect.Message {
	mi := &file_apis_layout_v2_api_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transition_TransitionMediaType.ProtoReflect.Descriptor instead.
func (*Transition_TransitionMediaType) Descriptor() ([]byte, []int) {
	return file_apis_layout_v2_api_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Transition_TransitionMediaType) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Transition_TransitionMediaType) GetVolume() float64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

// Transition: a simple scene switch. this is the default transition.
type Transition_TransitionCut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Transition_TransitionCut) Reset() {
	*x = Transition_TransitionCut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_layout_v2_api_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transition_TransitionCut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transition_TransitionCut) ProtoMessage() {}

func (x *Transition_TransitionCut) ProtoReflect() protoreflect.Message {
	mi := &file_apis_layout_v2_api_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transition_TransitionCut.ProtoReflect.Descriptor instead.
func (*Transition_TransitionCut) Descriptor() ([]byte, []int) {
	return file_apis_layout_v2_api_proto_rawDescGZIP(), []int{0, 1}
}

// Transition: Fade to a color before transitioning to another layout.
type Transition_TransitionFadeToColor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The duration to animate over. The fade to color will take half this duration.
	DurationMs int32 `protobuf:"varint,1,opt,name=duration_ms,json=durationMs,proto3" json:"duration_ms,omitempty"`
	// A CSS-compatible background color.
	BackgroundColor string `protobuf:"bytes,2,opt,name=background_color,json=backgroundColor,proto3" json:"background_color,omitempty"`
}

func (x *Transition_TransitionFadeToColor) Reset() {
	*x = Transition_TransitionFadeToColor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_layout_v2_api_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transition_TransitionFadeToColor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transition_TransitionFadeToColor) ProtoMessage() {}

func (x *Transition_TransitionFadeToColor) ProtoReflect() protoreflect.Message {
	mi := &file_apis_layout_v2_api_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transition_TransitionFadeToColor.ProtoReflect.Descriptor instead.
func (*Transition_TransitionFadeToColor) Descriptor() ([]byte, []int) {
	return file_apis_layout_v2_api_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Transition_TransitionFadeToColor) GetDurationMs() int32 {
	if x != nil {
		return x.DurationMs
	}
	return 0
}

func (x *Transition_TransitionFadeToColor) GetBackgroundColor() string {
	if x != nil {
		return x.BackgroundColor
	}
	return ""
}

// Transition: crossfade between two layouts.
type Transition_TransitionCrossfade struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The duration to animate over.
	DurationMs int32 `protobuf:"varint,1,opt,name=duration_ms,json=durationMs,proto3" json:"duration_ms,omitempty"`
}

func (x *Transition_TransitionCrossfade) Reset() {
	*x = Transition_TransitionCrossfade{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_layout_v2_api_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transition_TransitionCrossfade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transition_TransitionCrossfade) ProtoMessage() {}

func (x *Transition_TransitionCrossfade) ProtoReflect() protoreflect.Message {
	mi := &file_apis_layout_v2_api_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transition_TransitionCrossfade.ProtoReflect.Descriptor instead.
func (*Transition_TransitionCrossfade) Descriptor() ([]byte, []int) {
	return file_apis_layout_v2_api_proto_rawDescGZIP(), []int{0, 3}
}

func (x *Transition_TransitionCrossfade) GetDurationMs() int32 {
	if x != nil {
		return x.DurationMs
	}
	return 0
}

// Transition: Animation where layouts are slide over another.
type Transition_TransitionSwipe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The duration to animate over.
	DurationMs int32 `protobuf:"varint,1,opt,name=duration_ms,json=durationMs,proto3" json:"duration_ms,omitempty"`
	// The direction to swipe the layer from.
	Direction Transition_TransitionDirection `protobuf:"varint,2,opt,name=direction,proto3,enum=apis.layout.v2.Transition_TransitionDirection" json:"direction,omitempty"`
	// How to animate the slide.
	CombinedAnimation Transition_TransitionSwipeType `protobuf:"varint,3,opt,name=combined_animation,json=combinedAnimation,proto3,enum=apis.layout.v2.Transition_TransitionSwipeType" json:"combined_animation,omitempty"`
}

func (x *Transition_TransitionSwipe) Reset() {
	*x = Transition_TransitionSwipe{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_layout_v2_api_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transition_TransitionSwipe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transition_TransitionSwipe) ProtoMessage() {}

func (x *Transition_TransitionSwipe) ProtoReflect() protoreflect.Message {
	mi := &file_apis_layout_v2_api_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transition_TransitionSwipe.ProtoReflect.Descriptor instead.
func (*Transition_TransitionSwipe) Descriptor() ([]byte, []int) {
	return file_apis_layout_v2_api_proto_rawDescGZIP(), []int{0, 4}
}

func (x *Transition_TransitionSwipe) GetDurationMs() int32 {
	if x != nil {
		return x.DurationMs
	}
	return 0
}

func (x *Transition_TransitionSwipe) GetDirection() Transition_TransitionDirection {
	if x != nil {
		return x.Direction
	}
	return Transition_TRANSITION_DIRECTION_UNSPECIFIED
}

func (x *Transition_TransitionSwipe) GetCombinedAnimation() Transition_TransitionSwipeType {
	if x != nil {
		return x.CombinedAnimation
	}
	return Transition_TRANSITION_SWIPE_TYPE_UNSPECIFIED
}

// Stinger where the layout is cut over at a specific point.
type Transition_TransitionStingerCut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The duration from the start of the media playing at which the layout should change.
	// this should be a point where the entire screen is filled.
	CutPointMs int32 `protobuf:"varint,1,opt,name=cut_point_ms,json=cutPointMs,proto3" json:"cut_point_ms,omitempty"`
	// The remote media to play as the stinger.
	Media *Transition_TransitionMediaType `protobuf:"bytes,2,opt,name=media,proto3" json:"media,omitempty"`
}

func (x *Transition_TransitionStingerCut) Reset() {
	*x = Transition_TransitionStingerCut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_layout_v2_api_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transition_TransitionStingerCut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transition_TransitionStingerCut) ProtoMessage() {}

func (x *Transition_TransitionStingerCut) ProtoReflect() protoreflect.Message {
	mi := &file_apis_layout_v2_api_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transition_TransitionStingerCut.ProtoReflect.Descriptor instead.
func (*Transition_TransitionStingerCut) Descriptor() ([]byte, []int) {
	return file_apis_layout_v2_api_proto_rawDescGZIP(), []int{0, 5}
}

func (x *Transition_TransitionStingerCut) GetCutPointMs() int32 {
	if x != nil {
		return x.CutPointMs
	}
	return 0
}

func (x *Transition_TransitionStingerCut) GetMedia() *Transition_TransitionMediaType {
	if x != nil {
		return x.Media
	}
	return nil
}

// Transition: stinger animation.
type Transition_TransitionStinger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to StingerType:
	//
	//	*Transition_TransitionStinger_Cut
	StingerType isTransition_TransitionStinger_StingerType `protobuf_oneof:"stinger_type"`
}

func (x *Transition_TransitionStinger) Reset() {
	*x = Transition_TransitionStinger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_layout_v2_api_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transition_TransitionStinger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transition_TransitionStinger) ProtoMessage() {}

func (x *Transition_TransitionStinger) ProtoReflect() protoreflect.Message {
	mi := &file_apis_layout_v2_api_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transition_TransitionStinger.ProtoReflect.Descriptor instead.
func (*Transition_TransitionStinger) Descriptor() ([]byte, []int) {
	return file_apis_layout_v2_api_proto_rawDescGZIP(), []int{0, 6}
}

func (m *Transition_TransitionStinger) GetStingerType() isTransition_TransitionStinger_StingerType {
	if m != nil {
		return m.StingerType
	}
	return nil
}

func (x *Transition_TransitionStinger) GetCut() *Transition_TransitionStingerCut {
	if x, ok := x.GetStingerType().(*Transition_TransitionStinger_Cut); ok {
		return x.Cut
	}
	return nil
}

type isTransition_TransitionStinger_StingerType interface {
	isTransition_TransitionStinger_StingerType()
}

type Transition_TransitionStinger_Cut struct {
	Cut *Transition_TransitionStingerCut `protobuf:"bytes,1,opt,name=cut,proto3,oneof"`
}

func (*Transition_TransitionStinger_Cut) isTransition_TransitionStinger_StingerType() {}

// Thee result of interacting with that layer.
type BatchLayerResponse_BatchLayerItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Action:
	//
	//	*BatchLayerResponse_BatchLayerItem_Create
	//	*BatchLayerResponse_BatchLayerItem_Update
	//	*BatchLayerResponse_BatchLayerItem_Delete
	Action isBatchLayerResponse_BatchLayerItem_Action `protobuf_oneof:"action"`
}

func (x *BatchLayerResponse_BatchLayerItem) Reset() {
	*x = BatchLayerResponse_BatchLayerItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_layout_v2_api_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchLayerResponse_BatchLayerItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchLayerResponse_BatchLayerItem) ProtoMessage() {}

func (x *BatchLayerResponse_BatchLayerItem) ProtoReflect() protoreflect.Message {
	mi := &file_apis_layout_v2_api_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchLayerResponse_BatchLayerItem.ProtoReflect.Descriptor instead.
func (*BatchLayerResponse_BatchLayerItem) Descriptor() ([]byte, []int) {
	return file_apis_layout_v2_api_proto_rawDescGZIP(), []int{5, 0}
}

func (m *BatchLayerResponse_BatchLayerItem) GetAction() isBatchLayerResponse_BatchLayerItem_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (x *BatchLayerResponse_BatchLayerItem) GetCreate() *Layer {
	if x, ok := x.GetAction().(*BatchLayerResponse_BatchLayerItem_Create); ok {
		return x.Create
	}
	return nil
}

func (x *BatchLayerResponse_BatchLayerItem) GetUpdate() *Layer {
	if x, ok := x.GetAction().(*BatchLayerResponse_BatchLayerItem_Update); ok {
		return x.Update
	}
	return nil
}

func (x *BatchLayerResponse_BatchLayerItem) GetDelete() *DeleteLayerResponse {
	if x, ok := x.GetAction().(*BatchLayerResponse_BatchLayerItem_Delete); ok {
		return x.Delete
	}
	return nil
}

type isBatchLayerResponse_BatchLayerItem_Action interface {
	isBatchLayerResponse_BatchLayerItem_Action()
}

type BatchLayerResponse_BatchLayerItem_Create struct {
	Create *Layer `protobuf:"bytes,1,opt,name=create,proto3,oneof"`
}

type BatchLayerResponse_BatchLayerItem_Update struct {
	Update *Layer `protobuf:"bytes,2,opt,name=update,proto3,oneof"`
}

type BatchLayerResponse_BatchLayerItem_Delete struct {
	Delete *DeleteLayerResponse `protobuf:"bytes,3,opt,name=delete,proto3,oneof"`
}

func (*BatchLayerResponse_BatchLayerItem_Create) isBatchLayerResponse_BatchLayerItem_Action() {}

func (*BatchLayerResponse_BatchLayerItem_Update) isBatchLayerResponse_BatchLayerItem_Action() {}

func (*BatchLayerResponse_BatchLayerItem_Delete) isBatchLayerResponse_BatchLayerItem_Action() {}

// A batch action.
type BatchLayerRequest_BatchItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Action:
	//
	//	*BatchLayerRequest_BatchItem_Create
	//	*BatchLayerRequest_BatchItem_Update
	//	*BatchLayerRequest_BatchItem_Delete
	Action isBatchLayerRequest_BatchItem_Action `protobuf_oneof:"action"`
}

func (x *BatchLayerRequest_BatchItem) Reset() {
	*x = BatchLayerRequest_BatchItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_layout_v2_api_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchLayerRequest_BatchItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchLayerRequest_BatchItem) ProtoMessage() {}

func (x *BatchLayerRequest_BatchItem) ProtoReflect() protoreflect.Message {
	mi := &file_apis_layout_v2_api_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchLayerRequest_BatchItem.ProtoReflect.Descriptor instead.
func (*BatchLayerRequest_BatchItem) Descriptor() ([]byte, []int) {
	return file_apis_layout_v2_api_proto_rawDescGZIP(), []int{25, 0}
}

func (m *BatchLayerRequest_BatchItem) GetAction() isBatchLayerRequest_BatchItem_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (x *BatchLayerRequest_BatchItem) GetCreate() *PartialLayer {
	if x, ok := x.GetAction().(*BatchLayerRequest_BatchItem_Create); ok {
		return x.Create
	}
	return nil
}

func (x *BatchLayerRequest_BatchItem) GetUpdate() *PartialLayerWithID {
	if x, ok := x.GetAction().(*BatchLayerRequest_BatchItem_Update); ok {
		return x.Update
	}
	return nil
}

func (x *BatchLayerRequest_BatchItem) GetDelete() *BatchDeleteLayerRequest {
	if x, ok := x.GetAction().(*BatchLayerRequest_BatchItem_Delete); ok {
		return x.Delete
	}
	return nil
}

type isBatchLayerRequest_BatchItem_Action interface {
	isBatchLayerRequest_BatchItem_Action()
}

type BatchLayerRequest_BatchItem_Create struct {
	// Create a layer
	Create *PartialLayer `protobuf:"bytes,1,opt,name=create,proto3,oneof"`
}

type BatchLayerRequest_BatchItem_Update struct {
	// Update a layer
	Update *PartialLayerWithID `protobuf:"bytes,2,opt,name=update,proto3,oneof"`
}

type BatchLayerRequest_BatchItem_Delete struct {
	// Delete a layer
	Delete *BatchDeleteLayerRequest `protobuf:"bytes,3,opt,name=delete,proto3,oneof"`
}

func (*BatchLayerRequest_BatchItem_Create) isBatchLayerRequest_BatchItem_Action() {}

func (*BatchLayerRequest_BatchItem_Update) isBatchLayerRequest_BatchItem_Action() {}

func (*BatchLayerRequest_BatchItem_Delete) isBatchLayerRequest_BatchItem_Action() {}

var File_apis_layout_v2_api_proto protoreflect.FileDescriptor

var file_apis_layout_v2_api_proto_rawDesc = []byte{
	0x0a, 0x18, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x2f, 0x76, 0x32,
	0x2f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x2e, 0x76, 0x32, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76,
	0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d,
	0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdb, 0x0b, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6c,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0d, 0x66, 0x72, 0x6f, 0x6d, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x49, 0x64, 0x73, 0x12, 0x3c,
	0x0a, 0x03, 0x63, 0x75, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x75, 0x74, 0x48, 0x00, 0x52, 0x03, 0x63, 0x75, 0x74, 0x12, 0x4e, 0x0a, 0x09,
	0x63, 0x72, 0x6f, 0x73, 0x73, 0x66, 0x61, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x2e, 0x76, 0x32,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x66, 0x61, 0x64, 0x65, 0x48,
	0x00, 0x52, 0x09, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x66, 0x61, 0x64, 0x65, 0x12, 0x56, 0x0a, 0x0d,
	0x66, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6c, 0x61, 0x79, 0x6f, 0x75,
	0x74, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x64, 0x65, 0x54, 0x6f,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0b, 0x66, 0x61, 0x64, 0x65, 0x54, 0x6f, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x42, 0x0a, 0x05, 0x73, 0x77, 0x69, 0x70, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6c, 0x61, 0x79, 0x6f, 0x75,
	0x74, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x77, 0x69, 0x70, 0x65, 0x48,
	0x00, 0x52, 0x05, 0x73, 0x77, 0x69, 0x70, 0x65, 0x12, 0x48, 0x0a, 0x07, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x48, 0x00, 0x52, 0x07, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x65, 0x72, 0x1a, 0x3f, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x1a, 0x0f, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x75, 0x74, 0x1a, 0x63, 0x0a, 0x15, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x61, 0x64, 0x65, 0x54, 0x6f, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1f, 0x0a,
	0x0b, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x12, 0x29,
	0x0a, 0x10, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x1a, 0x36, 0x0a, 0x13, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x66, 0x61, 0x64, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x73, 0x1a, 0xdf, 0x01, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x77, 0x69, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x12, 0x4c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5d, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64,
	0x5f, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x2e, 0x76,
	0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x77, 0x69, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x11, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0x7e, 0x0a, 0x14, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x43, 0x75, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x63,
	0x75, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x63, 0x75, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4d, 0x73, 0x12, 0x44, 0x0a,
	0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x1a, 0x68, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x03, 0x63, 0x75, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6c, 0x61, 0x79,
	0x6f, 0x75, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x69, 0x6e,
	0x67, 0x65, 0x72, 0x43, 0x75, 0x74, 0x48, 0x00, 0x52, 0x03, 0x63, 0x75, 0x74, 0x42, 0x0e, 0x0a,
	0x0c, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0xb6, 0x01,
	0x0a, 0x13, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x20, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x45, 0x46, 0x54, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x52, 0x49, 0x47, 0x48, 0x54, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x55, 0x50, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x44, 0x4f, 0x57, 0x4e, 0x10, 0x04, 0x22, 0xa9, 0x01, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x77, 0x69, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25,
	0x0a, 0x21, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x57, 0x49,
	0x50, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x57, 0x49, 0x50, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43,
	0x4f, 0x4d, 0x42, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x57, 0x49, 0x50, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x57, 0x49, 0x50, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x03, 0x42, 0x11, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0xd8, 0x05, 0x0a, 0x06, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x12, 0x42, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x32, 0x92, 0x41,
	0x2f, 0x4a, 0x26, 0x22, 0x37, 0x31, 0x33, 0x66, 0x36, 0x65, 0x39, 0x31, 0x2d, 0x33, 0x38, 0x33,
	0x31, 0x2d, 0x34, 0x34, 0x32, 0x31, 0x2d, 0x61, 0x37, 0x32, 0x30, 0x2d, 0x31, 0x63, 0x38, 0x30,
	0x38, 0x34, 0x64, 0x31, 0x30, 0x35, 0x32, 0x35, 0x22, 0xa2, 0x02, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x12, 0x92, 0x41, 0x0f, 0x4a, 0x04, 0x31, 0x32, 0x38, 0x30, 0x59, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x88, 0xc3, 0x40, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x29,
	0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x11,
	0x92, 0x41, 0x0e, 0x4a, 0x03, 0x37, 0x32, 0x30, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0xc3,
	0x40, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x5f, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x26, 0x92, 0x41, 0x23, 0x4a, 0x18, 0x7b, 0x20, 0x22, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x3a, 0x20, 0x22, 0x54, 0x65, 0x73, 0x74, 0x20, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x22, 0x7d, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0xc3, 0x40, 0x48, 0x00, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f,
	0x92, 0x41, 0x1c, 0x4a, 0x1a, 0x22, 0x36, 0x32, 0x34, 0x63, 0x36, 0x66, 0x34, 0x36, 0x35, 0x38,
	0x38, 0x37, 0x62, 0x32, 0x38, 0x39, 0x34, 0x65, 0x64, 0x38, 0x37, 0x63, 0x38, 0x37, 0x22, 0x48,
	0x01, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x49, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x4a, 0x1a, 0x22, 0x36, 0x32,
	0x34, 0x63, 0x36, 0x66, 0x34, 0x37, 0x35, 0x38, 0x38, 0x37, 0x62, 0x32, 0x38, 0x39, 0x34, 0x65,
	0x64, 0x38, 0x37, 0x63, 0x38, 0x39, 0x22, 0x48, 0x02, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x4d, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x42, 0x18, 0x92, 0x41, 0x15, 0x4a, 0x13, 0x22, 0x4c, 0x41, 0x59, 0x4f,
	0x55, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x22, 0x48, 0x03,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x0b, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x2e, 0x76, 0x32, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x6b, 0x0a, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x65, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x23, 0x92, 0x41, 0x20, 0x3a, 0x09,
	0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x4a, 0x13, 0x7b, 0x20, 0x22, 0x65, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x22, 0x3a, 0x20, 0x74, 0x72, 0x75, 0x65, 0x20, 0x7d, 0x48, 0x04,
	0x52, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x22, 0xf6, 0x08, 0x0a, 0x05, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0x92, 0x41, 0x09, 0x4a, 0x07, 0x22,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x22, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x7d, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x42, 0x50, 0x92, 0x41, 0x4d, 0x4a, 0x4b, 0x7b, 0x20, 0x22, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x22, 0x3a, 0x20, 0x7b, 0x20, 0x22, 0x75, 0x72, 0x6c, 0x22, 0x3a, 0x20, 0x22, 0x68,
	0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x72, 0x61, 0x69, 0x6e, 0x6d, 0x61, 0x6b, 0x65, 0x72,
	0x2e, 0x67, 0x67, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x6c, 0x6f, 0x67, 0x6f, 0x2d,
	0x77, 0x68, 0x69, 0x74, 0x65, 0x2d, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x70, 0x6e, 0x67,
	0x22, 0x20, 0x7d, 0x20, 0x7d, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3c, 0x0a, 0x01, 0x78,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x16,
	0x92, 0x41, 0x13, 0x4a, 0x04, 0x31, 0x30, 0x30, 0x30, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88,
	0xc3, 0x40, 0x9a, 0x02, 0x01, 0x03, 0x52, 0x01, 0x78, 0x12, 0x3c, 0x0a, 0x01, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x16, 0x92, 0x41,
	0x13, 0x4a, 0x04, 0x31, 0x30, 0x30, 0x30, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0xc3, 0x40,
	0x9a, 0x02, 0x01, 0x03, 0x52, 0x01, 0x79, 0x12, 0x44, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x16,
	0x92, 0x41, 0x13, 0x4a, 0x04, 0x31, 0x30, 0x30, 0x30, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88,
	0xc3, 0x40, 0x9a, 0x02, 0x01, 0x03, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x46, 0x0a,
	0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x16, 0x92, 0x41, 0x13, 0x4a, 0x04, 0x31, 0x30, 0x30, 0x30,
	0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0xc3, 0x40, 0x9a, 0x02, 0x01, 0x03, 0x52, 0x06, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x3d, 0x0a, 0x08, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x42, 0x21, 0x92, 0x41, 0x1e, 0x3a, 0x01, 0x30, 0x4a,
	0x03, 0x31, 0x38, 0x30, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x76, 0x40, 0x69, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x80, 0x76, 0xc0, 0x9a, 0x02, 0x01, 0x03, 0x52, 0x08, 0x72, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x07, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x01, 0x42, 0x18, 0x92, 0x41, 0x15, 0x3a, 0x01, 0x31, 0x4a, 0x03, 0x31,
	0x38, 0x30, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x3f, 0x9a, 0x02, 0x01, 0x05, 0x52,
	0x07, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x42, 0x18, 0x92, 0x41, 0x15, 0x3a, 0x01, 0x31, 0x4a,
	0x03, 0x30, 0x2e, 0x38, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x40, 0x9a, 0x02, 0x01,
	0x05, 0x52, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x06, 0x68, 0x69, 0x64, 0x64,
	0x65, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x3a, 0x05, 0x66,
	0x61, 0x6c, 0x73, 0x65, 0x4a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x06, 0x68, 0x69, 0x64,
	0x64, 0x65, 0x6e, 0x12, 0x50, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x18, 0x92, 0x41, 0x15, 0x3a, 0x02, 0x5b, 0x5d, 0x4a, 0x0f, 0x5b, 0x22, 0x31, 0x22,
	0x2c, 0x20, 0x22, 0x32, 0x22, 0x2c, 0x20, 0x22, 0x33, 0x22, 0x5d, 0x52, 0x08, 0x63, 0x68, 0x69,
	0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x50, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x1c, 0x92, 0x41, 0x19, 0x4a, 0x17, 0x7b, 0x20, 0x22, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x20,
	0x22, 0x54, 0x65, 0x73, 0x74, 0x20, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x22, 0x7d, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x64, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0b, 0x92, 0x41, 0x08, 0x4a, 0x06, 0x22, 0x31, 0x32, 0x33, 0x34, 0x22,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x4f, 0x0a, 0x09, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x66, 0x20, 0x01, 0x28, 0x09, 0x42, 0x32, 0x92, 0x41, 0x2f, 0x4a, 0x26, 0x22, 0x37,
	0x31, 0x33, 0x66, 0x36, 0x65, 0x39, 0x31, 0x2d, 0x33, 0x38, 0x33, 0x31, 0x2d, 0x34, 0x34, 0x32,
	0x31, 0x2d, 0x61, 0x37, 0x32, 0x30, 0x2d, 0x31, 0x63, 0x38, 0x30, 0x38, 0x34, 0x64, 0x31, 0x30,
	0x35, 0x32, 0x35, 0x22, 0xa2, 0x02, 0x04, 0x75, 0x75, 0x69, 0x64, 0x52, 0x08, 0x6c, 0x61, 0x79,
	0x6f, 0x75, 0x74, 0x49, 0x64, 0x12, 0x6b, 0x0a, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x23, 0x92, 0x41, 0x20, 0x3a, 0x09, 0x75, 0x6e,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x4a, 0x13, 0x7b, 0x20, 0x22, 0x65, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x22, 0x3a, 0x20, 0x74, 0x72, 0x75, 0x65, 0x20, 0x7d, 0x48, 0x00, 0x52, 0x0f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x88,
	0x01, 0x01, 0x12, 0x54, 0x0a, 0x11, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x6e,
	0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x67, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x4c,
	0x61, 0x79, 0x65, 0x72, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x07, 0x92,
	0x41, 0x04, 0x3a, 0x02, 0x5b, 0x5d, 0x52, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41,
	0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x4a, 0x04, 0x08,
	0x0b, 0x10, 0x0c, 0x4a, 0x04, 0x08, 0x0d, 0x10, 0x0e, 0x22, 0xe3, 0x01, 0x0a, 0x12, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x52, 0x0a, 0x09, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x35, 0x92, 0x41, 0x2f, 0x4a, 0x26, 0x22, 0x37, 0x31, 0x33, 0x66, 0x36,
	0x65, 0x39, 0x31, 0x2d, 0x33, 0x38, 0x33, 0x31, 0x2d, 0x34, 0x34, 0x32, 0x31, 0x2d, 0x61, 0x37,
	0x32, 0x30, 0x2d, 0x31, 0x63, 0x38, 0x30, 0x38, 0x34, 0x64, 0x31, 0x30, 0x35, 0x32, 0x35, 0x22,
	0xa2, 0x02, 0x04, 0x75, 0x75, 0x69, 0x64, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x6c, 0x61, 0x79, 0x6f,
	0x75, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x08, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0x92, 0x41, 0x09, 0x4a, 0x07, 0x22, 0x31, 0x32,
	0x33, 0x34, 0x35, 0x22, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x41, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x2e,
	0x76, 0x32, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22,
	0xac, 0x02, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x32, 0x92, 0x41, 0x2f, 0x4a, 0x26, 0x22, 0x37, 0x31, 0x33, 0x66, 0x36,
	0x65, 0x39, 0x31, 0x2d, 0x33, 0x38, 0x33, 0x31, 0x2d, 0x34, 0x34, 0x32, 0x31, 0x2d, 0x61, 0x37,
	0x32, 0x30, 0x2d, 0x31, 0x63, 0x38, 0x30, 0x38, 0x34, 0x64, 0x31, 0x30, 0x35, 0x32, 0x35, 0x22,
	0xa2, 0x02, 0x04, 0x75, 0x75, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4f, 0x0a, 0x09, 0x6c,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x32,
	0x92, 0x41, 0x2f, 0x4a, 0x26, 0x22, 0x37, 0x31, 0x33, 0x66, 0x36, 0x65, 0x39, 0x31, 0x2d, 0x33,
	0x38, 0x33, 0x31, 0x2d, 0x34, 0x34, 0x32, 0x31, 0x2d, 0x61, 0x37, 0x32, 0x30, 0x2d, 0x31, 0x63,
	0x38, 0x30, 0x38, 0x34, 0x64, 0x31, 0x30, 0x35, 0x32, 0x35, 0x22, 0xa2, 0x02, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x52, 0x08, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x49, 0x64, 0x12, 0x6b, 0x0a, 0x10,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x23,
	0x92, 0x41, 0x20, 0x3a, 0x09, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x4a, 0x13,
	0x7b, 0x20, 0x22, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x22, 0x3a, 0x20, 0x74, 0x72, 0x75,
	0x65, 0x20, 0x7d, 0x48, 0x00, 0x52, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xcc,
	0x04, 0x0a, 0x12, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x06, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6c, 0x61, 0x79,
	0x6f, 0x75, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x79, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4c,
	0x61, 0x79, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x06, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73,
	0x12, 0x4f, 0x0a, 0x09, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x32, 0x92, 0x41, 0x2f, 0x4a, 0x26, 0x22, 0x37, 0x31, 0x33, 0x66, 0x36,
	0x65, 0x39, 0x31, 0x2d, 0x33, 0x38, 0x33, 0x31, 0x2d, 0x34, 0x34, 0x32, 0x31, 0x2d, 0x61, 0x37,
	0x32, 0x30, 0x2d, 0x31, 0x63, 0x38, 0x30, 0x38, 0x34, 0x64, 0x31, 0x30, 0x35, 0x32, 0x35, 0x22,
	0xa2, 0x02, 0x04, 0x75, 0x75, 0x69, 0x64, 0x52, 0x08, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x49,
	0x64, 0x12, 0x6b, 0x0a, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x23, 0x92, 0x41, 0x20, 0x3a, 0x09, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x65, 0x64, 0x4a, 0x13, 0x7b, 0x20, 0x22, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x22,
	0x3a, 0x20, 0x74, 0x72, 0x75, 0x65, 0x20, 0x7d, 0x48, 0x00, 0x52, 0x0f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x5a,
	0x0a, 0x16, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24,
	0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x2e, 0x76, 0x32, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x6f, 0x64, 0x65, 0x52, 0x14, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x6e, 0x69,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x1a, 0xbb, 0x01, 0x0a, 0x0e, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x2f, 0x0a,
	0x06, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x4c,
	0x61, 0x79, 0x65, 0x72, 0x48, 0x00, 0x52, 0x06, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x2f,
	0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x2e, 0x76, 0x32, 0x2e,
	0x4c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x00, 0x52, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x3d, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x2e, 0x76, 0x32,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x08,
	0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xcf, 0x05,
	0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12,
	0x30, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x15,
	0x92, 0x41, 0x0f, 0x4a, 0x04, 0x31, 0x32, 0x38, 0x30, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88,
	0xc3, 0x40, 0xe0, 0x41, 0x01, 0x48, 0x00, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x88, 0x01,
	0x01, 0x12, 0x31, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x14, 0x92, 0x41, 0x0e, 0x4a, 0x03, 0x37, 0x32, 0x30, 0x59, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x88, 0xc3, 0x40, 0xe0, 0x41, 0x01, 0x48, 0x01, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x62, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x29,
	0x92, 0x41, 0x23, 0x4a, 0x18, 0x7b, 0x20, 0x22, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x20, 0x22,
	0x54, 0x65, 0x73, 0x74, 0x20, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x22, 0x7d, 0x59, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x88, 0xc3, 0x40, 0xe0, 0x41, 0x01, 0x48, 0x02, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0x92, 0x41,
	0x1c, 0x4a, 0x1a, 0x22, 0x36, 0x32, 0x34, 0x63, 0x36, 0x66, 0x34, 0x36, 0x35, 0x38, 0x38, 0x37,
	0x62, 0x32, 0x38, 0x39, 0x34, 0x65, 0x64, 0x38, 0x37, 0x63, 0x38, 0x37, 0x22, 0xe0, 0x41, 0x01,
	0x48, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x4c, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0x92, 0x41, 0x1c, 0x4a, 0x1a, 0x22, 0x36,
	0x32, 0x34, 0x63, 0x36, 0x66, 0x34, 0x37, 0x35, 0x38, 0x38, 0x37, 0x62, 0x32, 0x38, 0x39, 0x34,
	0x65, 0x64, 0x38, 0x37, 0x63, 0x38, 0x39, 0x22, 0xe0, 0x41, 0x01, 0x48, 0x04, 0x52, 0x0c, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x50,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x61,
	0x79, 0x6f, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x1b, 0x92, 0x41, 0x15, 0x4a, 0x13, 0x22,
	0x4c, 0x41, 0x59, 0x4f, 0x55, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x43, 0x45, 0x4e,
	0x45, 0x22, 0xe0, 0x41, 0x01, 0x48, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x3c, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6c, 0x61, 0x79,
	0x6f, 0x75, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x6e,
	0x0a, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x26, 0x92, 0x41, 0x20, 0x3a, 0x09, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64,
	0x4a, 0x13, 0x7b, 0x20, 0x22, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x22, 0x3a, 0x20, 0x74,
	0x72, 0x75, 0x65, 0x20, 0x7d, 0xe0, 0x41, 0x01, 0x48, 0x06, 0x52, 0x0f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22,
	0xa6, 0x02, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0x92, 0x41, 0x1c, 0x4a,
	0x1a, 0x22, 0x36, 0x32, 0x34, 0x63, 0x36, 0x66, 0x34, 0x36, 0x35, 0x38, 0x38, 0x37, 0x62, 0x32,
	0x38, 0x39, 0x34, 0x65, 0x64, 0x38, 0x37, 0x63, 0x38, 0x37, 0x22, 0xe0, 0x41, 0x01, 0x48, 0x00,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x4c,
	0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0x92, 0x41, 0x1c, 0x4a, 0x1a, 0x22, 0x36, 0x32, 0x34,
	0x63, 0x36, 0x66, 0x34, 0x37, 0x35, 0x38, 0x38, 0x37, 0x62, 0x32, 0x38, 0x39, 0x34, 0x65, 0x64,
	0x38, 0x37, 0x63, 0x38, 0x39, 0x22, 0xe0, 0x41, 0x01, 0x48, 0x01, 0x52, 0x0c, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x50, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x61, 0x79, 0x6f,
	0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x1b, 0x92, 0x41, 0x15, 0x4a, 0x13, 0x22, 0x4c, 0x41,
	0x59, 0x4f, 0x55, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x22,
	0xe0, 0x41, 0x01, 0x48, 0x02, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x47, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74,
	0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x30, 0x0a, 0x07, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x2e, 0x76,
	0x32, 0x2e, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x52, 0x07, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x73, 0x22, 0x51, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x79, 0x6f, 0x75,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x06, 0x6c, 0x61, 0x79, 0x6f,
	0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61,
	0x6c, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x6c, 0x61,
	0x79, 0x6f, 0x75, 0x74, 0x22, 0x66, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x79, 0x6f, 0x75,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x09, 0x6c, 0x61, 0x79, 0x6f,
	0x75, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x35, 0x92, 0x41, 0x2f,
	0x4a, 0x26, 0x22, 0x37, 0x31, 0x33, 0x66, 0x36, 0x65, 0x39, 0x31, 0x2d, 0x33, 0x38, 0x33, 0x31,
	0x2d, 0x34, 0x34, 0x32, 0x31, 0x2d, 0x61, 0x37, 0x32, 0x30, 0x2d, 0x31, 0x63, 0x38, 0x30, 0x38,
	0x34, 0x64, 0x31, 0x30, 0x35, 0x32, 0x35, 0x22, 0xa2, 0x02, 0x04, 0x75, 0x75, 0x69, 0x64, 0xe0,
	0x41, 0x02, 0x52, 0x08, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x49, 0x64, 0x22, 0xa5, 0x01, 0x0a,
	0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x09, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x35, 0x92, 0x41, 0x2f, 0x4a, 0x26, 0x22, 0x37,
	0x31, 0x33, 0x66, 0x36, 0x65, 0x39, 0x31, 0x2d, 0x33, 0x38, 0x33, 0x31, 0x2d, 0x34, 0x34, 0x32,
	0x31, 0x2d, 0x61, 0x37, 0x32, 0x30, 0x2d, 0x31, 0x63, 0x38, 0x30, 0x38, 0x34, 0x64, 0x31, 0x30,
	0x35, 0x32, 0x35, 0x22, 0xa2, 0x02, 0x04, 0x75, 0x75, 0x69, 0x64, 0xe0, 0x41, 0x02, 0x52, 0x08,
	0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x06, 0x6c, 0x61, 0x79, 0x6f,
	0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61,
	0x6c, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x6c, 0x61,
	0x79, 0x6f, 0x75, 0x74, 0x22, 0x97, 0x01, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x6b, 0x0a, 0x10,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x23,
	0x92, 0x41, 0x20, 0x3a, 0x09, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x4a, 0x13,
	0x7b, 0x20, 0x22, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x22, 0x3a, 0x20, 0x74, 0x72, 0x75,
	0x65, 0x20, 0x7d, 0x48, 0x00, 0x52, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xb9,
	0x01, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x09, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x35, 0x92, 0x41, 0x2f, 0x4a, 0x26,
	0x22, 0x37, 0x31, 0x33, 0x66, 0x36, 0x65, 0x39, 0x31, 0x2d, 0x33, 0x38, 0x33, 0x31, 0x2d, 0x34,
	0x34, 0x32, 0x31, 0x2d, 0x61, 0x37, 0x32, 0x30, 0x2d, 0x31, 0x63, 0x38, 0x30, 0x38, 0x34, 0x64,
	0x31, 0x30, 0x35, 0x32, 0x35, 0x22, 0xa2, 0x02, 0x04, 0x75, 0x75, 0x69, 0x64, 0xe0, 0x41, 0x02,
	0x52, 0x08, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x48, 0x00, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xdc, 0x01, 0x0a, 0x14, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x32, 0x92, 0x41, 0x2f, 0x4a, 0x26, 0x22, 0x37, 0x31, 0x33, 0x66, 0x36, 0x65, 0x39, 0x31, 0x2d,
	0x33, 0x38, 0x33, 0x31, 0x2d, 0x34, 0x34, 0x32, 0x31, 0x2d, 0x61, 0x37, 0x32, 0x30, 0x2d, 0x31,
	0x63, 0x38, 0x30, 0x38, 0x34, 0x64, 0x31, 0x30, 0x35, 0x32, 0x35, 0x22, 0xa2, 0x02, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x6b, 0x0a, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x64, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x23, 0x92, 0x41, 0x20, 0x3a, 0x09,
	0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x4a, 0x13, 0x7b, 0x20, 0x22, 0x65, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x22, 0x3a, 0x20, 0x74, 0x72, 0x75, 0x65, 0x20, 0x7d, 0x48, 0x00,
	0x52, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x88, 0x01, 0x01, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x9a, 0x02, 0x0a, 0x0e, 0x4c, 0x61,
	0x79, 0x65, 0x72, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x0d, 0x92, 0x41, 0x07, 0x4a, 0x05, 0x5b, 0x22, 0x2a, 0x22, 0x5d, 0xe0, 0x41, 0x02, 0x52,
	0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x0b, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x19, 0x92, 0x41, 0x13, 0x4a, 0x04, 0x31, 0x30, 0x30, 0x30, 0x59, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x4c, 0xdd, 0x40, 0x9a, 0x02, 0x01, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x12, 0x39, 0x0a, 0x08, 0x64, 0x65, 0x6c, 0x61, 0x79,
	0x5f, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x19, 0x92, 0x41, 0x13, 0x4a, 0x04,
	0x31, 0x30, 0x30, 0x30, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0xdd, 0x40, 0x9a, 0x02, 0x01,
	0x03, 0xe0, 0x41, 0x01, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x4d, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x45, 0x0a, 0x0b, 0x65, 0x61, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x19, 0x3a, 0x08, 0x22, 0x6c,
	0x69, 0x6e, 0x65, 0x61, 0x72, 0x22, 0x4a, 0x0d, 0x22, 0x65, 0x61, 0x73, 0x65, 0x2d, 0x69, 0x6e,
	0x2d, 0x6f, 0x75, 0x74, 0x22, 0xe0, 0x41, 0x01, 0x48, 0x01, 0x52, 0x0a, 0x65, 0x61, 0x73, 0x69,
	0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x65,
	0x6c, 0x61, 0x79, 0x5f, 0x6d, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x65, 0x61, 0x73, 0x69, 0x6e,
	0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0xe1, 0x09, 0x0a, 0x0c, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0x92, 0x41, 0x09, 0x4a, 0x07, 0x22, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x22, 0xe0, 0x41, 0x01, 0x48, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x85, 0x01, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x53, 0x92, 0x41, 0x4d, 0x4a, 0x4b,
	0x7b, 0x20, 0x22, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x22, 0x3a, 0x20, 0x7b, 0x20, 0x22, 0x75, 0x72,
	0x6c, 0x22, 0x3a, 0x20, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x72, 0x61, 0x69,
	0x6e, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x2e, 0x67, 0x67, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73,
	0x2f, 0x6c, 0x6f, 0x67, 0x6f, 0x2d, 0x77, 0x68, 0x69, 0x74, 0x65, 0x2d, 0x6d, 0x65, 0x64, 0x69,
	0x75, 0x6d, 0x2e, 0x70, 0x6e, 0x67, 0x22, 0x20, 0x7d, 0x20, 0x7d, 0xe0, 0x41, 0x01, 0x48, 0x01,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x01, 0x78, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x19, 0x92, 0x41,
	0x13, 0x4a, 0x04, 0x31, 0x30, 0x30, 0x30, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0xc3, 0x40,
	0x9a, 0x02, 0x01, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x01, 0x78, 0x12, 0x3f, 0x0a, 0x01, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x19, 0x92,
	0x41, 0x13, 0x4a, 0x04, 0x31, 0x30, 0x30, 0x30, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0xc3,
	0x40, 0x9a, 0x02, 0x01, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x01, 0x79, 0x12, 0x47, 0x0a, 0x05, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x19, 0x92, 0x41, 0x13, 0x4a, 0x04, 0x31, 0x30, 0x30, 0x30, 0x59, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x88, 0xc3, 0x40, 0x9a, 0x02, 0x01, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x05, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x12, 0x49, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x19, 0x92, 0x41,
	0x13, 0x4a, 0x04, 0x31, 0x30, 0x30, 0x30, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0xc3, 0x40,
	0x9a, 0x02, 0x01, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x45, 0x0a, 0x08, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x01, 0x42, 0x24, 0x92, 0x41, 0x1e, 0x3a, 0x01, 0x30, 0x4a, 0x03, 0x31, 0x38, 0x30, 0x59, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x80, 0x76, 0x40, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x76, 0xc0,
	0x9a, 0x02, 0x01, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x02, 0x52, 0x08, 0x72, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x07, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x42, 0x1b, 0x92, 0x41, 0x15, 0x3a, 0x01, 0x31, 0x4a,
	0x03, 0x31, 0x38, 0x30, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x3f, 0x9a, 0x02, 0x01,
	0x05, 0xe0, 0x41, 0x01, 0x48, 0x03, 0x52, 0x07, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x88,
	0x01, 0x01, 0x12, 0x36, 0x0a, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x01, 0x42, 0x1b, 0x92, 0x41, 0x15, 0x3a, 0x01, 0x31, 0x4a, 0x03, 0x30, 0x2e, 0x38, 0x59, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x40, 0x9a, 0x02, 0x01, 0x05, 0xe0, 0x41, 0x01, 0x48, 0x04,
	0x52, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x06, 0x68, 0x69,
	0x64, 0x64, 0x65, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x42, 0x14, 0x92, 0x41, 0x0e, 0x3a,
	0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x4a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0xe0, 0x41, 0x01,
	0x48, 0x05, 0x52, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x58, 0x0a,
	0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x1b, 0x92, 0x41, 0x15,
	0x3a, 0x02, 0x5b, 0x5d, 0x4a, 0x0f, 0x5b, 0x22, 0x31, 0x22, 0x2c, 0x20, 0x22, 0x32, 0x22, 0x2c,
	0x20, 0x22, 0x33, 0x22, 0x5d, 0xe0, 0x41, 0x01, 0x48, 0x06, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c,
	0x64, 0x72, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0x92, 0x41, 0x08, 0x4a,
	0x06, 0x22, 0x31, 0x32, 0x33, 0x34, 0x22, 0xe0, 0x41, 0x01, 0x48, 0x07, 0x52, 0x08, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x50, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x4a, 0x17, 0x7b, 0x20, 0x22, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x3a, 0x20, 0x22, 0x54, 0x65, 0x73, 0x74, 0x20, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x22,
	0x7d, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x6e, 0x0a, 0x10, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x26, 0x92,
	0x41, 0x20, 0x3a, 0x09, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x4a, 0x13, 0x7b,
	0x20, 0x22, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x22, 0x3a, 0x20, 0x74, 0x72, 0x75, 0x65,
	0x20, 0x7d, 0xe0, 0x41, 0x01, 0x48, 0x08, 0x52, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x57, 0x0a, 0x11, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x67, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6c, 0x61,
	0x79, 0x6f, 0x75, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x6e, 0x69,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x92, 0x41, 0x04, 0x3a, 0x02, 0x5b, 0x5d, 0xe0,
	0x41, 0x01, 0x52, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x6e, 0x69, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x72, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x68, 0x69,
	0x64, 0x64, 0x65, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65,
	0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x42,
	0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x4a, 0x04, 0x08, 0x0b, 0x10, 0x0c, 0x22, 0x89, 0x0a, 0x0a, 0x12, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x49,
	0x44, 0x12, 0x20, 0x0a, 0x02, 0x69, 0x64, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f,
	0x92, 0x41, 0x09, 0x4a, 0x07, 0x22, 0x31, 0x32, 0x33, 0x34, 0x35, 0x22, 0xe0, 0x41, 0x02, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0f, 0x92, 0x41, 0x09, 0x4a, 0x07, 0x22, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x22, 0xe0,
	0x41, 0x01, 0x48, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x85, 0x01,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x53, 0x92, 0x41, 0x4d, 0x4a, 0x4b, 0x7b, 0x20, 0x22, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x22, 0x3a, 0x20, 0x7b, 0x20, 0x22, 0x75, 0x72, 0x6c, 0x22, 0x3a, 0x20,
	0x22, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x72, 0x61, 0x69, 0x6e, 0x6d, 0x61, 0x6b,
	0x65, 0x72, 0x2e, 0x67, 0x67, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x6c, 0x6f, 0x67,
	0x6f, 0x2d, 0x77, 0x68, 0x69, 0x74, 0x65, 0x2d, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x70,
	0x6e, 0x67, 0x22, 0x20, 0x7d, 0x20, 0x7d, 0xe0, 0x41, 0x01, 0x48, 0x01, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x01, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x19, 0x92, 0x41, 0x13, 0x4a, 0x04, 0x31,
	0x30, 0x30, 0x30, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0xc3, 0x40, 0x9a, 0x02, 0x01, 0x03,
	0xe0, 0x41, 0x01, 0x52, 0x01, 0x78, 0x12, 0x3f, 0x0a, 0x01, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x19, 0x92, 0x41, 0x13, 0x4a, 0x04,
	0x31, 0x30, 0x30, 0x30, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0xc3, 0x40, 0x9a, 0x02, 0x01,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x01, 0x79, 0x12, 0x47, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x19,
	0x92, 0x41, 0x13, 0x4a, 0x04, 0x31, 0x30, 0x30, 0x30, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88,
	0xc3, 0x40, 0x9a, 0x02, 0x01, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x12, 0x49, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x19, 0x92, 0x41, 0x13, 0x4a, 0x04, 0x31,
	0x30, 0x30, 0x30, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0xc3, 0x40, 0x9a, 0x02, 0x01, 0x03,
	0xe0, 0x41, 0x01, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x45, 0x0a, 0x08, 0x72,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x42, 0x24, 0x92,
	0x41, 0x1e, 0x3a, 0x01, 0x30, 0x4a, 0x03, 0x31, 0x38, 0x30, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x80, 0x76, 0x40, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x76, 0xc0, 0x9a, 0x02, 0x01, 0x03,
	0xe0, 0x41, 0x01, 0x48, 0x02, 0x52, 0x08, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x3a, 0x0a, 0x07, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x01, 0x42, 0x1b, 0x92, 0x41, 0x15, 0x3a, 0x01, 0x31, 0x4a, 0x03, 0x31, 0x38, 0x30,
	0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x3f, 0x9a, 0x02, 0x01, 0x05, 0xe0, 0x41, 0x01,
	0x48, 0x03, 0x52, 0x07, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x36,
	0x0a, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x42, 0x1b, 0x92,
	0x41, 0x15, 0x3a, 0x01, 0x31, 0x4a, 0x03, 0x30, 0x2e, 0x38, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x10, 0x40, 0x9a, 0x02, 0x01, 0x05, 0xe0, 0x41, 0x01, 0x48, 0x04, 0x52, 0x05, 0x73, 0x63,
	0x61, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x42, 0x14, 0x92, 0x41, 0x0e, 0x3a, 0x05, 0x66, 0x61, 0x6c,
	0x73, 0x65, 0x4a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0xe0, 0x41, 0x01, 0x48, 0x05, 0x52, 0x06,
	0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x58, 0x0a, 0x08, 0x63, 0x68, 0x69,
	0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x1b, 0x92, 0x41, 0x15, 0x3a, 0x02, 0x5b, 0x5d,
	0x4a, 0x0f, 0x5b, 0x22, 0x31, 0x22, 0x2c, 0x20, 0x22, 0x32, 0x22, 0x2c, 0x20, 0x22, 0x33, 0x22,
	0x5d, 0xe0, 0x41, 0x01, 0x48, 0x06, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0x92, 0x41, 0x08, 0x4a, 0x06, 0x22, 0x31, 0x32,
	0x33, 0x34, 0x22, 0xe0, 0x41, 0x01, 0x48, 0x07, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x50, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x1c, 0x92, 0x41, 0x19, 0x4a, 0x17, 0x7b, 0x20, 0x22, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x20,
	0x22, 0x54, 0x65, 0x73, 0x74, 0x20, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x22, 0x7d, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x6e, 0x0a, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x64, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x26, 0x92, 0x41, 0x20, 0x3a, 0x09,
	0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x4a, 0x13, 0x7b, 0x20, 0x22, 0x65, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x22, 0x3a, 0x20, 0x74, 0x72, 0x75, 0x65, 0x20, 0x7d, 0xe0, 0x41,
	0x01, 0x48, 0x08, 0x52, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x57, 0x0a, 0x11, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x67, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x0a, 0x92, 0x41, 0x04, 0x3a, 0x02, 0x5b, 0x5d, 0xe0, 0x41, 0x01, 0x52, 0x10,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x4a, 0x04, 0x08, 0x0b, 0x10, 0x0c, 0x22, 0x67, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x61,
	0x79, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x09, 0x6c,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x35,
	0x92, 0x41, 0x2f, 0x4a, 0x26, 0x22, 0x37, 0x31, 0x33, 0x66, 0x36, 0x65, 0x39, 0x31, 0x2d, 0x33,
	0x38, 0x33, 0x31, 0x2d, 0x34, 0x34, 0x32, 0x31, 0x2d, 0x61, 0x37, 0x32, 0x30, 0x2d, 0x31, 0x63,
	0x38, 0x30, 0x38, 0x34, 0x64, 0x31, 0x30, 0x35, 0x32, 0x35, 0x22, 0xa2, 0x02, 0x04, 0x75, 0x75,
	0x69, 0x64, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x49, 0x64, 0x22,
	0x43, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6c, 0x61, 0x79,
	0x6f, 0x75, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x06, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x73, 0x22, 0xa1, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c,
	0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x09, 0x6c,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x35,
	0x92, 0x41, 0x2f, 0x4a, 0x26, 0x22, 0x37, 0x31, 0x33, 0x66, 0x36, 0x65, 0x39, 0x31, 0x2d, 0x33,
	0x38, 0x33, 0x31, 0x2d, 0x34, 0x34, 0x32, 0x31, 0x2d, 0x61, 0x37, 0x32, 0x30, 0x2d, 0x31, 0x63,
	0x38, 0x30, 0x38, 0x34, 0x64, 0x31, 0x30, 0x35, 0x32, 0x35, 0x22, 0xa2, 0x02, 0x04, 0x75, 0x75,
	0x69, 0x64, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x49, 0x64, 0x12,
	0x37, 0x0a, 0x05, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x2e, 0x76, 0x32, 0x2e,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x05, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x22, 0x91, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x4c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x09,
	0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x35, 0x92, 0x41, 0x2f, 0x4a, 0x26, 0x22, 0x37, 0x31, 0x33, 0x66, 0x36, 0x65, 0x39, 0x31, 0x2d,
	0x33, 0x38, 0x33, 0x31, 0x2d, 0x34, 0x34, 0x32, 0x31, 0x2d, 0x61, 0x37, 0x32, 0x30, 0x2d, 0x31,
	0x63, 0x38, 0x30, 0x38, 0x34, 0x64, 0x31, 0x30, 0x35, 0x32, 0x35, 0x22, 0xa2, 0x02, 0x04, 0x75,
	0x75, 0x69, 0x64, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x49, 0x64,
	0x12, 0x2a, 0x0a, 0x08, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0f, 0x92, 0x41, 0x09, 0x4a, 0x07, 0x22, 0x31, 0x32, 0x33, 0x34, 0x35, 0x22,
	0xe0, 0x41, 0x02, 0x52, 0x07, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x22, 0xcd, 0x01, 0x0a,
	0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x09, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x35, 0x92, 0x41, 0x2f, 0x4a, 0x26, 0x22, 0x37, 0x31,
	0x33, 0x66, 0x36, 0x65, 0x39, 0x31, 0x2d, 0x33, 0x38, 0x33, 0x31, 0x2d, 0x34, 0x34, 0x32, 0x31,
	0x2d, 0x61, 0x37, 0x32, 0x30, 0x2d, 0x31, 0x63, 0x38, 0x30, 0x38, 0x34, 0x64, 0x31, 0x30, 0x35,
	0x32, 0x35, 0x22, 0xa2, 0x02, 0x04, 0x75, 0x75, 0x69, 0x64, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x6c,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x08, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0x92, 0x41, 0x09, 0x4a, 0x07,
	0x22, 0x31, 0x32, 0x33, 0x34, 0x35, 0x22, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x05, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x2e, 0x76, 0x32, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x4c, 0x61, 0x79, 0x65, 0x72,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x22, 0x96, 0x01, 0x0a,
	0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x12, 0x6b, 0x0a, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x23, 0x92, 0x41, 0x20, 0x3a, 0x09, 0x75, 0x6e, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x65, 0x64, 0x4a, 0x13, 0x7b, 0x20, 0x22, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x22, 0x3a, 0x20, 0x74, 0x72, 0x75, 0x65, 0x20, 0x7d, 0x48, 0x00, 0x52, 0x0f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01,
	0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xbf, 0x01, 0x0a, 0x17, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0x92,
	0x41, 0x09, 0x4a, 0x07, 0x22, 0x31, 0x32, 0x33, 0x34, 0x35, 0x22, 0xe0, 0x41, 0x02, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x6e, 0x0a, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x26, 0x92, 0x41, 0x20, 0x3a, 0x09, 0x75, 0x6e, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x64, 0x4a, 0x13, 0x7b, 0x20, 0x22, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x22, 0x3a, 0x20, 0x74, 0x72, 0x75, 0x65, 0x20, 0x7d, 0xe0, 0x41, 0x01, 0x48, 0x00, 0x52, 0x0f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x88,
	0x01, 0x01, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xfb, 0x04, 0x0a, 0x11, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x52, 0x0a,
	0x09, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x35, 0x92, 0x41, 0x2f, 0x4a, 0x26, 0x22, 0x37, 0x31, 0x33, 0x66, 0x36, 0x65, 0x39, 0x31,
	0x2d, 0x33, 0x38, 0x33, 0x31, 0x2d, 0x34, 0x34, 0x32, 0x31, 0x2d, 0x61, 0x37, 0x32, 0x30, 0x2d,
	0x31, 0x63, 0x38, 0x30, 0x38, 0x34, 0x64, 0x31, 0x30, 0x35, 0x32, 0x35, 0x22, 0xa2, 0x02, 0x04,
	0x75, 0x75, 0x69, 0x64, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x49,
	0x64, 0x12, 0x43, 0x0a, 0x06, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x2e,
	0x76, 0x32, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x06,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x6b, 0x0a, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x23, 0x92, 0x41, 0x20, 0x3a, 0x09, 0x75,
	0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x4a, 0x13, 0x7b, 0x20, 0x22, 0x65, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x22, 0x3a, 0x20, 0x74, 0x72, 0x75, 0x65, 0x20, 0x7d, 0x48, 0x00, 0x52,
	0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x88, 0x01, 0x01, 0x12, 0x5f, 0x0a, 0x16, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x61,
	0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x65, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6c, 0x61, 0x79, 0x6f, 0x75,
	0x74, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x6e, 0x69, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x48, 0x01, 0x52, 0x14, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64,
	0x65, 0x88, 0x01, 0x01, 0x1a, 0xce, 0x01, 0x0a, 0x09, 0x42, 0x61, 0x74, 0x63, 0x68, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x36, 0x0a, 0x06, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x2e, 0x76, 0x32, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x4c, 0x61, 0x79, 0x65, 0x72,
	0x48, 0x00, 0x52, 0x06, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x49, 0x44, 0x48, 0x00,
	0x52, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x41, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0xb9, 0x01, 0x0a, 0x0b, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x06, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6c, 0x61, 0x79,
	0x6f, 0x75, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x48, 0x00, 0x52,
	0x06, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6c,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x48,
	0x00, 0x52, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x06, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x00, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x22, 0xf1, 0x01, 0x0a, 0x0a, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x2f, 0x0a, 0x06, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x2e, 0x76,
	0x32, 0x2e, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x00, 0x52, 0x06, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x12, 0x2f, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x2e,
	0x76, 0x32, 0x2e, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x00, 0x52, 0x06, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x3d, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x12, 0x3a, 0x0a, 0x05, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x2e, 0x76,
	0x32, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x05, 0x62, 0x61, 0x74, 0x63, 0x68, 0x42, 0x06, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x7a, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x35,
	0x0a, 0x06, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x2e, 0x76, 0x32, 0x2e,
	0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x06, 0x6c,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x32, 0x0a, 0x05, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6c, 0x61, 0x79, 0x6f,
	0x75, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x05, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x2a, 0x5b, 0x0a, 0x0a, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1b, 0x0a, 0x17, 0x4c, 0x41, 0x59, 0x4f, 0x55, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15,
	0x4c, 0x41, 0x59, 0x4f, 0x55, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x43, 0x45, 0x4e,
	0x45, 0x4c, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x41, 0x59, 0x4f, 0x55,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x10, 0x02, 0x2a, 0x86,
	0x01, 0x0a, 0x14, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x22, 0x52, 0x45, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x5f, 0x41, 0x4e, 0x49, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x4f, 0x44,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x23, 0x0a, 0x1f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x41, 0x4e, 0x49, 0x4d, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4c, 0x4c,
	0x45, 0x4c, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f,
	0x41, 0x4e, 0x49, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x53,
	0x45, 0x52, 0x49, 0x45, 0x53, 0x10, 0x02, 0x2a, 0x99, 0x01, 0x0a, 0x0c, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54,
	0x45, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x55, 0x42,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x19,
	0x0a, 0x15, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x41, 0x54, 0x43,
	0x48, 0x10, 0x04, 0x2a, 0x54, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1a, 0x0a, 0x16, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x41, 0x59, 0x4f, 0x55,
	0x54, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x10, 0x02, 0x32, 0xe2, 0x07, 0x0a, 0x0c, 0x4c, 0x61,
	0x79, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x9e, 0x01, 0x0a, 0x0a, 0x4c,
	0x69, 0x73, 0x74, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c,
	0x61, 0x79, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x49, 0x92, 0x41, 0x1b, 0x4a, 0x19, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x12, 0x0a, 0x10,
	0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x62, 0x06, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x1b,
	0x2f, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x2f, 0x7b, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x92, 0x01, 0x0a, 0x0b,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x22, 0x2e, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x15, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x2e, 0x76, 0x32,
	0x2e, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x22, 0x48, 0x92, 0x41, 0x1b, 0x4a, 0x19, 0x0a, 0x03, 0x34,
	0x30, 0x34, 0x12, 0x12, 0x0a, 0x10, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x20, 0x6e, 0x6f, 0x74,
	0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x3a, 0x05, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x22, 0x1b, 0x2f, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x2f, 0x7b, 0x6c,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73,
	0x12, 0x99, 0x01, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x1f, 0x2e,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x47,
	0x65, 0x74, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15,
	0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x2e, 0x76, 0x32, 0x2e,
	0x4c, 0x61, 0x79, 0x65, 0x72, 0x22, 0x55, 0x92, 0x41, 0x24, 0x4a, 0x22, 0x0a, 0x03, 0x34, 0x30,
	0x34, 0x12, 0x1b, 0x0a, 0x19, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x20, 0x6f, 0x72, 0x20, 0x4c, 0x61,
	0x79, 0x6f, 0x75, 0x74, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x28, 0x12, 0x26, 0x2f, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x2f, 0x7b,
	0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x73, 0x2f, 0x7b, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xa6, 0x01, 0x0a,
	0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x22, 0x2e, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x2e, 0x76,
	0x32, 0x2e, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x22, 0x5c, 0x92, 0x41, 0x24, 0x4a, 0x22, 0x0a, 0x03,
	0x34, 0x30, 0x34, 0x12, 0x1b, 0x0a, 0x19, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x20, 0x6f, 0x72, 0x20,
	0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x3a, 0x05, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x32, 0x26, 0x2f,
	0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x2f, 0x7b, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xb6, 0x01, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6c, 0x61, 0x79,
	0x6f, 0x75, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x61, 0x79,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5e,
	0x92, 0x41, 0x24, 0x4a, 0x22, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x1b, 0x0a, 0x19, 0x4c, 0x61,
	0x79, 0x65, 0x72, 0x20, 0x6f, 0x72, 0x20, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x20, 0x6e, 0x6f,
	0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x3a, 0x07, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2a, 0x26, 0x2f, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73,
	0x2f, 0x7b, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x73, 0x2f, 0x7b, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x9d,
	0x01, 0x0a, 0x05, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4c,
	0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x4d, 0x92, 0x41, 0x1b, 0x4a, 0x19, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x12, 0x0a, 0x10, 0x4c,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x29, 0x3a, 0x01, 0x2a, 0x62, 0x01, 0x2a, 0x22, 0x21, 0x2f, 0x6c, 0x61,
	0x79, 0x6f, 0x75, 0x74, 0x73, 0x2f, 0x7b, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x32, 0x97,
	0x05, 0x0a, 0x0d, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x71, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x12,
	0x22, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x2e, 0x76, 0x32,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6c, 0x61, 0x79, 0x6f, 0x75,
	0x74, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13,
	0x62, 0x07, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x12, 0x08, 0x2f, 0x6c, 0x61, 0x79, 0x6f,
	0x75, 0x74, 0x73, 0x12, 0x65, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x79,
	0x6f, 0x75, 0x74, 0x12, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6c, 0x61, 0x79, 0x6f, 0x75,
	0x74, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x79, 0x6f, 0x75,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x3a, 0x06, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x22, 0x08, 0x2f, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x12, 0x81, 0x01, 0x0a, 0x09, 0x47,
	0x65, 0x74, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x79,
	0x6f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x61, 0x79, 0x6f,
	0x75, 0x74, 0x22, 0x3a, 0x92, 0x41, 0x1b, 0x4a, 0x19, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x12,
	0x0a, 0x10, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75,
	0x6e, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f, 0x6c, 0x61, 0x79, 0x6f, 0x75,
	0x74, 0x73, 0x2f, 0x7b, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x8f,
	0x01, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12,
	0x23, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x2e, 0x76, 0x32,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6c, 0x61, 0x79, 0x6f,
	0x75, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x22, 0x42, 0x92, 0x41,
	0x1b, 0x4a, 0x19, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x12, 0x0a, 0x10, 0x4c, 0x61, 0x79, 0x6f,
	0x75, 0x74, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1e, 0x3a, 0x06, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x32, 0x14, 0x2f, 0x6c, 0x61, 0x79,
	0x6f, 0x75, 0x74, 0x73, 0x2f, 0x7b, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x7d,
	0x12, 0x95, 0x01, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x61, 0x79, 0x6f, 0x75,
	0x74, 0x12, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x2e,
	0x76, 0x32, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6c, 0x61,
	0x79, 0x6f, 0x75, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x61,
	0x79, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3a, 0x92, 0x41,
	0x1b, 0x4a, 0x19, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x12, 0x0a, 0x10, 0x4c, 0x61, 0x79, 0x6f,
	0x75, 0x74, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x16, 0x2a, 0x14, 0x2f, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x2f, 0x7b, 0x6c, 0x61,
	0x79, 0x6f, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x42, 0xa0, 0x02, 0x92, 0x41, 0x57, 0x12, 0x11,
	0x0a, 0x0a, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x20, 0x41, 0x50, 0x49, 0x32, 0x03, 0x32, 0x2e,
	0x30, 0x1a, 0x0f, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x22, 0x0a, 0x2f, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x2f, 0x76, 0x32, 0x2a, 0x01,
	0x02, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a,
	0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x2e, 0x76, 0x32, 0x42, 0x08, 0x41, 0x70, 0x69, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x67, 0x6f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2f,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x67,
	0x6f, 0x2f, 0x73, 0x64, 0x6b, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x73,
	0x2f, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x2f, 0x76, 0x32, 0x3b, 0x6c, 0x61, 0x79, 0x6f, 0x75,
	0x74, 0x76, 0x32, 0xa2, 0x02, 0x03, 0x41, 0x4c, 0x58, 0xaa, 0x02, 0x0e, 0x41, 0x70, 0x69, 0x73,
	0x2e, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x2e, 0x56, 0x32, 0xca, 0x02, 0x0e, 0x41, 0x70, 0x69,
	0x73, 0x5c, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5c, 0x56, 0x32, 0xe2, 0x02, 0x1a, 0x41, 0x70,
	0x69, 0x73, 0x5c, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5c, 0x56, 0x32, 0x5c, 0x47, 0x50, 0x42,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x10, 0x41, 0x70, 0x69, 0x73, 0x3a,
	0x3a, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x3a, 0x3a, 0x56, 0x32, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_apis_layout_v2_api_proto_rawDescOnce sync.Once
	file_apis_layout_v2_api_proto_rawDescData = file_apis_layout_v2_api_proto_rawDesc
)

func file_apis_layout_v2_api_proto_rawDescGZIP() []byte {
	file_apis_layout_v2_api_proto_rawDescOnce.Do(func() {
		file_apis_layout_v2_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_apis_layout_v2_api_proto_rawDescData)
	})
	return file_apis_layout_v2_api_proto_rawDescData
}

var file_apis_layout_v2_api_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_apis_layout_v2_api_proto_msgTypes = make([]protoimpl.MessageInfo, 38)
var file_apis_layout_v2_api_proto_goTypes = []interface{}{
	(LayoutType)(0),                           // 0: apis.layout.v2.LayoutType
	(RequestAnimationMode)(0),                 // 1: apis.layout.v2.RequestAnimationMode
	(EventSubType)(0),                         // 2: apis.layout.v2.EventSubType
	(EventType)(0),                            // 3: apis.layout.v2.EventType
	(Transition_TransitionDirection)(0),       // 4: apis.layout.v2.Transition.TransitionDirection
	(Transition_TransitionSwipeType)(0),       // 5: apis.layout.v2.Transition.TransitionSwipeType
	(*Transition)(nil),                        // 6: apis.layout.v2.Transition
	(*Layout)(nil),                            // 7: apis.layout.v2.Layout
	(*Layer)(nil),                             // 8: apis.layout.v2.Layer
	(*DeleteLayerRequest)(nil),                // 9: apis.layout.v2.DeleteLayerRequest
	(*DeleteLayerResponse)(nil),               // 10: apis.layout.v2.DeleteLayerResponse
	(*BatchLayerResponse)(nil),                // 11: apis.layout.v2.BatchLayerResponse
	(*PartialLayout)(nil),                     // 12: apis.layout.v2.PartialLayout
	(*ListLayoutsRequest)(nil),                // 13: apis.layout.v2.ListLayoutsRequest
	(*ListLayoutsResponse)(nil),               // 14: apis.layout.v2.ListLayoutsResponse
	(*CreateLayoutRequest)(nil),               // 15: apis.layout.v2.CreateLayoutRequest
	(*GetLayoutRequest)(nil),                  // 16: apis.layout.v2.GetLayoutRequest
	(*UpdateLayoutRequest)(nil),               // 17: apis.layout.v2.UpdateLayoutRequest
	(*DeleteLayoutPayload)(nil),               // 18: apis.layout.v2.DeleteLayoutPayload
	(*DeleteLayoutRequest)(nil),               // 19: apis.layout.v2.DeleteLayoutRequest
	(*DeleteLayoutResponse)(nil),              // 20: apis.layout.v2.DeleteLayoutResponse
	(*LayerAnimation)(nil),                    // 21: apis.layout.v2.LayerAnimation
	(*PartialLayer)(nil),                      // 22: apis.layout.v2.PartialLayer
	(*PartialLayerWithID)(nil),                // 23: apis.layout.v2.PartialLayerWithID
	(*ListLayersRequest)(nil),                 // 24: apis.layout.v2.ListLayersRequest
	(*ListLayersResponse)(nil),                // 25: apis.layout.v2.ListLayersResponse
	(*CreateLayerRequest)(nil),                // 26: apis.layout.v2.CreateLayerRequest
	(*GetLayerRequest)(nil),                   // 27: apis.layout.v2.GetLayerRequest
	(*UpdateLayerRequest)(nil),                // 28: apis.layout.v2.UpdateLayerRequest
	(*DeleteLayerPayload)(nil),                // 29: apis.layout.v2.DeleteLayerPayload
	(*BatchDeleteLayerRequest)(nil),           // 30: apis.layout.v2.BatchDeleteLayerRequest
	(*BatchLayerRequest)(nil),                 // 31: apis.layout.v2.BatchLayerRequest
	(*LayoutEvent)(nil),                       // 32: apis.layout.v2.LayoutEvent
	(*LayerEvent)(nil),                        // 33: apis.layout.v2.LayerEvent
	(*Event)(nil),                             // 34: apis.layout.v2.Event
	(*Transition_TransitionMediaType)(nil),    // 35: apis.layout.v2.Transition.TransitionMediaType
	(*Transition_TransitionCut)(nil),          // 36: apis.layout.v2.Transition.TransitionCut
	(*Transition_TransitionFadeToColor)(nil),  // 37: apis.layout.v2.Transition.TransitionFadeToColor
	(*Transition_TransitionCrossfade)(nil),    // 38: apis.layout.v2.Transition.TransitionCrossfade
	(*Transition_TransitionSwipe)(nil),        // 39: apis.layout.v2.Transition.TransitionSwipe
	(*Transition_TransitionStingerCut)(nil),   // 40: apis.layout.v2.Transition.TransitionStingerCut
	(*Transition_TransitionStinger)(nil),      // 41: apis.layout.v2.Transition.TransitionStinger
	(*BatchLayerResponse_BatchLayerItem)(nil), // 42: apis.layout.v2.BatchLayerResponse.BatchLayerItem
	(*BatchLayerRequest_BatchItem)(nil),       // 43: apis.layout.v2.BatchLayerRequest.BatchItem
	(*structpb.Value)(nil),                    // 44: google.protobuf.Value
	(*structpb.Struct)(nil),                   // 45: google.protobuf.Struct
	(*structpb.ListValue)(nil),                // 46: google.protobuf.ListValue
}
var file_apis_layout_v2_api_proto_depIdxs = []int32{
	36, // 0: apis.layout.v2.Transition.cut:type_name -> apis.layout.v2.Transition.TransitionCut
	38, // 1: apis.layout.v2.Transition.crossfade:type_name -> apis.layout.v2.Transition.TransitionCrossfade
	37, // 2: apis.layout.v2.Transition.fade_to_color:type_name -> apis.layout.v2.Transition.TransitionFadeToColor
	39, // 3: apis.layout.v2.Transition.swipe:type_name -> apis.layout.v2.Transition.TransitionSwipe
	41, // 4: apis.layout.v2.Transition.stinger:type_name -> apis.layout.v2.Transition.TransitionStinger
	44, // 5: apis.layout.v2.Layout.metadata:type_name -> google.protobuf.Value
	0,  // 6: apis.layout.v2.Layout.type:type_name -> apis.layout.v2.LayoutType
	6,  // 7: apis.layout.v2.Layout.transitions:type_name -> apis.layout.v2.Transition
	44, // 8: apis.layout.v2.Layout.request_metadata:type_name -> google.protobuf.Value
	45, // 9: apis.layout.v2.Layer.data:type_name -> google.protobuf.Struct
	44, // 10: apis.layout.v2.Layer.x:type_name -> google.protobuf.Value
	44, // 11: apis.layout.v2.Layer.y:type_name -> google.protobuf.Value
	44, // 12: apis.layout.v2.Layer.width:type_name -> google.protobuf.Value
	44, // 13: apis.layout.v2.Layer.height:type_name -> google.protobuf.Value
	46, // 14: apis.layout.v2.Layer.children:type_name -> google.protobuf.ListValue
	44, // 15: apis.layout.v2.Layer.metadata:type_name -> google.protobuf.Value
	44, // 16: apis.layout.v2.Layer.request_metadata:type_name -> google.protobuf.Value
	21, // 17: apis.layout.v2.Layer.request_animation:type_name -> apis.layout.v2.LayerAnimation
	29, // 18: apis.layout.v2.DeleteLayerRequest.payload:type_name -> apis.layout.v2.DeleteLayerPayload
	44, // 19: apis.layout.v2.DeleteLayerResponse.request_metadata:type_name -> google.protobuf.Value
	42, // 20: apis.layout.v2.BatchLayerResponse.layers:type_name -> apis.layout.v2.BatchLayerResponse.BatchLayerItem
	44, // 21: apis.layout.v2.BatchLayerResponse.request_metadata:type_name -> google.protobuf.Value
	1,  // 22: apis.layout.v2.BatchLayerResponse.request_animation_mode:type_name -> apis.layout.v2.RequestAnimationMode
	44, // 23: apis.layout.v2.PartialLayout.metadata:type_name -> google.protobuf.Value
	0,  // 24: apis.layout.v2.PartialLayout.type:type_name -> apis.layout.v2.LayoutType
	6,  // 25: apis.layout.v2.PartialLayout.transitions:type_name -> apis.layout.v2.Transition
	44, // 26: apis.layout.v2.PartialLayout.request_metadata:type_name -> google.protobuf.Value
	0,  // 27: apis.layout.v2.ListLayoutsRequest.type:type_name -> apis.layout.v2.LayoutType
	7,  // 28: apis.layout.v2.ListLayoutsResponse.layouts:type_name -> apis.layout.v2.Layout
	12, // 29: apis.layout.v2.CreateLayoutRequest.layout:type_name -> apis.layout.v2.PartialLayout
	12, // 30: apis.layout.v2.UpdateLayoutRequest.layout:type_name -> apis.layout.v2.PartialLayout
	44, // 31: apis.layout.v2.DeleteLayoutPayload.request_metadata:type_name -> google.protobuf.Value
	18, // 32: apis.layout.v2.DeleteLayoutRequest.payload:type_name -> apis.layout.v2.DeleteLayoutPayload
	44, // 33: apis.layout.v2.DeleteLayoutResponse.request_metadata:type_name -> google.protobuf.Value
	45, // 34: apis.layout.v2.PartialLayer.data:type_name -> google.protobuf.Struct
	44, // 35: apis.layout.v2.PartialLayer.x:type_name -> google.protobuf.Value
	44, // 36: apis.layout.v2.PartialLayer.y:type_name -> google.protobuf.Value
	44, // 37: apis.layout.v2.PartialLayer.width:type_name -> google.protobuf.Value
	44, // 38: apis.layout.v2.PartialLayer.height:type_name -> google.protobuf.Value
	46, // 39: apis.layout.v2.PartialLayer.children:type_name -> google.protobuf.ListValue
	44, // 40: apis.layout.v2.PartialLayer.metadata:type_name -> google.protobuf.Value
	44, // 41: apis.layout.v2.PartialLayer.request_metadata:type_name -> google.protobuf.Value
	21, // 42: apis.layout.v2.PartialLayer.request_animation:type_name -> apis.layout.v2.LayerAnimation
	45, // 43: apis.layout.v2.PartialLayerWithID.data:type_name -> google.protobuf.Struct
	44, // 44: apis.layout.v2.PartialLayerWithID.x:type_name -> google.protobuf.Value
	44, // 45: apis.layout.v2.PartialLayerWithID.y:type_name -> google.protobuf.Value
	44, // 46: apis.layout.v2.PartialLayerWithID.width:type_name -> google.protobuf.Value
	44, // 47: apis.layout.v2.PartialLayerWithID.height:type_name -> google.protobuf.Value
	46, // 48: apis.layout.v2.PartialLayerWithID.children:type_name -> google.protobuf.ListValue
	44, // 49: apis.layout.v2.PartialLayerWithID.metadata:type_name -> google.protobuf.Value
	44, // 50: apis.layout.v2.PartialLayerWithID.request_metadata:type_name -> google.protobuf.Value
	21, // 51: apis.layout.v2.PartialLayerWithID.request_animation:type_name -> apis.layout.v2.LayerAnimation
	8,  // 52: apis.layout.v2.ListLayersResponse.layers:type_name -> apis.layout.v2.Layer
	22, // 53: apis.layout.v2.CreateLayerRequest.layer:type_name -> apis.layout.v2.PartialLayer
	22, // 54: apis.layout.v2.UpdateLayerRequest.layer:type_name -> apis.layout.v2.PartialLayer
	44, // 55: apis.layout.v2.DeleteLayerPayload.request_metadata:type_name -> google.protobuf.Value
	44, // 56: apis.layout.v2.BatchDeleteLayerRequest.request_metadata:type_name -> google.protobuf.Value
	43, // 57: apis.layout.v2.BatchLayerRequest.layers:type_name -> apis.layout.v2.BatchLayerRequest.BatchItem
	44, // 58: apis.layout.v2.BatchLayerRequest.request_metadata:type_name -> google.protobuf.Value
	1,  // 59: apis.layout.v2.BatchLayerRequest.request_animation_mode:type_name -> apis.layout.v2.RequestAnimationMode
	7,  // 60: apis.layout.v2.LayoutEvent.create:type_name -> apis.layout.v2.Layout
	7,  // 61: apis.layout.v2.LayoutEvent.update:type_name -> apis.layout.v2.Layout
	20, // 62: apis.layout.v2.LayoutEvent.delete:type_name -> apis.layout.v2.DeleteLayoutResponse
	8,  // 63: apis.layout.v2.LayerEvent.create:type_name -> apis.layout.v2.Layer
	8,  // 64: apis.layout.v2.LayerEvent.update:type_name -> apis.layout.v2.Layer
	10, // 65: apis.layout.v2.LayerEvent.delete:type_name -> apis.layout.v2.DeleteLayerResponse
	11, // 66: apis.layout.v2.LayerEvent.batch:type_name -> apis.layout.v2.BatchLayerResponse
	32, // 67: apis.layout.v2.Event.layout:type_name -> apis.layout.v2.LayoutEvent
	33, // 68: apis.layout.v2.Event.layer:type_name -> apis.layout.v2.LayerEvent
	4,  // 69: apis.layout.v2.Transition.TransitionSwipe.direction:type_name -> apis.layout.v2.Transition.TransitionDirection
	5,  // 70: apis.layout.v2.Transition.TransitionSwipe.combined_animation:type_name -> apis.layout.v2.Transition.TransitionSwipeType
	35, // 71: apis.layout.v2.Transition.TransitionStingerCut.media:type_name -> apis.layout.v2.Transition.TransitionMediaType
	40, // 72: apis.layout.v2.Transition.TransitionStinger.cut:type_name -> apis.layout.v2.Transition.TransitionStingerCut
	8,  // 73: apis.layout.v2.BatchLayerResponse.BatchLayerItem.create:type_name -> apis.layout.v2.Layer
	8,  // 74: apis.layout.v2.BatchLayerResponse.BatchLayerItem.update:type_name -> apis.layout.v2.Layer
	10, // 75: apis.layout.v2.BatchLayerResponse.BatchLayerItem.delete:type_name -> apis.layout.v2.DeleteLayerResponse
	22, // 76: apis.layout.v2.BatchLayerRequest.BatchItem.create:type_name -> apis.layout.v2.PartialLayer
	23, // 77: apis.layout.v2.BatchLayerRequest.BatchItem.update:type_name -> apis.layout.v2.PartialLayerWithID
	30, // 78: apis.layout.v2.BatchLayerRequest.BatchItem.delete:type_name -> apis.layout.v2.BatchDeleteLayerRequest
	24, // 79: apis.layout.v2.LayerService.ListLayers:input_type -> apis.layout.v2.ListLayersRequest
	26, // 80: apis.layout.v2.LayerService.CreateLayer:input_type -> apis.layout.v2.CreateLayerRequest
	27, // 81: apis.layout.v2.LayerService.GetLayer:input_type -> apis.layout.v2.GetLayerRequest
	28, // 82: apis.layout.v2.LayerService.UpdateLayer:input_type -> apis.layout.v2.UpdateLayerRequest
	9,  // 83: apis.layout.v2.LayerService.DeleteLayer:input_type -> apis.layout.v2.DeleteLayerRequest
	31, // 84: apis.layout.v2.LayerService.Batch:input_type -> apis.layout.v2.BatchLayerRequest
	13, // 85: apis.layout.v2.LayoutService.ListLayouts:input_type -> apis.layout.v2.ListLayoutsRequest
	15, // 86: apis.layout.v2.LayoutService.CreateLayout:input_type -> apis.layout.v2.CreateLayoutRequest
	16, // 87: apis.layout.v2.LayoutService.GetLayout:input_type -> apis.layout.v2.GetLayoutRequest
	17, // 88: apis.layout.v2.LayoutService.UpdateLayout:input_type -> apis.layout.v2.UpdateLayoutRequest
	19, // 89: apis.layout.v2.LayoutService.DeleteLayout:input_type -> apis.layout.v2.DeleteLayoutRequest
	25, // 90: apis.layout.v2.LayerService.ListLayers:output_type -> apis.layout.v2.ListLayersResponse
	8,  // 91: apis.layout.v2.LayerService.CreateLayer:output_type -> apis.layout.v2.Layer
	8,  // 92: apis.layout.v2.LayerService.GetLayer:output_type -> apis.layout.v2.Layer
	8,  // 93: apis.layout.v2.LayerService.UpdateLayer:output_type -> apis.layout.v2.Layer
	10, // 94: apis.layout.v2.LayerService.DeleteLayer:output_type -> apis.layout.v2.DeleteLayerResponse
	11, // 95: apis.layout.v2.LayerService.Batch:output_type -> apis.layout.v2.BatchLayerResponse
	14, // 96: apis.layout.v2.LayoutService.ListLayouts:output_type -> apis.layout.v2.ListLayoutsResponse
	7,  // 97: apis.layout.v2.LayoutService.CreateLayout:output_type -> apis.layout.v2.Layout
	7,  // 98: apis.layout.v2.LayoutService.GetLayout:output_type -> apis.layout.v2.Layout
	7,  // 99: apis.layout.v2.LayoutService.UpdateLayout:output_type -> apis.layout.v2.Layout
	20, // 100: apis.layout.v2.LayoutService.DeleteLayout:output_type -> apis.layout.v2.DeleteLayoutResponse
	90, // [90:101] is the sub-list for method output_type
	79, // [79:90] is the sub-list for method input_type
	79, // [79:79] is the sub-list for extension type_name
	79, // [79:79] is the sub-list for extension extendee
	0,  // [0:79] is the sub-list for field type_name
}

func init() { file_apis_layout_v2_api_proto_init() }
func file_apis_layout_v2_api_proto_init() {
	if File_apis_layout_v2_api_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_apis_layout_v2_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_layout_v2_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Layout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_layout_v2_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Layer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_layout_v2_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteLayerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_layout_v2_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteLayerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_layout_v2_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchLayerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_layout_v2_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartialLayout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_layout_v2_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLayoutsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_layout_v2_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLayoutsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_layout_v2_api_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateLayoutRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_layout_v2_api_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLayoutRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_layout_v2_api_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateLayoutRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_layout_v2_api_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteLayoutPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_layout_v2_api_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteLayoutRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_layout_v2_api_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteLayoutResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_layout_v2_api_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LayerAnimation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_layout_v2_api_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartialLayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_layout_v2_api_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartialLayerWithID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_layout_v2_api_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLayersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_layout_v2_api_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLayersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_layout_v2_api_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateLayerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_layout_v2_api_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLayerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_layout_v2_api_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateLayerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_layout_v2_api_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteLayerPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_layout_v2_api_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchDeleteLayerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_layout_v2_api_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchLayerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_layout_v2_api_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LayoutEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_layout_v2_api_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LayerEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_layout_v2_api_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_layout_v2_api_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transition_TransitionMediaType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_layout_v2_api_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transition_TransitionCut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_layout_v2_api_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transition_TransitionFadeToColor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_layout_v2_api_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transition_TransitionCrossfade); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_layout_v2_api_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transition_TransitionSwipe); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_layout_v2_api_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transition_TransitionStingerCut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_layout_v2_api_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transition_TransitionStinger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_layout_v2_api_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchLayerResponse_BatchLayerItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_layout_v2_api_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchLayerRequest_BatchItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_apis_layout_v2_api_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Transition_Cut)(nil),
		(*Transition_Crossfade)(nil),
		(*Transition_FadeToColor)(nil),
		(*Transition_Swipe)(nil),
		(*Transition_Stinger)(nil),
	}
	file_apis_layout_v2_api_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_apis_layout_v2_api_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_apis_layout_v2_api_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_apis_layout_v2_api_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_apis_layout_v2_api_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_apis_layout_v2_api_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_apis_layout_v2_api_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_apis_layout_v2_api_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_apis_layout_v2_api_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_apis_layout_v2_api_proto_msgTypes[14].OneofWrappers = []interface{}{}
	file_apis_layout_v2_api_proto_msgTypes[15].OneofWrappers = []interface{}{}
	file_apis_layout_v2_api_proto_msgTypes[16].OneofWrappers = []interface{}{}
	file_apis_layout_v2_api_proto_msgTypes[17].OneofWrappers = []interface{}{}
	file_apis_layout_v2_api_proto_msgTypes[23].OneofWrappers = []interface{}{}
	file_apis_layout_v2_api_proto_msgTypes[24].OneofWrappers = []interface{}{}
	file_apis_layout_v2_api_proto_msgTypes[25].OneofWrappers = []interface{}{}
	file_apis_layout_v2_api_proto_msgTypes[26].OneofWrappers = []interface{}{
		(*LayoutEvent_Create)(nil),
		(*LayoutEvent_Update)(nil),
		(*LayoutEvent_Delete)(nil),
	}
	file_apis_layout_v2_api_proto_msgTypes[27].OneofWrappers = []interface{}{
		(*LayerEvent_Create)(nil),
		(*LayerEvent_Update)(nil),
		(*LayerEvent_Delete)(nil),
		(*LayerEvent_Batch)(nil),
	}
	file_apis_layout_v2_api_proto_msgTypes[28].OneofWrappers = []interface{}{
		(*Event_Layout)(nil),
		(*Event_Layer)(nil),
	}
	file_apis_layout_v2_api_proto_msgTypes[35].OneofWrappers = []interface{}{
		(*Transition_TransitionStinger_Cut)(nil),
	}
	file_apis_layout_v2_api_proto_msgTypes[36].OneofWrappers = []interface{}{
		(*BatchLayerResponse_BatchLayerItem_Create)(nil),
		(*BatchLayerResponse_BatchLayerItem_Update)(nil),
		(*BatchLayerResponse_BatchLayerItem_Delete)(nil),
	}
	file_apis_layout_v2_api_proto_msgTypes[37].OneofWrappers = []interface{}{
		(*BatchLayerRequest_BatchItem_Create)(nil),
		(*BatchLayerRequest_BatchItem_Update)(nil),
		(*BatchLayerRequest_BatchItem_Delete)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_apis_layout_v2_api_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   38,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_apis_layout_v2_api_proto_goTypes,
		DependencyIndexes: file_apis_layout_v2_api_proto_depIdxs,
		EnumInfos:         file_apis_layout_v2_api_proto_enumTypes,
		MessageInfos:      file_apis_layout_v2_api_proto_msgTypes,
	}.Build()
	File_apis_layout_v2_api_proto = out.File
	file_apis_layout_v2_api_proto_rawDesc = nil
	file_apis_layout_v2_api_proto_goTypes = nil
	file_apis_layout_v2_api_proto_depIdxs = nil
}
