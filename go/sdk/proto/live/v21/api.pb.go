/*
---------------------------------------------------------------------------------------------
Copyright (c) Infiniscene, Inc. All rights reserved.
Licensed under the MIT License. See License.txt in the project root for license information.
---------------------------------------------------------------------------------------------
*/
// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        (unknown)
// source: live/v21/api.proto

// API.stream Live API
//
// The Live API enables developers to build video-enabled applications.

package livev21

import (
	_ "github.com/golightstream/api.stream-sdk/go/sdk/proto/common/v21"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BroadcastOrigin int32

const (
	BroadcastOrigin_BROADCAST_ORIGIN_UNSPECIFIED BroadcastOrigin = 0
	// broadcast was actioned by an API request
	BroadcastOrigin_BROADCAST_ORIGIN_API BroadcastOrigin = 1
	// broadcast was actioned by a source trigger
	BroadcastOrigin_BROADCAST_ORIGIN_SOURCE BroadcastOrigin = 2
	// broadcast was actioned by an external integration with API.stream. This use is reserved for specific integrations only.
	BroadcastOrigin_BROADCAST_ORIGIN_EXTERNAL BroadcastOrigin = 3
	// broadcast was actioned by an unclassified decision within the platform
	BroadcastOrigin_BROADCAST_ORIGIN_SYSTEM BroadcastOrigin = 4
)

// Enum value maps for BroadcastOrigin.
var (
	BroadcastOrigin_name = map[int32]string{
		0: "BROADCAST_ORIGIN_UNSPECIFIED",
		1: "BROADCAST_ORIGIN_API",
		2: "BROADCAST_ORIGIN_SOURCE",
		3: "BROADCAST_ORIGIN_EXTERNAL",
		4: "BROADCAST_ORIGIN_SYSTEM",
	}
	BroadcastOrigin_value = map[string]int32{
		"BROADCAST_ORIGIN_UNSPECIFIED": 0,
		"BROADCAST_ORIGIN_API":         1,
		"BROADCAST_ORIGIN_SOURCE":      2,
		"BROADCAST_ORIGIN_EXTERNAL":    3,
		"BROADCAST_ORIGIN_SYSTEM":      4,
	}
)

func (x BroadcastOrigin) Enum() *BroadcastOrigin {
	p := new(BroadcastOrigin)
	*p = x
	return p
}

func (x BroadcastOrigin) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BroadcastOrigin) Descriptor() protoreflect.EnumDescriptor {
	return file_live_v21_api_proto_enumTypes[0].Descriptor()
}

func (BroadcastOrigin) Type() protoreflect.EnumType {
	return &file_live_v21_api_proto_enumTypes[0]
}

func (x BroadcastOrigin) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BroadcastOrigin.Descriptor instead.
func (BroadcastOrigin) EnumDescriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{0}
}

type WebhookType int32

const (
	WebhookType_WEBHOOK_TYPE_UNSPECIFIED WebhookType = 0
	WebhookType_WEBHOOK_TYPE_HOOK        WebhookType = 1
	WebhookType_WEBHOOK_TYPE_EVENT       WebhookType = 2
)

// Enum value maps for WebhookType.
var (
	WebhookType_name = map[int32]string{
		0: "WEBHOOK_TYPE_UNSPECIFIED",
		1: "WEBHOOK_TYPE_HOOK",
		2: "WEBHOOK_TYPE_EVENT",
	}
	WebhookType_value = map[string]int32{
		"WEBHOOK_TYPE_UNSPECIFIED": 0,
		"WEBHOOK_TYPE_HOOK":        1,
		"WEBHOOK_TYPE_EVENT":       2,
	}
)

func (x WebhookType) Enum() *WebhookType {
	p := new(WebhookType)
	*p = x
	return p
}

func (x WebhookType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WebhookType) Descriptor() protoreflect.EnumDescriptor {
	return file_live_v21_api_proto_enumTypes[1].Descriptor()
}

func (WebhookType) Type() protoreflect.EnumType {
	return &file_live_v21_api_proto_enumTypes[1]
}

func (x WebhookType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WebhookType.Descriptor instead.
func (WebhookType) EnumDescriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{1}
}

type WebhookSubtype int32

const (
	WebhookSubtype_WEBHOOK_SUBTYPE_UNSPECIFIED     WebhookSubtype = 0
	WebhookSubtype_WEBHOOK_SUBTYPE_START_BROADCAST WebhookSubtype = 1
	WebhookSubtype_WEBHOOK_SUBTYPE_START_WEBRTC    WebhookSubtype = 2
	WebhookSubtype_WEBHOOK_SUBTYPE_JOIN_WEBRTC     WebhookSubtype = 3
)

// Enum value maps for WebhookSubtype.
var (
	WebhookSubtype_name = map[int32]string{
		0: "WEBHOOK_SUBTYPE_UNSPECIFIED",
		1: "WEBHOOK_SUBTYPE_START_BROADCAST",
		2: "WEBHOOK_SUBTYPE_START_WEBRTC",
		3: "WEBHOOK_SUBTYPE_JOIN_WEBRTC",
	}
	WebhookSubtype_value = map[string]int32{
		"WEBHOOK_SUBTYPE_UNSPECIFIED":     0,
		"WEBHOOK_SUBTYPE_START_BROADCAST": 1,
		"WEBHOOK_SUBTYPE_START_WEBRTC":    2,
		"WEBHOOK_SUBTYPE_JOIN_WEBRTC":     3,
	}
)

func (x WebhookSubtype) Enum() *WebhookSubtype {
	p := new(WebhookSubtype)
	*p = x
	return p
}

func (x WebhookSubtype) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WebhookSubtype) Descriptor() protoreflect.EnumDescriptor {
	return file_live_v21_api_proto_enumTypes[2].Descriptor()
}

func (WebhookSubtype) Type() protoreflect.EnumType {
	return &file_live_v21_api_proto_enumTypes[2]
}

func (x WebhookSubtype) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WebhookSubtype.Descriptor instead.
func (WebhookSubtype) EnumDescriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{2}
}

// image binary format
type ImageFormat int32

const (
	ImageFormat_IMAGE_FORMAT_UNSPECIFIED ImageFormat = 0
	ImageFormat_IMAGE_FORMAT_JPEG        ImageFormat = 1
)

// Enum value maps for ImageFormat.
var (
	ImageFormat_name = map[int32]string{
		0: "IMAGE_FORMAT_UNSPECIFIED",
		1: "IMAGE_FORMAT_JPEG",
	}
	ImageFormat_value = map[string]int32{
		"IMAGE_FORMAT_UNSPECIFIED": 0,
		"IMAGE_FORMAT_JPEG":        1,
	}
)

func (x ImageFormat) Enum() *ImageFormat {
	p := new(ImageFormat)
	*p = x
	return p
}

func (x ImageFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ImageFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_live_v21_api_proto_enumTypes[3].Descriptor()
}

func (ImageFormat) Type() protoreflect.EnumType {
	return &file_live_v21_api_proto_enumTypes[3]
}

func (x ImageFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ImageFormat.Descriptor instead.
func (ImageFormat) EnumDescriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{3}
}

// rendering color space
type VideoColorSpace int32

const (
	VideoColorSpace_VIDEO_COLOR_SPACE_UNSPECIFIED VideoColorSpace = 0
	VideoColorSpace_VIDEO_COLOR_SPACE_YUV420      VideoColorSpace = 1
)

// Enum value maps for VideoColorSpace.
var (
	VideoColorSpace_name = map[int32]string{
		0: "VIDEO_COLOR_SPACE_UNSPECIFIED",
		1: "VIDEO_COLOR_SPACE_YUV420",
	}
	VideoColorSpace_value = map[string]int32{
		"VIDEO_COLOR_SPACE_UNSPECIFIED": 0,
		"VIDEO_COLOR_SPACE_YUV420":      1,
	}
)

func (x VideoColorSpace) Enum() *VideoColorSpace {
	p := new(VideoColorSpace)
	*p = x
	return p
}

func (x VideoColorSpace) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VideoColorSpace) Descriptor() protoreflect.EnumDescriptor {
	return file_live_v21_api_proto_enumTypes[4].Descriptor()
}

func (VideoColorSpace) Type() protoreflect.EnumType {
	return &file_live_v21_api_proto_enumTypes[4]
}

func (x VideoColorSpace) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VideoColorSpace.Descriptor instead.
func (VideoColorSpace) EnumDescriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{4}
}

// audio channel layout
type AudioChannelLayout int32

const (
	AudioChannelLayout_AUDIO_CHANNEL_LAYOUT_UNSPECIFIED AudioChannelLayout = 0
	AudioChannelLayout_AUDIO_CHANNEL_LAYOUT_STEREO      AudioChannelLayout = 1
)

// Enum value maps for AudioChannelLayout.
var (
	AudioChannelLayout_name = map[int32]string{
		0: "AUDIO_CHANNEL_LAYOUT_UNSPECIFIED",
		1: "AUDIO_CHANNEL_LAYOUT_STEREO",
	}
	AudioChannelLayout_value = map[string]int32{
		"AUDIO_CHANNEL_LAYOUT_UNSPECIFIED": 0,
		"AUDIO_CHANNEL_LAYOUT_STEREO":      1,
	}
)

func (x AudioChannelLayout) Enum() *AudioChannelLayout {
	p := new(AudioChannelLayout)
	*p = x
	return p
}

func (x AudioChannelLayout) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AudioChannelLayout) Descriptor() protoreflect.EnumDescriptor {
	return file_live_v21_api_proto_enumTypes[5].Descriptor()
}

func (AudioChannelLayout) Type() protoreflect.EnumType {
	return &file_live_v21_api_proto_enumTypes[5]
}

func (x AudioChannelLayout) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AudioChannelLayout.Descriptor instead.
func (AudioChannelLayout) EnumDescriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{5}
}

// rendering quality
type RenderingQuality int32

const (
	RenderingQuality_RENDERING_QUALITY_UNSPECIFIED RenderingQuality = 0
	RenderingQuality_RENDERING_QUALITY_STANDARD    RenderingQuality = 1
	RenderingQuality_RENDERING_QUALITY_HIGH        RenderingQuality = 2
)

// Enum value maps for RenderingQuality.
var (
	RenderingQuality_name = map[int32]string{
		0: "RENDERING_QUALITY_UNSPECIFIED",
		1: "RENDERING_QUALITY_STANDARD",
		2: "RENDERING_QUALITY_HIGH",
	}
	RenderingQuality_value = map[string]int32{
		"RENDERING_QUALITY_UNSPECIFIED": 0,
		"RENDERING_QUALITY_STANDARD":    1,
		"RENDERING_QUALITY_HIGH":        2,
	}
)

func (x RenderingQuality) Enum() *RenderingQuality {
	p := new(RenderingQuality)
	*p = x
	return p
}

func (x RenderingQuality) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RenderingQuality) Descriptor() protoreflect.EnumDescriptor {
	return file_live_v21_api_proto_enumTypes[6].Descriptor()
}

func (RenderingQuality) Type() protoreflect.EnumType {
	return &file_live_v21_api_proto_enumTypes[6]
}

func (x RenderingQuality) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RenderingQuality.Descriptor instead.
func (RenderingQuality) EnumDescriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{6}
}

// video encoding codec
type VideoCodec int32

const (
	VideoCodec_VIDEO_CODEC_UNSPECIFIED VideoCodec = 0
	VideoCodec_VIDEO_CODEC_H264        VideoCodec = 1
)

// Enum value maps for VideoCodec.
var (
	VideoCodec_name = map[int32]string{
		0: "VIDEO_CODEC_UNSPECIFIED",
		1: "VIDEO_CODEC_H264",
	}
	VideoCodec_value = map[string]int32{
		"VIDEO_CODEC_UNSPECIFIED": 0,
		"VIDEO_CODEC_H264":        1,
	}
)

func (x VideoCodec) Enum() *VideoCodec {
	p := new(VideoCodec)
	*p = x
	return p
}

func (x VideoCodec) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VideoCodec) Descriptor() protoreflect.EnumDescriptor {
	return file_live_v21_api_proto_enumTypes[7].Descriptor()
}

func (VideoCodec) Type() protoreflect.EnumType {
	return &file_live_v21_api_proto_enumTypes[7]
}

func (x VideoCodec) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VideoCodec.Descriptor instead.
func (VideoCodec) EnumDescriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{7}
}

// video encoding codec profile
type VideoCodecProfile int32

const (
	VideoCodecProfile_VIDEO_CODEC_PROFILE_UNSPECIFIED VideoCodecProfile = 0
	VideoCodecProfile_VIDEO_CODEC_PROFILE_BASELINE    VideoCodecProfile = 2
	VideoCodecProfile_VIDEO_CODEC_PROFILE_MAIN        VideoCodecProfile = 3
	VideoCodecProfile_VIDEO_CODEC_PROFILE_HIGH        VideoCodecProfile = 4
)

// Enum value maps for VideoCodecProfile.
var (
	VideoCodecProfile_name = map[int32]string{
		0: "VIDEO_CODEC_PROFILE_UNSPECIFIED",
		2: "VIDEO_CODEC_PROFILE_BASELINE",
		3: "VIDEO_CODEC_PROFILE_MAIN",
		4: "VIDEO_CODEC_PROFILE_HIGH",
	}
	VideoCodecProfile_value = map[string]int32{
		"VIDEO_CODEC_PROFILE_UNSPECIFIED": 0,
		"VIDEO_CODEC_PROFILE_BASELINE":    2,
		"VIDEO_CODEC_PROFILE_MAIN":        3,
		"VIDEO_CODEC_PROFILE_HIGH":        4,
	}
)

func (x VideoCodecProfile) Enum() *VideoCodecProfile {
	p := new(VideoCodecProfile)
	*p = x
	return p
}

func (x VideoCodecProfile) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VideoCodecProfile) Descriptor() protoreflect.EnumDescriptor {
	return file_live_v21_api_proto_enumTypes[8].Descriptor()
}

func (VideoCodecProfile) Type() protoreflect.EnumType {
	return &file_live_v21_api_proto_enumTypes[8]
}

func (x VideoCodecProfile) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VideoCodecProfile.Descriptor instead.
func (VideoCodecProfile) EnumDescriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{8}
}

// audio encoding codec
type AudioCodec int32

const (
	AudioCodec_AUDIO_CODEC_UNSPECIFIED AudioCodec = 0
	AudioCodec_AUDIO_CODEC_AAC         AudioCodec = 1
)

// Enum value maps for AudioCodec.
var (
	AudioCodec_name = map[int32]string{
		0: "AUDIO_CODEC_UNSPECIFIED",
		1: "AUDIO_CODEC_AAC",
	}
	AudioCodec_value = map[string]int32{
		"AUDIO_CODEC_UNSPECIFIED": 0,
		"AUDIO_CODEC_AAC":         1,
	}
)

func (x AudioCodec) Enum() *AudioCodec {
	p := new(AudioCodec)
	*p = x
	return p
}

func (x AudioCodec) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AudioCodec) Descriptor() protoreflect.EnumDescriptor {
	return file_live_v21_api_proto_enumTypes[9].Descriptor()
}

func (AudioCodec) Type() protoreflect.EnumType {
	return &file_live_v21_api_proto_enumTypes[9]
}

func (x AudioCodec) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AudioCodec.Descriptor instead.
func (AudioCodec) EnumDescriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{9}
}

// video encoding rate control mode
type VideoCodecRateControlMode int32

const (
	VideoCodecRateControlMode_VIDEO_CODEC_RATE_CONTROL_MODE_UNSPECIFIED VideoCodecRateControlMode = 0
	// constant bit rate encoding
	VideoCodecRateControlMode_VIDEO_CODEC_RATE_CONTROL_MODE_CBR VideoCodecRateControlMode = 1
)

// Enum value maps for VideoCodecRateControlMode.
var (
	VideoCodecRateControlMode_name = map[int32]string{
		0: "VIDEO_CODEC_RATE_CONTROL_MODE_UNSPECIFIED",
		1: "VIDEO_CODEC_RATE_CONTROL_MODE_CBR",
	}
	VideoCodecRateControlMode_value = map[string]int32{
		"VIDEO_CODEC_RATE_CONTROL_MODE_UNSPECIFIED": 0,
		"VIDEO_CODEC_RATE_CONTROL_MODE_CBR":         1,
	}
)

func (x VideoCodecRateControlMode) Enum() *VideoCodecRateControlMode {
	p := new(VideoCodecRateControlMode)
	*p = x
	return p
}

func (x VideoCodecRateControlMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VideoCodecRateControlMode) Descriptor() protoreflect.EnumDescriptor {
	return file_live_v21_api_proto_enumTypes[10].Descriptor()
}

func (VideoCodecRateControlMode) Type() protoreflect.EnumType {
	return &file_live_v21_api_proto_enumTypes[10]
}

func (x VideoCodecRateControlMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VideoCodecRateControlMode.Descriptor instead.
func (VideoCodecRateControlMode) EnumDescriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{10}
}

// broadcast phase of project
type ProjectBroadcastPhase int32

const (
	ProjectBroadcastPhase_PROJECT_BROADCAST_PHASE_UNSPECIFIED ProjectBroadcastPhase = 0
	ProjectBroadcastPhase_PROJECT_BROADCAST_PHASE_NOT_RUNNING ProjectBroadcastPhase = 1
	// broadcast is waiting to be scheduled
	ProjectBroadcastPhase_PROJECT_BROADCAST_PHASE_WAITING  ProjectBroadcastPhase = 2
	ProjectBroadcastPhase_PROJECT_BROADCAST_PHASE_STARTING ProjectBroadcastPhase = 3
	ProjectBroadcastPhase_PROJECT_BROADCAST_PHASE_RUNNING  ProjectBroadcastPhase = 4
	ProjectBroadcastPhase_PROJECT_BROADCAST_PHASE_STOPPING ProjectBroadcastPhase = 5
	ProjectBroadcastPhase_PROJECT_BROADCAST_PHASE_STOPPED  ProjectBroadcastPhase = 6
	ProjectBroadcastPhase_PROJECT_BROADCAST_PHASE_ARCHIVED ProjectBroadcastPhase = 7
)

// Enum value maps for ProjectBroadcastPhase.
var (
	ProjectBroadcastPhase_name = map[int32]string{
		0: "PROJECT_BROADCAST_PHASE_UNSPECIFIED",
		1: "PROJECT_BROADCAST_PHASE_NOT_RUNNING",
		2: "PROJECT_BROADCAST_PHASE_WAITING",
		3: "PROJECT_BROADCAST_PHASE_STARTING",
		4: "PROJECT_BROADCAST_PHASE_RUNNING",
		5: "PROJECT_BROADCAST_PHASE_STOPPING",
		6: "PROJECT_BROADCAST_PHASE_STOPPED",
		7: "PROJECT_BROADCAST_PHASE_ARCHIVED",
	}
	ProjectBroadcastPhase_value = map[string]int32{
		"PROJECT_BROADCAST_PHASE_UNSPECIFIED": 0,
		"PROJECT_BROADCAST_PHASE_NOT_RUNNING": 1,
		"PROJECT_BROADCAST_PHASE_WAITING":     2,
		"PROJECT_BROADCAST_PHASE_STARTING":    3,
		"PROJECT_BROADCAST_PHASE_RUNNING":     4,
		"PROJECT_BROADCAST_PHASE_STOPPING":    5,
		"PROJECT_BROADCAST_PHASE_STOPPED":     6,
		"PROJECT_BROADCAST_PHASE_ARCHIVED":    7,
	}
)

func (x ProjectBroadcastPhase) Enum() *ProjectBroadcastPhase {
	p := new(ProjectBroadcastPhase)
	*p = x
	return p
}

func (x ProjectBroadcastPhase) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProjectBroadcastPhase) Descriptor() protoreflect.EnumDescriptor {
	return file_live_v21_api_proto_enumTypes[11].Descriptor()
}

func (ProjectBroadcastPhase) Type() protoreflect.EnumType {
	return &file_live_v21_api_proto_enumTypes[11]
}

func (x ProjectBroadcastPhase) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProjectBroadcastPhase.Descriptor instead.
func (ProjectBroadcastPhase) EnumDescriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{11}
}

type S3ACL int32

const (
	S3ACL_S3ACL_UNSPECIFIED               S3ACL = 0
	S3ACL_S3ACL_PRIVATE                   S3ACL = 1
	S3ACL_S3ACL_PUBLIC_READ               S3ACL = 2
	S3ACL_S3ACL_PUBLIC_READ_WRITE         S3ACL = 3
	S3ACL_S3ACL_AUTHENTICATED_READ        S3ACL = 4
	S3ACL_S3ACL_BUCKET_OWNER_READ         S3ACL = 5
	S3ACL_S3ACL_BUCKET_OWNER_FULL_CONTROL S3ACL = 6
)

// Enum value maps for S3ACL.
var (
	S3ACL_name = map[int32]string{
		0: "S3ACL_UNSPECIFIED",
		1: "S3ACL_PRIVATE",
		2: "S3ACL_PUBLIC_READ",
		3: "S3ACL_PUBLIC_READ_WRITE",
		4: "S3ACL_AUTHENTICATED_READ",
		5: "S3ACL_BUCKET_OWNER_READ",
		6: "S3ACL_BUCKET_OWNER_FULL_CONTROL",
	}
	S3ACL_value = map[string]int32{
		"S3ACL_UNSPECIFIED":               0,
		"S3ACL_PRIVATE":                   1,
		"S3ACL_PUBLIC_READ":               2,
		"S3ACL_PUBLIC_READ_WRITE":         3,
		"S3ACL_AUTHENTICATED_READ":        4,
		"S3ACL_BUCKET_OWNER_READ":         5,
		"S3ACL_BUCKET_OWNER_FULL_CONTROL": 6,
	}
)

func (x S3ACL) Enum() *S3ACL {
	p := new(S3ACL)
	*p = x
	return p
}

func (x S3ACL) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (S3ACL) Descriptor() protoreflect.EnumDescriptor {
	return file_live_v21_api_proto_enumTypes[12].Descriptor()
}

func (S3ACL) Type() protoreflect.EnumType {
	return &file_live_v21_api_proto_enumTypes[12]
}

func (x S3ACL) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use S3ACL.Descriptor instead.
func (S3ACL) EnumDescriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{12}
}

// boolean logic for trigger
type SourceTriggerAction int32

const (
	SourceTriggerAction_SOURCE_TRIGGER_ACTION_UNSPECIFIED SourceTriggerAction = 0
	SourceTriggerAction_SOURCE_TRIGGER_ACTION_IGNORE      SourceTriggerAction = 1
	// SOURCE_TRIGGER_ACTION_AND = 2;
	SourceTriggerAction_SOURCE_TRIGGER_ACTION_OR SourceTriggerAction = 3
)

// Enum value maps for SourceTriggerAction.
var (
	SourceTriggerAction_name = map[int32]string{
		0: "SOURCE_TRIGGER_ACTION_UNSPECIFIED",
		1: "SOURCE_TRIGGER_ACTION_IGNORE",
		3: "SOURCE_TRIGGER_ACTION_OR",
	}
	SourceTriggerAction_value = map[string]int32{
		"SOURCE_TRIGGER_ACTION_UNSPECIFIED": 0,
		"SOURCE_TRIGGER_ACTION_IGNORE":      1,
		"SOURCE_TRIGGER_ACTION_OR":          3,
	}
)

func (x SourceTriggerAction) Enum() *SourceTriggerAction {
	p := new(SourceTriggerAction)
	*p = x
	return p
}

func (x SourceTriggerAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SourceTriggerAction) Descriptor() protoreflect.EnumDescriptor {
	return file_live_v21_api_proto_enumTypes[13].Descriptor()
}

func (SourceTriggerAction) Type() protoreflect.EnumType {
	return &file_live_v21_api_proto_enumTypes[13]
}

func (x SourceTriggerAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SourceTriggerAction.Descriptor instead.
func (SourceTriggerAction) EnumDescriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{13}
}

// region which is hosting broadcast
type Region int32

const (
	Region_REGION_UNSPECIFIED Region = 0
	// US East
	Region_REGION_US_EAST_1 Region = 1
	Region_REGION_US_EAST_2 Region = 2
	// US West
	Region_REGION_US_WEST_1 Region = 3
	Region_REGION_US_WEST_2 Region = 4
	// US Central
	Region_REGION_US_CENTRAL_1 Region = 5
	// Asia Pacific Southeast
	Region_REGION_AP_SOUTHEAST_1 Region = 10
	Region_REGION_AP_SOUTHEAST_2 Region = 11
	// Asia Pacific South
	Region_REGION_AP_SOUTH_1 Region = 15
	// Canada East
	Region_REGION_CA_EAST_1 Region = 20
	// Europe Central
	Region_REGION_EU_CENTRAL_1 Region = 30
	// Europe West
	Region_REGION_EU_WEST_1 Region = 31
)

// Enum value maps for Region.
var (
	Region_name = map[int32]string{
		0:  "REGION_UNSPECIFIED",
		1:  "REGION_US_EAST_1",
		2:  "REGION_US_EAST_2",
		3:  "REGION_US_WEST_1",
		4:  "REGION_US_WEST_2",
		5:  "REGION_US_CENTRAL_1",
		10: "REGION_AP_SOUTHEAST_1",
		11: "REGION_AP_SOUTHEAST_2",
		15: "REGION_AP_SOUTH_1",
		20: "REGION_CA_EAST_1",
		30: "REGION_EU_CENTRAL_1",
		31: "REGION_EU_WEST_1",
	}
	Region_value = map[string]int32{
		"REGION_UNSPECIFIED":    0,
		"REGION_US_EAST_1":      1,
		"REGION_US_EAST_2":      2,
		"REGION_US_WEST_1":      3,
		"REGION_US_WEST_2":      4,
		"REGION_US_CENTRAL_1":   5,
		"REGION_AP_SOUTHEAST_1": 10,
		"REGION_AP_SOUTHEAST_2": 11,
		"REGION_AP_SOUTH_1":     15,
		"REGION_CA_EAST_1":      20,
		"REGION_EU_CENTRAL_1":   30,
		"REGION_EU_WEST_1":      31,
	}
)

func (x Region) Enum() *Region {
	p := new(Region)
	*p = x
	return p
}

func (x Region) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Region) Descriptor() protoreflect.EnumDescriptor {
	return file_live_v21_api_proto_enumTypes[14].Descriptor()
}

func (Region) Type() protoreflect.EnumType {
	return &file_live_v21_api_proto_enumTypes[14]
}

func (x Region) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Region.Descriptor instead.
func (Region) EnumDescriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{14}
}

// defined roles
type Role int32

const (
	Role_ROLE_UNSPECIFIED Role = 0
	Role_ROLE_HOST        Role = 1
	Role_ROLE_COHOST      Role = 2
	Role_ROLE_CONTRIBUTOR Role = 3
	Role_ROLE_GUEST       Role = 4
	Role_ROLE_VIEWER      Role = 5
	Role_ROLE_RENDERER    Role = 6
	Role_ROLE_PLATFORM    Role = 7
	Role_ROLE_IMPERSONATE Role = 8
)

// Enum value maps for Role.
var (
	Role_name = map[int32]string{
		0: "ROLE_UNSPECIFIED",
		1: "ROLE_HOST",
		2: "ROLE_COHOST",
		3: "ROLE_CONTRIBUTOR",
		4: "ROLE_GUEST",
		5: "ROLE_VIEWER",
		6: "ROLE_RENDERER",
		7: "ROLE_PLATFORM",
		8: "ROLE_IMPERSONATE",
	}
	Role_value = map[string]int32{
		"ROLE_UNSPECIFIED": 0,
		"ROLE_HOST":        1,
		"ROLE_COHOST":      2,
		"ROLE_CONTRIBUTOR": 3,
		"ROLE_GUEST":       4,
		"ROLE_VIEWER":      5,
		"ROLE_RENDERER":    6,
		"ROLE_PLATFORM":    7,
		"ROLE_IMPERSONATE": 8,
	}
)

func (x Role) Enum() *Role {
	p := new(Role)
	*p = x
	return p
}

func (x Role) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Role) Descriptor() protoreflect.EnumDescriptor {
	return file_live_v21_api_proto_enumTypes[15].Descriptor()
}

func (Role) Type() protoreflect.EnumType {
	return &file_live_v21_api_proto_enumTypes[15]
}

func (x Role) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Role.Descriptor instead.
func (Role) EnumDescriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{15}
}

// an error that occured during a broadcast
type ProjectBroadcastError int32

const (
	ProjectBroadcastError_PROJECT_BROADCAST_ERROR_UNSPECIFIED       ProjectBroadcastError = 0
	ProjectBroadcastError_PROJECT_BROADCAST_ERROR_INTERNAL          ProjectBroadcastError = 1
	ProjectBroadcastError_PROJECT_BROADCAST_ERROR_DURATION_EXCEEDED ProjectBroadcastError = 2
)

// Enum value maps for ProjectBroadcastError.
var (
	ProjectBroadcastError_name = map[int32]string{
		0: "PROJECT_BROADCAST_ERROR_UNSPECIFIED",
		1: "PROJECT_BROADCAST_ERROR_INTERNAL",
		2: "PROJECT_BROADCAST_ERROR_DURATION_EXCEEDED",
	}
	ProjectBroadcastError_value = map[string]int32{
		"PROJECT_BROADCAST_ERROR_UNSPECIFIED":       0,
		"PROJECT_BROADCAST_ERROR_INTERNAL":          1,
		"PROJECT_BROADCAST_ERROR_DURATION_EXCEEDED": 2,
	}
)

func (x ProjectBroadcastError) Enum() *ProjectBroadcastError {
	p := new(ProjectBroadcastError)
	*p = x
	return p
}

func (x ProjectBroadcastError) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProjectBroadcastError) Descriptor() protoreflect.EnumDescriptor {
	return file_live_v21_api_proto_enumTypes[16].Descriptor()
}

func (ProjectBroadcastError) Type() protoreflect.EnumType {
	return &file_live_v21_api_proto_enumTypes[16]
}

func (x ProjectBroadcastError) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProjectBroadcastError.Descriptor instead.
func (ProjectBroadcastError) EnumDescriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{16}
}

// the state of the connection
type ConnectState int32

const (
	ConnectState_CONNECT_STATE_UNSPECIFIED  ConnectState = 0
	ConnectState_CONNECT_STATE_CONNECTED    ConnectState = 1
	ConnectState_CONNECT_STATE_DISCONNECTED ConnectState = 2
)

// Enum value maps for ConnectState.
var (
	ConnectState_name = map[int32]string{
		0: "CONNECT_STATE_UNSPECIFIED",
		1: "CONNECT_STATE_CONNECTED",
		2: "CONNECT_STATE_DISCONNECTED",
	}
	ConnectState_value = map[string]int32{
		"CONNECT_STATE_UNSPECIFIED":  0,
		"CONNECT_STATE_CONNECTED":    1,
		"CONNECT_STATE_DISCONNECTED": 2,
	}
)

func (x ConnectState) Enum() *ConnectState {
	p := new(ConnectState)
	*p = x
	return p
}

func (x ConnectState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConnectState) Descriptor() protoreflect.EnumDescriptor {
	return file_live_v21_api_proto_enumTypes[17].Descriptor()
}

func (ConnectState) Type() protoreflect.EnumType {
	return &file_live_v21_api_proto_enumTypes[17]
}

func (x ConnectState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConnectState.Descriptor instead.
func (ConnectState) EnumDescriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{17}
}

type EventSubType int32

const (
	EventSubType_EVENT_SUB_TYPE_UNSPECIFIED EventSubType = 0
	EventSubType_EVENT_SUB_TYPE_CREATE      EventSubType = 1
	EventSubType_EVENT_SUB_TYPE_UPDATE      EventSubType = 2
	EventSubType_EVENT_SUB_TYPE_DELETE      EventSubType = 3
	EventSubType_EVENT_SUB_TYPE_ADD         EventSubType = 4
	EventSubType_EVENT_SUB_TYPE_REMOVE      EventSubType = 5
	EventSubType_EVENT_SUB_TYPE_STATE       EventSubType = 6
)

// Enum value maps for EventSubType.
var (
	EventSubType_name = map[int32]string{
		0: "EVENT_SUB_TYPE_UNSPECIFIED",
		1: "EVENT_SUB_TYPE_CREATE",
		2: "EVENT_SUB_TYPE_UPDATE",
		3: "EVENT_SUB_TYPE_DELETE",
		4: "EVENT_SUB_TYPE_ADD",
		5: "EVENT_SUB_TYPE_REMOVE",
		6: "EVENT_SUB_TYPE_STATE",
	}
	EventSubType_value = map[string]int32{
		"EVENT_SUB_TYPE_UNSPECIFIED": 0,
		"EVENT_SUB_TYPE_CREATE":      1,
		"EVENT_SUB_TYPE_UPDATE":      2,
		"EVENT_SUB_TYPE_DELETE":      3,
		"EVENT_SUB_TYPE_ADD":         4,
		"EVENT_SUB_TYPE_REMOVE":      5,
		"EVENT_SUB_TYPE_STATE":       6,
	}
)

func (x EventSubType) Enum() *EventSubType {
	p := new(EventSubType)
	*p = x
	return p
}

func (x EventSubType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventSubType) Descriptor() protoreflect.EnumDescriptor {
	return file_live_v21_api_proto_enumTypes[18].Descriptor()
}

func (EventSubType) Type() protoreflect.EnumType {
	return &file_live_v21_api_proto_enumTypes[18]
}

func (x EventSubType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventSubType.Descriptor instead.
func (EventSubType) EnumDescriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{18}
}

type EventType int32

const (
	EventType_EVENT_TYPE_UNSPECIFIED EventType = 0
	EventType_EVENT_TYPE_COLLECTION  EventType = 1
	EventType_EVENT_TYPE_PROJECT     EventType = 2
	EventType_EVENT_TYPE_SOURCE      EventType = 4
	EventType_EVENT_TYPE_DESTINATION EventType = 5
)

// Enum value maps for EventType.
var (
	EventType_name = map[int32]string{
		0: "EVENT_TYPE_UNSPECIFIED",
		1: "EVENT_TYPE_COLLECTION",
		2: "EVENT_TYPE_PROJECT",
		4: "EVENT_TYPE_SOURCE",
		5: "EVENT_TYPE_DESTINATION",
	}
	EventType_value = map[string]int32{
		"EVENT_TYPE_UNSPECIFIED": 0,
		"EVENT_TYPE_COLLECTION":  1,
		"EVENT_TYPE_PROJECT":     2,
		"EVENT_TYPE_SOURCE":      4,
		"EVENT_TYPE_DESTINATION": 5,
	}
)

func (x EventType) Enum() *EventType {
	p := new(EventType)
	*p = x
	return p
}

func (x EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_live_v21_api_proto_enumTypes[19].Descriptor()
}

func (EventType) Type() protoreflect.EnumType {
	return &file_live_v21_api_proto_enumTypes[19]
}

func (x EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventType.Descriptor instead.
func (EventType) EnumDescriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{19}
}

type BroadcastOriginExternalMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value *structpb.Value `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *BroadcastOriginExternalMetadata) Reset() {
	*x = BroadcastOriginExternalMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BroadcastOriginExternalMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BroadcastOriginExternalMetadata) ProtoMessage() {}

func (x *BroadcastOriginExternalMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BroadcastOriginExternalMetadata.ProtoReflect.Descriptor instead.
func (*BroadcastOriginExternalMetadata) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{0}
}

func (x *BroadcastOriginExternalMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BroadcastOriginExternalMetadata) GetValue() *structpb.Value {
	if x != nil {
		return x.Value
	}
	return nil
}

type BroadcastOriginSourceMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BroadcastOriginSourceMetadata) Reset() {
	*x = BroadcastOriginSourceMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BroadcastOriginSourceMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BroadcastOriginSourceMetadata) ProtoMessage() {}

func (x *BroadcastOriginSourceMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BroadcastOriginSourceMetadata.ProtoReflect.Descriptor instead.
func (*BroadcastOriginSourceMetadata) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{1}
}

type WebhookRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId          string           `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	CollectionId    string           `protobuf:"bytes,2,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	ProjectId       string           `protobuf:"bytes,3,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	BroadcastOrigin *BroadcastOrigin `protobuf:"varint,7,opt,name=broadcast_origin,json=broadcastOrigin,proto3,enum=live.v21.BroadcastOrigin,oneof" json:"broadcast_origin,omitempty"`
	// Types that are assignable to BroadcastOriginMetadata:
	//
	//	*WebhookRequest_BroadcastOriginApiMetadata
	//	*WebhookRequest_BroadcastOriginSourceMetadata
	//	*WebhookRequest_BroadcastOriginExternalMetadata
	BroadcastOriginMetadata isWebhookRequest_BroadcastOriginMetadata `protobuf_oneof:"broadcast_origin_metadata"`
}

func (x *WebhookRequest) Reset() {
	*x = WebhookRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebhookRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebhookRequest) ProtoMessage() {}

func (x *WebhookRequest) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebhookRequest.ProtoReflect.Descriptor instead.
func (*WebhookRequest) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{2}
}

func (x *WebhookRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *WebhookRequest) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

func (x *WebhookRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *WebhookRequest) GetBroadcastOrigin() BroadcastOrigin {
	if x != nil && x.BroadcastOrigin != nil {
		return *x.BroadcastOrigin
	}
	return BroadcastOrigin_BROADCAST_ORIGIN_UNSPECIFIED
}

func (m *WebhookRequest) GetBroadcastOriginMetadata() isWebhookRequest_BroadcastOriginMetadata {
	if m != nil {
		return m.BroadcastOriginMetadata
	}
	return nil
}

func (x *WebhookRequest) GetBroadcastOriginApiMetadata() *structpb.Value {
	if x, ok := x.GetBroadcastOriginMetadata().(*WebhookRequest_BroadcastOriginApiMetadata); ok {
		return x.BroadcastOriginApiMetadata
	}
	return nil
}

func (x *WebhookRequest) GetBroadcastOriginSourceMetadata() *BroadcastOriginSourceMetadata {
	if x, ok := x.GetBroadcastOriginMetadata().(*WebhookRequest_BroadcastOriginSourceMetadata); ok {
		return x.BroadcastOriginSourceMetadata
	}
	return nil
}

func (x *WebhookRequest) GetBroadcastOriginExternalMetadata() *BroadcastOriginExternalMetadata {
	if x, ok := x.GetBroadcastOriginMetadata().(*WebhookRequest_BroadcastOriginExternalMetadata); ok {
		return x.BroadcastOriginExternalMetadata
	}
	return nil
}

type isWebhookRequest_BroadcastOriginMetadata interface {
	isWebhookRequest_BroadcastOriginMetadata()
}

type WebhookRequest_BroadcastOriginApiMetadata struct {
	// present if broadcast_origin is BROADCAST_ORIGIN_API, contains metadata from consumer
	BroadcastOriginApiMetadata *structpb.Value `protobuf:"bytes,8,opt,name=broadcast_origin_api_metadata,json=broadcastOriginApiMetadata,proto3,oneof"`
}

type WebhookRequest_BroadcastOriginSourceMetadata struct {
	// present if broadcast_origin is BROADCAST_ORIGIN_SOURCE, contains metadata from source
	BroadcastOriginSourceMetadata *BroadcastOriginSourceMetadata `protobuf:"bytes,9,opt,name=broadcast_origin_source_metadata,json=broadcastOriginSourceMetadata,proto3,oneof"`
}

type WebhookRequest_BroadcastOriginExternalMetadata struct {
	// present if broadcast_origin is BROADCAST_ORIGIN_EXTERNAL, contains metadata from an external integration starting the broadcast
	BroadcastOriginExternalMetadata *BroadcastOriginExternalMetadata `protobuf:"bytes,10,opt,name=broadcast_origin_external_metadata,json=broadcastOriginExternalMetadata,proto3,oneof"`
}

func (*WebhookRequest_BroadcastOriginApiMetadata) isWebhookRequest_BroadcastOriginMetadata() {}

func (*WebhookRequest_BroadcastOriginSourceMetadata) isWebhookRequest_BroadcastOriginMetadata() {}

func (*WebhookRequest_BroadcastOriginExternalMetadata) isWebhookRequest_BroadcastOriginMetadata() {}

type WebhookResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WebhookResponse) Reset() {
	*x = WebhookResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebhookResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebhookResponse) ProtoMessage() {}

func (x *WebhookResponse) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebhookResponse.ProtoReflect.Descriptor instead.
func (*WebhookResponse) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{3}
}

// webhook configuration message
type WebhookConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// enable webhook
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// webhook url
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	// webhook timeout period in ms
	TimeoutMs *uint32 `protobuf:"varint,3,opt,name=timeout_ms,json=timeoutMs,proto3,oneof" json:"timeout_ms,omitempty"`
}

func (x *WebhookConfiguration) Reset() {
	*x = WebhookConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebhookConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebhookConfiguration) ProtoMessage() {}

func (x *WebhookConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebhookConfiguration.ProtoReflect.Descriptor instead.
func (*WebhookConfiguration) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{4}
}

func (x *WebhookConfiguration) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *WebhookConfiguration) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *WebhookConfiguration) GetTimeoutMs() uint32 {
	if x != nil && x.TimeoutMs != nil {
		return *x.TimeoutMs
	}
	return 0
}

// webhook types
type AccountConfigurationHook struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// webhook configuration for start broadcast
	StartBroadcast *WebhookConfiguration `protobuf:"bytes,1,opt,name=start_broadcast,json=startBroadcast,proto3,oneof" json:"start_broadcast,omitempty"`
	// webhook configuration for start webrtc
	StartWebrtc *WebhookConfiguration `protobuf:"bytes,2,opt,name=start_webrtc,json=startWebrtc,proto3,oneof" json:"start_webrtc,omitempty"` // not implemented
	// webhook configuration for join webrtc
	JoinWebrtc *WebhookConfiguration `protobuf:"bytes,3,opt,name=join_webrtc,json=joinWebrtc,proto3,oneof" json:"join_webrtc,omitempty"` // not implemented
}

func (x *AccountConfigurationHook) Reset() {
	*x = AccountConfigurationHook{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountConfigurationHook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountConfigurationHook) ProtoMessage() {}

func (x *AccountConfigurationHook) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountConfigurationHook.ProtoReflect.Descriptor instead.
func (*AccountConfigurationHook) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{5}
}

func (x *AccountConfigurationHook) GetStartBroadcast() *WebhookConfiguration {
	if x != nil {
		return x.StartBroadcast
	}
	return nil
}

func (x *AccountConfigurationHook) GetStartWebrtc() *WebhookConfiguration {
	if x != nil {
		return x.StartWebrtc
	}
	return nil
}

func (x *AccountConfigurationHook) GetJoinWebrtc() *WebhookConfiguration {
	if x != nil {
		return x.JoinWebrtc
	}
	return nil
}

// account configuration message
type AccountConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// number of concurrent broadcast request allowed
	BroadcastConcurrency *int32 `protobuf:"varint,2,opt,name=broadcast_concurrency,json=broadcastConcurrency,proto3,oneof" json:"broadcast_concurrency,omitempty"`
	// webhook configuration
	Hooks *AccountConfigurationHook `protobuf:"bytes,3,opt,name=hooks,proto3" json:"hooks,omitempty"`
	// the base url to prefix guest codes with, defaults to an api.stream url
	GuestCodeUrl *string `protobuf:"bytes,4,opt,name=guest_code_url,json=guestCodeUrl,proto3,oneof" json:"guest_code_url,omitempty"`
}

func (x *AccountConfiguration) Reset() {
	*x = AccountConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountConfiguration) ProtoMessage() {}

func (x *AccountConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountConfiguration.ProtoReflect.Descriptor instead.
func (*AccountConfiguration) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{6}
}

func (x *AccountConfiguration) GetBroadcastConcurrency() int32 {
	if x != nil && x.BroadcastConcurrency != nil {
		return *x.BroadcastConcurrency
	}
	return 0
}

func (x *AccountConfiguration) GetHooks() *AccountConfigurationHook {
	if x != nil {
		return x.Hooks
	}
	return nil
}

func (x *AccountConfiguration) GetGuestCodeUrl() string {
	if x != nil && x.GuestCodeUrl != nil {
		return *x.GuestCodeUrl
	}
	return ""
}

// get account configuration request/response messages
type GetAccountConfigurationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetAccountConfigurationRequest) Reset() {
	*x = GetAccountConfigurationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccountConfigurationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountConfigurationRequest) ProtoMessage() {}

func (x *GetAccountConfigurationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountConfigurationRequest.ProtoReflect.Descriptor instead.
func (*GetAccountConfigurationRequest) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{7}
}

// get account configuration request/response messages
type GetAccountConfigurationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// account configuration response
	AccountConfiguration *AccountConfiguration `protobuf:"bytes,1,opt,name=account_configuration,json=accountConfiguration,proto3" json:"account_configuration,omitempty"`
}

func (x *GetAccountConfigurationResponse) Reset() {
	*x = GetAccountConfigurationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccountConfigurationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountConfigurationResponse) ProtoMessage() {}

func (x *GetAccountConfigurationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountConfigurationResponse.ProtoReflect.Descriptor instead.
func (*GetAccountConfigurationResponse) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{8}
}

func (x *GetAccountConfigurationResponse) GetAccountConfiguration() *AccountConfiguration {
	if x != nil {
		return x.AccountConfiguration
	}
	return nil
}

// update account configuration  request/response messages
type UpdateAccountConfigurationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// number of concurrent broadcast request allowed
	BroadcastConcurrency *int32 `protobuf:"varint,2,opt,name=broadcast_concurrency,json=broadcastConcurrency,proto3,oneof" json:"broadcast_concurrency,omitempty"`
	// webhook configuration
	Hooks *AccountConfigurationHook `protobuf:"bytes,3,opt,name=hooks,proto3" json:"hooks,omitempty"`
	// the base url to prefix guest codes with, defaults to an api.stream url
	GuestCodeUrl *string `protobuf:"bytes,5,opt,name=guest_code_url,json=guestCodeUrl,proto3,oneof" json:"guest_code_url,omitempty"`
	// fields to update
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,4,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateAccountConfigurationRequest) Reset() {
	*x = UpdateAccountConfigurationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAccountConfigurationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAccountConfigurationRequest) ProtoMessage() {}

func (x *UpdateAccountConfigurationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAccountConfigurationRequest.ProtoReflect.Descriptor instead.
func (*UpdateAccountConfigurationRequest) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateAccountConfigurationRequest) GetBroadcastConcurrency() int32 {
	if x != nil && x.BroadcastConcurrency != nil {
		return *x.BroadcastConcurrency
	}
	return 0
}

func (x *UpdateAccountConfigurationRequest) GetHooks() *AccountConfigurationHook {
	if x != nil {
		return x.Hooks
	}
	return nil
}

func (x *UpdateAccountConfigurationRequest) GetGuestCodeUrl() string {
	if x != nil && x.GuestCodeUrl != nil {
		return *x.GuestCodeUrl
	}
	return ""
}

func (x *UpdateAccountConfigurationRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

// update account configuration  request/response messages
type UpdateAccountConfigurationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// account configuration response
	AccountConfiguration *AccountConfiguration `protobuf:"bytes,1,opt,name=account_configuration,json=accountConfiguration,proto3" json:"account_configuration,omitempty"`
}

func (x *UpdateAccountConfigurationResponse) Reset() {
	*x = UpdateAccountConfigurationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAccountConfigurationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAccountConfigurationResponse) ProtoMessage() {}

func (x *UpdateAccountConfigurationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAccountConfigurationResponse.ProtoReflect.Descriptor instead.
func (*UpdateAccountConfigurationResponse) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateAccountConfigurationResponse) GetAccountConfiguration() *AccountConfiguration {
	if x != nil {
		return x.AccountConfiguration
	}
	return nil
}

// composition video parameters
type VideoRendering struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// canvas height (pixels)
	Height *uint32 `protobuf:"varint,1,opt,name=height,proto3,oneof" json:"height,omitempty"`
	// canvas width (pixels)
	Width *uint32 `protobuf:"varint,2,opt,name=width,proto3,oneof" json:"width,omitempty"`
	// canvas frame rate (frames/s)
	Framerate *float32 `protobuf:"fixed32,3,opt,name=framerate,proto3,oneof" json:"framerate,omitempty"`
	// rendering color space
	ColorSpace *VideoColorSpace `protobuf:"varint,4,opt,name=color_space,json=colorSpace,proto3,enum=live.v21.VideoColorSpace,oneof" json:"color_space,omitempty"`
}

func (x *VideoRendering) Reset() {
	*x = VideoRendering{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoRendering) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoRendering) ProtoMessage() {}

func (x *VideoRendering) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoRendering.ProtoReflect.Descriptor instead.
func (*VideoRendering) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{11}
}

func (x *VideoRendering) GetHeight() uint32 {
	if x != nil && x.Height != nil {
		return *x.Height
	}
	return 0
}

func (x *VideoRendering) GetWidth() uint32 {
	if x != nil && x.Width != nil {
		return *x.Width
	}
	return 0
}

func (x *VideoRendering) GetFramerate() float32 {
	if x != nil && x.Framerate != nil {
		return *x.Framerate
	}
	return 0
}

func (x *VideoRendering) GetColorSpace() VideoColorSpace {
	if x != nil && x.ColorSpace != nil {
		return *x.ColorSpace
	}
	return VideoColorSpace_VIDEO_COLOR_SPACE_UNSPECIFIED
}

// composition audio parameters
type AudioRendering struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// audio channel layout
	ChannelLayout *AudioChannelLayout `protobuf:"varint,1,opt,name=channel_layout,json=channelLayout,proto3,enum=live.v21.AudioChannelLayout,oneof" json:"channel_layout,omitempty"`
}

func (x *AudioRendering) Reset() {
	*x = AudioRendering{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudioRendering) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioRendering) ProtoMessage() {}

func (x *AudioRendering) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioRendering.ProtoReflect.Descriptor instead.
func (*AudioRendering) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{12}
}

func (x *AudioRendering) GetChannelLayout() AudioChannelLayout {
	if x != nil && x.ChannelLayout != nil {
		return *x.ChannelLayout
	}
	return AudioChannelLayout_AUDIO_CHANNEL_LAYOUT_UNSPECIFIED
}

// composition parameters
type Rendering struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// composition video parameters
	Video *VideoRendering `protobuf:"bytes,1,opt,name=video,proto3,oneof" json:"video,omitempty"`
	// composition audio parameters
	Audio *AudioRendering `protobuf:"bytes,2,opt,name=audio,proto3,oneof" json:"audio,omitempty"`
	// rendering quality
	Quality *RenderingQuality `protobuf:"varint,3,opt,name=quality,proto3,enum=live.v21.RenderingQuality,oneof" json:"quality,omitempty"`
	// target end-to-end latency (in ms)
	TargetLatency *uint32 `protobuf:"varint,4,opt,name=target_latency,json=targetLatency,proto3,oneof" json:"target_latency,omitempty"`
}

func (x *Rendering) Reset() {
	*x = Rendering{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rendering) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rendering) ProtoMessage() {}

func (x *Rendering) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rendering.ProtoReflect.Descriptor instead.
func (*Rendering) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{13}
}

func (x *Rendering) GetVideo() *VideoRendering {
	if x != nil {
		return x.Video
	}
	return nil
}

func (x *Rendering) GetAudio() *AudioRendering {
	if x != nil {
		return x.Audio
	}
	return nil
}

func (x *Rendering) GetQuality() RenderingQuality {
	if x != nil && x.Quality != nil {
		return *x.Quality
	}
	return RenderingQuality_RENDERING_QUALITY_UNSPECIFIED
}

func (x *Rendering) GetTargetLatency() uint32 {
	if x != nil && x.TargetLatency != nil {
		return *x.TargetLatency
	}
	return 0
}

// video encoding CBR rate control params
type VideoCodecRateControl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode *VideoCodecRateControlMode `protobuf:"varint,1,opt,name=mode,proto3,enum=live.v21.VideoCodecRateControlMode,oneof" json:"mode,omitempty"`
	// video encoding target bitrate (bits/s)
	TargetBitrate *uint32 `protobuf:"varint,2,opt,name=target_bitrate,json=targetBitrate,proto3,oneof" json:"target_bitrate,omitempty"`
	// maximum video encoding key frame interval (frames)
	MaxKeyFrameInterval *uint32 `protobuf:"varint,3,opt,name=max_key_frame_interval,json=maxKeyFrameInterval,proto3,oneof" json:"max_key_frame_interval,omitempty"`
}

func (x *VideoCodecRateControl) Reset() {
	*x = VideoCodecRateControl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoCodecRateControl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoCodecRateControl) ProtoMessage() {}

func (x *VideoCodecRateControl) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoCodecRateControl.ProtoReflect.Descriptor instead.
func (*VideoCodecRateControl) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{14}
}

func (x *VideoCodecRateControl) GetMode() VideoCodecRateControlMode {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return VideoCodecRateControlMode_VIDEO_CODEC_RATE_CONTROL_MODE_UNSPECIFIED
}

func (x *VideoCodecRateControl) GetTargetBitrate() uint32 {
	if x != nil && x.TargetBitrate != nil {
		return *x.TargetBitrate
	}
	return 0
}

func (x *VideoCodecRateControl) GetMaxKeyFrameInterval() uint32 {
	if x != nil && x.MaxKeyFrameInterval != nil {
		return *x.MaxKeyFrameInterval
	}
	return 0
}

// encoding video parameters
type VideoEncoding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// video encoding codec
	Codec *VideoCodec `protobuf:"varint,1,opt,name=codec,proto3,enum=live.v21.VideoCodec,oneof" json:"codec,omitempty"`
	// video encoding rate control
	RateControl *VideoCodecRateControl `protobuf:"bytes,2,opt,name=rate_control,json=rateControl,proto3,oneof" json:"rate_control,omitempty"`
	// video encoding codec profile
	Profile *VideoCodecProfile `protobuf:"varint,4,opt,name=profile,proto3,enum=live.v21.VideoCodecProfile,oneof" json:"profile,omitempty"`
}

func (x *VideoEncoding) Reset() {
	*x = VideoEncoding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoEncoding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoEncoding) ProtoMessage() {}

func (x *VideoEncoding) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoEncoding.ProtoReflect.Descriptor instead.
func (*VideoEncoding) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{15}
}

func (x *VideoEncoding) GetCodec() VideoCodec {
	if x != nil && x.Codec != nil {
		return *x.Codec
	}
	return VideoCodec_VIDEO_CODEC_UNSPECIFIED
}

func (x *VideoEncoding) GetRateControl() *VideoCodecRateControl {
	if x != nil {
		return x.RateControl
	}
	return nil
}

func (x *VideoEncoding) GetProfile() VideoCodecProfile {
	if x != nil && x.Profile != nil {
		return *x.Profile
	}
	return VideoCodecProfile_VIDEO_CODEC_PROFILE_UNSPECIFIED
}

// encoding audio parameters
type AudioEncoding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// audio encoding codec
	Codec *AudioCodec `protobuf:"varint,1,opt,name=codec,proto3,enum=live.v21.AudioCodec,oneof" json:"codec,omitempty"`
}

func (x *AudioEncoding) Reset() {
	*x = AudioEncoding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudioEncoding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioEncoding) ProtoMessage() {}

func (x *AudioEncoding) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioEncoding.ProtoReflect.Descriptor instead.
func (*AudioEncoding) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{16}
}

func (x *AudioEncoding) GetCodec() AudioCodec {
	if x != nil && x.Codec != nil {
		return *x.Codec
	}
	return AudioCodec_AUDIO_CODEC_UNSPECIFIED
}

// the parameters of the encoding
type Encoding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the video parameters of the encoding
	Video *VideoEncoding `protobuf:"bytes,1,opt,name=video,proto3,oneof" json:"video,omitempty"`
	// the audio parameters of the encoding
	Audio *AudioEncoding `protobuf:"bytes,2,opt,name=audio,proto3,oneof" json:"audio,omitempty"`
}

func (x *Encoding) Reset() {
	*x = Encoding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Encoding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Encoding) ProtoMessage() {}

func (x *Encoding) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Encoding.ProtoReflect.Descriptor instead.
func (*Encoding) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{17}
}

func (x *Encoding) GetVideo() *VideoEncoding {
	if x != nil {
		return x.Video
	}
	return nil
}

func (x *Encoding) GetAudio() *AudioEncoding {
	if x != nil {
		return x.Audio
	}
	return nil
}

// rtmp push source address
type SourceRtmpPushAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// enable source rtmp push address
	Enabled *bool `protobuf:"varint,1,opt,name=enabled,proto3,oneof" json:"enabled,omitempty"`
	// assigned rtmp stream key
	Key *string `protobuf:"bytes,2,opt,name=key,proto3,oneof" json:"key,omitempty"`
	// assigned rtmp destination url
	Url *string `protobuf:"bytes,3,opt,name=url,proto3,oneof" json:"url,omitempty"`
	// base_url without stream key
	BaseUrl *string `protobuf:"bytes,4,opt,name=base_url,json=baseUrl,proto3,oneof" json:"base_url,omitempty"`
	// fully formed url for previewing the rtmp stream
	PreviewUrl *string `protobuf:"bytes,5,opt,name=preview_url,json=previewUrl,proto3,oneof" json:"preview_url,omitempty"`
	// unique identifier for this ingest
	IngestId *string `protobuf:"bytes,6,opt,name=ingest_id,json=ingestId,proto3,oneof" json:"ingest_id,omitempty"`
	// enable rtmps support
	Secure *bool `protobuf:"varint,7,opt,name=secure,proto3,oneof" json:"secure,omitempty"`
	// the type of ingest we provisioned
	IngestType *string `protobuf:"bytes,8,opt,name=ingest_type,json=ingestType,proto3,oneof" json:"ingest_type,omitempty"`
}

func (x *SourceRtmpPushAddress) Reset() {
	*x = SourceRtmpPushAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SourceRtmpPushAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceRtmpPushAddress) ProtoMessage() {}

func (x *SourceRtmpPushAddress) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceRtmpPushAddress.ProtoReflect.Descriptor instead.
func (*SourceRtmpPushAddress) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{18}
}

func (x *SourceRtmpPushAddress) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *SourceRtmpPushAddress) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *SourceRtmpPushAddress) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *SourceRtmpPushAddress) GetBaseUrl() string {
	if x != nil && x.BaseUrl != nil {
		return *x.BaseUrl
	}
	return ""
}

func (x *SourceRtmpPushAddress) GetPreviewUrl() string {
	if x != nil && x.PreviewUrl != nil {
		return *x.PreviewUrl
	}
	return ""
}

func (x *SourceRtmpPushAddress) GetIngestId() string {
	if x != nil && x.IngestId != nil {
		return *x.IngestId
	}
	return ""
}

func (x *SourceRtmpPushAddress) GetSecure() bool {
	if x != nil && x.Secure != nil {
		return *x.Secure
	}
	return false
}

func (x *SourceRtmpPushAddress) GetIngestType() string {
	if x != nil && x.IngestType != nil {
		return *x.IngestType
	}
	return ""
}

// srt push addressing
type SrtPushAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// enable source srt push address
	Enabled *bool `protobuf:"varint,1,opt,name=enabled,proto3,oneof" json:"enabled,omitempty"`
	// assigned srt streamid
	StreamId *string `protobuf:"bytes,2,opt,name=stream_id,json=streamId,proto3,oneof" json:"stream_id,omitempty"`
	// assigned srt destination url
	Url *string `protobuf:"bytes,3,opt,name=url,proto3,oneof" json:"url,omitempty"`
	// base_url without streamid
	BaseUrl *string `protobuf:"bytes,4,opt,name=base_url,json=baseUrl,proto3,oneof" json:"base_url,omitempty"`
	// fully formed url for previewing the srt stream
	PreviewUrl *string `protobuf:"bytes,5,opt,name=preview_url,json=previewUrl,proto3,oneof" json:"preview_url,omitempty"`
	// unique identifier for this ingest
	IngestId *string `protobuf:"bytes,6,opt,name=ingest_id,json=ingestId,proto3,oneof" json:"ingest_id,omitempty"`
	// the type of ingest we provisioned
	IngestType *string `protobuf:"bytes,7,opt,name=ingest_type,json=ingestType,proto3,oneof" json:"ingest_type,omitempty"`
}

func (x *SrtPushAddress) Reset() {
	*x = SrtPushAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SrtPushAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SrtPushAddress) ProtoMessage() {}

func (x *SrtPushAddress) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SrtPushAddress.ProtoReflect.Descriptor instead.
func (*SrtPushAddress) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{19}
}

func (x *SrtPushAddress) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *SrtPushAddress) GetStreamId() string {
	if x != nil && x.StreamId != nil {
		return *x.StreamId
	}
	return ""
}

func (x *SrtPushAddress) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *SrtPushAddress) GetBaseUrl() string {
	if x != nil && x.BaseUrl != nil {
		return *x.BaseUrl
	}
	return ""
}

func (x *SrtPushAddress) GetPreviewUrl() string {
	if x != nil && x.PreviewUrl != nil {
		return *x.PreviewUrl
	}
	return ""
}

func (x *SrtPushAddress) GetIngestId() string {
	if x != nil && x.IngestId != nil {
		return *x.IngestId
	}
	return ""
}

func (x *SrtPushAddress) GetIngestType() string {
	if x != nil && x.IngestType != nil {
		return *x.IngestType
	}
	return ""
}

// rtmp pull addressing
type RtmpPullAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// rtmp source url
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *RtmpPullAddress) Reset() {
	*x = RtmpPullAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RtmpPullAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RtmpPullAddress) ProtoMessage() {}

func (x *RtmpPullAddress) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RtmpPullAddress.ProtoReflect.Descriptor instead.
func (*RtmpPullAddress) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{20}
}

func (x *RtmpPullAddress) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

// srt pull addressing
type SrtPullAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// srt url
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *SrtPullAddress) Reset() {
	*x = SrtPullAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SrtPullAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SrtPullAddress) ProtoMessage() {}

func (x *SrtPullAddress) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SrtPullAddress.ProtoReflect.Descriptor instead.
func (*SrtPullAddress) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{21}
}

func (x *SrtPullAddress) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

// Dynamic addresses are sources that get setup at runtime.
type DynamicAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// used for static mapping with StartProjectBroadcast()
	Id *string `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
}

func (x *DynamicAddress) Reset() {
	*x = DynamicAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DynamicAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamicAddress) ProtoMessage() {}

func (x *DynamicAddress) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamicAddress.ProtoReflect.Descriptor instead.
func (*DynamicAddress) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{22}
}

func (x *DynamicAddress) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

type DirectRTMPAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// enable source srt push address
	Enabled *bool `protobuf:"varint,1,opt,name=enabled,proto3,oneof" json:"enabled,omitempty"`
	Secure  bool  `protobuf:"varint,2,opt,name=secure,proto3" json:"secure,omitempty"`
}

func (x *DirectRTMPAddress) Reset() {
	*x = DirectRTMPAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DirectRTMPAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DirectRTMPAddress) ProtoMessage() {}

func (x *DirectRTMPAddress) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DirectRTMPAddress.ProtoReflect.Descriptor instead.
func (*DirectRTMPAddress) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{23}
}

func (x *DirectRTMPAddress) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *DirectRTMPAddress) GetSecure() bool {
	if x != nil {
		return x.Secure
	}
	return false
}

type DirectSrtAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled *bool `protobuf:"varint,1,opt,name=enabled,proto3,oneof" json:"enabled,omitempty"`
	Secure  bool  `protobuf:"varint,2,opt,name=secure,proto3" json:"secure,omitempty"`
}

func (x *DirectSrtAddress) Reset() {
	*x = DirectSrtAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DirectSrtAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DirectSrtAddress) ProtoMessage() {}

func (x *DirectSrtAddress) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DirectSrtAddress.ProtoReflect.Descriptor instead.
func (*DirectSrtAddress) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{24}
}

func (x *DirectSrtAddress) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *DirectSrtAddress) GetSecure() bool {
	if x != nil {
		return x.Secure
	}
	return false
}

// Runtime sources are configured only when the broadcast is launched.
type RuntimeSourceAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*RuntimeSourceAddress_RtmpPull
	//	*RuntimeSourceAddress_SrtPull
	//	*RuntimeSourceAddress_DirectRtmpPush
	//	*RuntimeSourceAddress_DirectSrtPush
	Type isRuntimeSourceAddress_Type `protobuf_oneof:"type"`
}

func (x *RuntimeSourceAddress) Reset() {
	*x = RuntimeSourceAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuntimeSourceAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuntimeSourceAddress) ProtoMessage() {}

func (x *RuntimeSourceAddress) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuntimeSourceAddress.ProtoReflect.Descriptor instead.
func (*RuntimeSourceAddress) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{25}
}

func (m *RuntimeSourceAddress) GetType() isRuntimeSourceAddress_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *RuntimeSourceAddress) GetRtmpPull() *RtmpPullAddress {
	if x, ok := x.GetType().(*RuntimeSourceAddress_RtmpPull); ok {
		return x.RtmpPull
	}
	return nil
}

func (x *RuntimeSourceAddress) GetSrtPull() *SrtPullAddress {
	if x, ok := x.GetType().(*RuntimeSourceAddress_SrtPull); ok {
		return x.SrtPull
	}
	return nil
}

func (x *RuntimeSourceAddress) GetDirectRtmpPush() *DirectRTMPAddress {
	if x, ok := x.GetType().(*RuntimeSourceAddress_DirectRtmpPush); ok {
		return x.DirectRtmpPush
	}
	return nil
}

func (x *RuntimeSourceAddress) GetDirectSrtPush() *DirectSrtAddress {
	if x, ok := x.GetType().(*RuntimeSourceAddress_DirectSrtPush); ok {
		return x.DirectSrtPush
	}
	return nil
}

type isRuntimeSourceAddress_Type interface {
	isRuntimeSourceAddress_Type()
}

type RuntimeSourceAddress_RtmpPull struct {
	// the rtmp address to pull from
	RtmpPull *RtmpPullAddress `protobuf:"bytes,1,opt,name=rtmp_pull,json=rtmpPull,proto3,oneof"`
}

type RuntimeSourceAddress_SrtPull struct {
	// the srt address to pull from
	SrtPull *SrtPullAddress `protobuf:"bytes,2,opt,name=srt_pull,json=srtPull,proto3,oneof"`
}

type RuntimeSourceAddress_DirectRtmpPush struct {
	// the rtmp address to push to
	DirectRtmpPush *DirectRTMPAddress `protobuf:"bytes,3,opt,name=direct_rtmp_push,json=directRtmpPush,proto3,oneof"`
}

type RuntimeSourceAddress_DirectSrtPush struct {
	// the srt address to push to
	DirectSrtPush *DirectSrtAddress `protobuf:"bytes,4,opt,name=direct_srt_push,json=directSrtPush,proto3,oneof"`
}

func (*RuntimeSourceAddress_RtmpPull) isRuntimeSourceAddress_Type() {}

func (*RuntimeSourceAddress_SrtPull) isRuntimeSourceAddress_Type() {}

func (*RuntimeSourceAddress_DirectRtmpPush) isRuntimeSourceAddress_Type() {}

func (*RuntimeSourceAddress_DirectSrtPush) isRuntimeSourceAddress_Type() {}

// live source address (select one)
type SourceAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*SourceAddress_RtmpPush
	//	*SourceAddress_SrtPush
	//	*SourceAddress_RtmpPull
	//	*SourceAddress_SrtPull
	//	*SourceAddress_Dynamic
	Type isSourceAddress_Type `protobuf_oneof:"type"`
}

func (x *SourceAddress) Reset() {
	*x = SourceAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SourceAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceAddress) ProtoMessage() {}

func (x *SourceAddress) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceAddress.ProtoReflect.Descriptor instead.
func (*SourceAddress) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{26}
}

func (m *SourceAddress) GetType() isSourceAddress_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *SourceAddress) GetRtmpPush() *SourceRtmpPushAddress {
	if x, ok := x.GetType().(*SourceAddress_RtmpPush); ok {
		return x.RtmpPush
	}
	return nil
}

func (x *SourceAddress) GetSrtPush() *SrtPushAddress {
	if x, ok := x.GetType().(*SourceAddress_SrtPush); ok {
		return x.SrtPush
	}
	return nil
}

func (x *SourceAddress) GetRtmpPull() *RtmpPullAddress {
	if x, ok := x.GetType().(*SourceAddress_RtmpPull); ok {
		return x.RtmpPull
	}
	return nil
}

func (x *SourceAddress) GetSrtPull() *SrtPullAddress {
	if x, ok := x.GetType().(*SourceAddress_SrtPull); ok {
		return x.SrtPull
	}
	return nil
}

func (x *SourceAddress) GetDynamic() *DynamicAddress {
	if x, ok := x.GetType().(*SourceAddress_Dynamic); ok {
		return x.Dynamic
	}
	return nil
}

type isSourceAddress_Type interface {
	isSourceAddress_Type()
}

type SourceAddress_RtmpPush struct {
	// rtmp push addressing
	RtmpPush *SourceRtmpPushAddress `protobuf:"bytes,1,opt,name=rtmp_push,json=rtmpPush,proto3,oneof"`
}

type SourceAddress_SrtPush struct {
	// the srt address to publish to
	SrtPush *SrtPushAddress `protobuf:"bytes,2,opt,name=srt_push,json=srtPush,proto3,oneof"`
}

type SourceAddress_RtmpPull struct {
	// the rtmp address to pull from
	RtmpPull *RtmpPullAddress `protobuf:"bytes,3,opt,name=rtmp_pull,json=rtmpPull,proto3,oneof"`
}

type SourceAddress_SrtPull struct {
	// the srt address to pull from
	SrtPull *SrtPullAddress `protobuf:"bytes,4,opt,name=srt_pull,json=srtPull,proto3,oneof"`
}

type SourceAddress_Dynamic struct {
	// configuration is provided when launching a broadcast.
	Dynamic *DynamicAddress `protobuf:"bytes,5,opt,name=dynamic,proto3,oneof"`
}

func (*SourceAddress_RtmpPush) isSourceAddress_Type() {}

func (*SourceAddress_SrtPush) isSourceAddress_Type() {}

func (*SourceAddress_RtmpPull) isSourceAddress_Type() {}

func (*SourceAddress_SrtPull) isSourceAddress_Type() {}

func (*SourceAddress_Dynamic) isSourceAddress_Type() {}

// rtmp push destination address
type DestinationRtmpPushAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// rtmp stream key
	Key *string `protobuf:"bytes,1,opt,name=key,proto3,oneof" json:"key,omitempty"`
	// rtmp destination url
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *DestinationRtmpPushAddress) Reset() {
	*x = DestinationRtmpPushAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestinationRtmpPushAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestinationRtmpPushAddress) ProtoMessage() {}

func (x *DestinationRtmpPushAddress) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestinationRtmpPushAddress.ProtoReflect.Descriptor instead.
func (*DestinationRtmpPushAddress) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{27}
}

func (x *DestinationRtmpPushAddress) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *DestinationRtmpPushAddress) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

// srt push destination address
type DestinationSrtPushAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// srt destination url
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *DestinationSrtPushAddress) Reset() {
	*x = DestinationSrtPushAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestinationSrtPushAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestinationSrtPushAddress) ProtoMessage() {}

func (x *DestinationSrtPushAddress) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestinationSrtPushAddress.ProtoReflect.Descriptor instead.
func (*DestinationSrtPushAddress) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{28}
}

func (x *DestinationSrtPushAddress) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

// Agora push addressing
type DestinationAgoraPushAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Agora app id
	AppId string `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	// Agora channel id
	ChannelId string `protobuf:"bytes,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	// Agora user id
	UserId string `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *DestinationAgoraPushAddress) Reset() {
	*x = DestinationAgoraPushAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestinationAgoraPushAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestinationAgoraPushAddress) ProtoMessage() {}

func (x *DestinationAgoraPushAddress) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestinationAgoraPushAddress.ProtoReflect.Descriptor instead.
func (*DestinationAgoraPushAddress) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{29}
}

func (x *DestinationAgoraPushAddress) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *DestinationAgoraPushAddress) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *DestinationAgoraPushAddress) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// live hls lifecycle management
type HlsLifecycleLive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// number of entries to advertise in playlist file
	PlaylistCount *int32 `protobuf:"varint,1,opt,name=playlist_count,json=playlistCount,proto3,oneof" json:"playlist_count,omitempty"`
	// number of files to keep on disk
	FileCount *int32 `protobuf:"varint,2,opt,name=file_count,json=fileCount,proto3,oneof" json:"file_count,omitempty"`
}

func (x *HlsLifecycleLive) Reset() {
	*x = HlsLifecycleLive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HlsLifecycleLive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HlsLifecycleLive) ProtoMessage() {}

func (x *HlsLifecycleLive) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HlsLifecycleLive.ProtoReflect.Descriptor instead.
func (*HlsLifecycleLive) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{30}
}

func (x *HlsLifecycleLive) GetPlaylistCount() int32 {
	if x != nil && x.PlaylistCount != nil {
		return *x.PlaylistCount
	}
	return 0
}

func (x *HlsLifecycleLive) GetFileCount() int32 {
	if x != nil && x.FileCount != nil {
		return *x.FileCount
	}
	return 0
}

// vod hls lifecycle management
type HlsLifecycleVod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// max duration of the recording in ms (0 is indefinite)
	MaxDuration *int32 `protobuf:"varint,1,opt,name=max_duration,json=maxDuration,proto3,oneof" json:"max_duration,omitempty"`
}

func (x *HlsLifecycleVod) Reset() {
	*x = HlsLifecycleVod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HlsLifecycleVod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HlsLifecycleVod) ProtoMessage() {}

func (x *HlsLifecycleVod) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HlsLifecycleVod.ProtoReflect.Descriptor instead.
func (*HlsLifecycleVod) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{31}
}

func (x *HlsLifecycleVod) GetMaxDuration() int32 {
	if x != nil && x.MaxDuration != nil {
		return *x.MaxDuration
	}
	return 0
}

// hls lifecycle management
type HlsLifecycle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*HlsLifecycle_Vod
	//	*HlsLifecycle_Live
	Type isHlsLifecycle_Type `protobuf_oneof:"type"`
}

func (x *HlsLifecycle) Reset() {
	*x = HlsLifecycle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HlsLifecycle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HlsLifecycle) ProtoMessage() {}

func (x *HlsLifecycle) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HlsLifecycle.ProtoReflect.Descriptor instead.
func (*HlsLifecycle) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{32}
}

func (m *HlsLifecycle) GetType() isHlsLifecycle_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *HlsLifecycle) GetVod() *HlsLifecycleVod {
	if x, ok := x.GetType().(*HlsLifecycle_Vod); ok {
		return x.Vod
	}
	return nil
}

func (x *HlsLifecycle) GetLive() *HlsLifecycleLive {
	if x, ok := x.GetType().(*HlsLifecycle_Live); ok {
		return x.Live
	}
	return nil
}

type isHlsLifecycle_Type interface {
	isHlsLifecycle_Type()
}

type HlsLifecycle_Vod struct {
	// lifecycle of vod
	Vod *HlsLifecycleVod `protobuf:"bytes,1,opt,name=vod,proto3,oneof"`
}

type HlsLifecycle_Live struct {
	// lifecycle of live
	Live *HlsLifecycleLive `protobuf:"bytes,2,opt,name=live,proto3,oneof"`
}

func (*HlsLifecycle_Vod) isHlsLifecycle_Type() {}

func (*HlsLifecycle_Live) isHlsLifecycle_Type() {}

// hls packaging options
type HlsPackaging struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// lifecycle of hls segments
	Lifecycle *HlsLifecycle `protobuf:"bytes,1,opt,name=lifecycle,proto3" json:"lifecycle,omitempty"`
	// duration of segments in ms
	SegmentDuration *int32 `protobuf:"varint,2,opt,name=segment_duration,json=segmentDuration,proto3,oneof" json:"segment_duration,omitempty"`
}

func (x *HlsPackaging) Reset() {
	*x = HlsPackaging{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HlsPackaging) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HlsPackaging) ProtoMessage() {}

func (x *HlsPackaging) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HlsPackaging.ProtoReflect.Descriptor instead.
func (*HlsPackaging) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{33}
}

func (x *HlsPackaging) GetLifecycle() *HlsLifecycle {
	if x != nil {
		return x.Lifecycle
	}
	return nil
}

func (x *HlsPackaging) GetSegmentDuration() int32 {
	if x != nil && x.SegmentDuration != nil {
		return *x.SegmentDuration
	}
	return 0
}

// packaging options for object storage
type ObjectStoragePackaging struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*ObjectStoragePackaging_Hls
	Type isObjectStoragePackaging_Type `protobuf_oneof:"type"`
}

func (x *ObjectStoragePackaging) Reset() {
	*x = ObjectStoragePackaging{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectStoragePackaging) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectStoragePackaging) ProtoMessage() {}

func (x *ObjectStoragePackaging) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectStoragePackaging.ProtoReflect.Descriptor instead.
func (*ObjectStoragePackaging) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{34}
}

func (m *ObjectStoragePackaging) GetType() isObjectStoragePackaging_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *ObjectStoragePackaging) GetHls() *HlsPackaging {
	if x, ok := x.GetType().(*ObjectStoragePackaging_Hls); ok {
		return x.Hls
	}
	return nil
}

type isObjectStoragePackaging_Type interface {
	isObjectStoragePackaging_Type()
}

type ObjectStoragePackaging_Hls struct {
	// hls format
	Hls *HlsPackaging `protobuf:"bytes,1,opt,name=hls,proto3,oneof"`
}

func (*ObjectStoragePackaging_Hls) isObjectStoragePackaging_Type() {}

// webrtc addressing parameters
type PreviewWebRtcAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// request rtmp preview
	Enabled *bool `protobuf:"varint,1,opt,name=enabled,proto3,oneof" json:"enabled,omitempty"`
	// the name this source will use in the webrtc room
	DisplayName *string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3,oneof" json:"display_name,omitempty"`
	// the id this source was assigned in the webrtc room
	ParticipantId *string `protobuf:"bytes,3,opt,name=participant_id,json=participantId,proto3,oneof" json:"participant_id,omitempty"`
}

func (x *PreviewWebRtcAddress) Reset() {
	*x = PreviewWebRtcAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreviewWebRtcAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreviewWebRtcAddress) ProtoMessage() {}

func (x *PreviewWebRtcAddress) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreviewWebRtcAddress.ProtoReflect.Descriptor instead.
func (*PreviewWebRtcAddress) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{35}
}

func (x *PreviewWebRtcAddress) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *PreviewWebRtcAddress) GetDisplayName() string {
	if x != nil && x.DisplayName != nil {
		return *x.DisplayName
	}
	return ""
}

func (x *PreviewWebRtcAddress) GetParticipantId() string {
	if x != nil && x.ParticipantId != nil {
		return *x.ParticipantId
	}
	return ""
}

type S3StorageAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// cloud region
	Region string `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`
	// cloud bucket
	Bucket string `protobuf:"bytes,2,opt,name=bucket,proto3" json:"bucket,omitempty"`
	// cloud bucket prefix
	Prefix *string `protobuf:"bytes,3,opt,name=prefix,proto3,oneof" json:"prefix,omitempty"`
	// cloud access key
	AccessKey string `protobuf:"bytes,4,opt,name=access_key,json=accessKey,proto3" json:"access_key,omitempty"`
	// cloud secret key
	SecretKey string `protobuf:"bytes,5,opt,name=secret_key,json=secretKey,proto3" json:"secret_key,omitempty"`
	// token based auth
	Token *string `protobuf:"bytes,6,opt,name=token,proto3,oneof" json:"token,omitempty"`
	// token duration in ms
	TokenDuration *int32 `protobuf:"varint,7,opt,name=token_duration,json=tokenDuration,proto3,oneof" json:"token_duration,omitempty"`
	// access control list
	Acl *S3ACL `protobuf:"varint,8,opt,name=acl,proto3,enum=live.v21.S3ACL,oneof" json:"acl,omitempty"`
	// endpoint for non aws s3 destinations
	Endpoint *string `protobuf:"bytes,9,opt,name=endpoint,proto3,oneof" json:"endpoint,omitempty"`
	// the format of the files to be written
	Packaging *ObjectStoragePackaging `protobuf:"bytes,10,opt,name=packaging,proto3" json:"packaging,omitempty"`
}

func (x *S3StorageAddress) Reset() {
	*x = S3StorageAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S3StorageAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3StorageAddress) ProtoMessage() {}

func (x *S3StorageAddress) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3StorageAddress.ProtoReflect.Descriptor instead.
func (*S3StorageAddress) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{36}
}

func (x *S3StorageAddress) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *S3StorageAddress) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

func (x *S3StorageAddress) GetPrefix() string {
	if x != nil && x.Prefix != nil {
		return *x.Prefix
	}
	return ""
}

func (x *S3StorageAddress) GetAccessKey() string {
	if x != nil {
		return x.AccessKey
	}
	return ""
}

func (x *S3StorageAddress) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

func (x *S3StorageAddress) GetToken() string {
	if x != nil && x.Token != nil {
		return *x.Token
	}
	return ""
}

func (x *S3StorageAddress) GetTokenDuration() int32 {
	if x != nil && x.TokenDuration != nil {
		return *x.TokenDuration
	}
	return 0
}

func (x *S3StorageAddress) GetAcl() S3ACL {
	if x != nil && x.Acl != nil {
		return *x.Acl
	}
	return S3ACL_S3ACL_UNSPECIFIED
}

func (x *S3StorageAddress) GetEndpoint() string {
	if x != nil && x.Endpoint != nil {
		return *x.Endpoint
	}
	return ""
}

func (x *S3StorageAddress) GetPackaging() *ObjectStoragePackaging {
	if x != nil {
		return x.Packaging
	}
	return nil
}

// destination address (select one)
type DestinationAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*DestinationAddress_RtmpPush
	//	*DestinationAddress_Agora
	//	*DestinationAddress_S3Storage
	//	*DestinationAddress_SrtPush
	//	*DestinationAddress_WebrtcPreview
	Type isDestinationAddress_Type `protobuf_oneof:"type"`
}

func (x *DestinationAddress) Reset() {
	*x = DestinationAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestinationAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestinationAddress) ProtoMessage() {}

func (x *DestinationAddress) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestinationAddress.ProtoReflect.Descriptor instead.
func (*DestinationAddress) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{37}
}

func (m *DestinationAddress) GetType() isDestinationAddress_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *DestinationAddress) GetRtmpPush() *DestinationRtmpPushAddress {
	if x, ok := x.GetType().(*DestinationAddress_RtmpPush); ok {
		return x.RtmpPush
	}
	return nil
}

func (x *DestinationAddress) GetAgora() *DestinationAgoraPushAddress {
	if x, ok := x.GetType().(*DestinationAddress_Agora); ok {
		return x.Agora
	}
	return nil
}

func (x *DestinationAddress) GetS3Storage() *S3StorageAddress {
	if x, ok := x.GetType().(*DestinationAddress_S3Storage); ok {
		return x.S3Storage
	}
	return nil
}

func (x *DestinationAddress) GetSrtPush() *DestinationSrtPushAddress {
	if x, ok := x.GetType().(*DestinationAddress_SrtPush); ok {
		return x.SrtPush
	}
	return nil
}

func (x *DestinationAddress) GetWebrtcPreview() *PreviewWebRtcAddress {
	if x, ok := x.GetType().(*DestinationAddress_WebrtcPreview); ok {
		return x.WebrtcPreview
	}
	return nil
}

type isDestinationAddress_Type interface {
	isDestinationAddress_Type()
}

type DestinationAddress_RtmpPush struct {
	// rtmp push addressing
	RtmpPush *DestinationRtmpPushAddress `protobuf:"bytes,1,opt,name=rtmp_push,json=rtmpPush,proto3,oneof"`
}

type DestinationAddress_Agora struct {
	// Agora addressing
	Agora *DestinationAgoraPushAddress `protobuf:"bytes,2,opt,name=agora,proto3,oneof"`
}

type DestinationAddress_S3Storage struct {
	// s3 storage addressing
	S3Storage *S3StorageAddress `protobuf:"bytes,3,opt,name=s3_storage,json=s3Storage,proto3,oneof"`
}

type DestinationAddress_SrtPush struct {
	// srt push addressing
	SrtPush *DestinationSrtPushAddress `protobuf:"bytes,4,opt,name=srt_push,json=srtPush,proto3,oneof"`
}

type DestinationAddress_WebrtcPreview struct {
	// webrtc addressing
	WebrtcPreview *PreviewWebRtcAddress `protobuf:"bytes,5,opt,name=webrtc_preview,json=webrtcPreview,proto3,oneof"`
}

func (*DestinationAddress_RtmpPush) isDestinationAddress_Type() {}

func (*DestinationAddress_Agora) isDestinationAddress_Type() {}

func (*DestinationAddress_S3Storage) isDestinationAddress_Type() {}

func (*DestinationAddress_SrtPush) isDestinationAddress_Type() {}

func (*DestinationAddress_WebrtcPreview) isDestinationAddress_Type() {}

// triggers to indicate what actions to take on the project for a given Source
type SourceTrigger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the id of the source
	SourceId string `protobuf:"bytes,1,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`
	// source should trigger project(s) to start
	Start *SourceTriggerAction `protobuf:"varint,2,opt,name=start,proto3,enum=live.v21.SourceTriggerAction,oneof" json:"start,omitempty"`
	// source should trigger project(s) to stop
	Stop *SourceTriggerAction `protobuf:"varint,3,opt,name=stop,proto3,enum=live.v21.SourceTriggerAction,oneof" json:"stop,omitempty"`
}

func (x *SourceTrigger) Reset() {
	*x = SourceTrigger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SourceTrigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceTrigger) ProtoMessage() {}

func (x *SourceTrigger) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceTrigger.ProtoReflect.Descriptor instead.
func (*SourceTrigger) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{38}
}

func (x *SourceTrigger) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

func (x *SourceTrigger) GetStart() SourceTriggerAction {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return SourceTriggerAction_SOURCE_TRIGGER_ACTION_UNSPECIFIED
}

func (x *SourceTrigger) GetStop() SourceTriggerAction {
	if x != nil && x.Stop != nil {
		return *x.Stop
	}
	return SourceTriggerAction_SOURCE_TRIGGER_ACTION_UNSPECIFIED
}

type WebRtcTrigger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// webrtc stop should trigger project to stop
	Stop *SourceTriggerAction `protobuf:"varint,3,opt,name=stop,proto3,enum=live.v21.SourceTriggerAction,oneof" json:"stop,omitempty"`
}

func (x *WebRtcTrigger) Reset() {
	*x = WebRtcTrigger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebRtcTrigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebRtcTrigger) ProtoMessage() {}

func (x *WebRtcTrigger) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebRtcTrigger.ProtoReflect.Descriptor instead.
func (*WebRtcTrigger) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{39}
}

func (x *WebRtcTrigger) GetStop() SourceTriggerAction {
	if x != nil && x.Stop != nil {
		return *x.Stop
	}
	return SourceTriggerAction_SOURCE_TRIGGER_ACTION_UNSPECIFIED
}

// the trigger type (select one)
type ProjectTrigger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*ProjectTrigger_Source
	Type isProjectTrigger_Type `protobuf_oneof:"type"`
}

func (x *ProjectTrigger) Reset() {
	*x = ProjectTrigger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectTrigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectTrigger) ProtoMessage() {}

func (x *ProjectTrigger) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectTrigger.ProtoReflect.Descriptor instead.
func (*ProjectTrigger) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{40}
}

func (m *ProjectTrigger) GetType() isProjectTrigger_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *ProjectTrigger) GetSource() *SourceTrigger {
	if x, ok := x.GetType().(*ProjectTrigger_Source); ok {
		return x.Source
	}
	return nil
}

type isProjectTrigger_Type interface {
	isProjectTrigger_Type()
}

type ProjectTrigger_Source struct {
	// start/stop project with source
	Source *SourceTrigger `protobuf:"bytes,1,opt,name=source,proto3,oneof"` // WebRtcTrigger webrtc = 2;
}

func (*ProjectTrigger_Source) isProjectTrigger_Type() {}

// request hls preview
type PreviewHlsPullAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// request hls preview
	Enabled *bool `protobuf:"varint,1,opt,name=enabled,proto3,oneof" json:"enabled,omitempty"`
	// hls manifest url
	Url *string `protobuf:"bytes,2,opt,name=url,proto3,oneof" json:"url,omitempty"`
}

func (x *PreviewHlsPullAddress) Reset() {
	*x = PreviewHlsPullAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreviewHlsPullAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreviewHlsPullAddress) ProtoMessage() {}

func (x *PreviewHlsPullAddress) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreviewHlsPullAddress.ProtoReflect.Descriptor instead.
func (*PreviewHlsPullAddress) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{41}
}

func (x *PreviewHlsPullAddress) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *PreviewHlsPullAddress) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

// addresses of source previews
type PreviewAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// hls preview address
	// optional PreviewHlsPullAddress hls = 1;
	// webrtc preview address
	Webrtc *PreviewWebRtcAddress `protobuf:"bytes,2,opt,name=webrtc,proto3,oneof" json:"webrtc,omitempty"`
}

func (x *PreviewAddress) Reset() {
	*x = PreviewAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreviewAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreviewAddress) ProtoMessage() {}

func (x *PreviewAddress) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreviewAddress.ProtoReflect.Descriptor instead.
func (*PreviewAddress) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{42}
}

func (x *PreviewAddress) GetWebrtc() *PreviewWebRtcAddress {
	if x != nil {
		return x.Webrtc
	}
	return nil
}

// compose using the studiosdk renderer
type StudioSdkComposition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the page to render studio kit with. If set, this takes priority over `version`
	RendererUrl *string `protobuf:"bytes,1,opt,name=renderer_url,json=rendererUrl,proto3,oneof" json:"renderer_url,omitempty"`
	// the version of the studio kit renderer to use. Ignored if renderer_url is set
	Version *string `protobuf:"bytes,2,opt,name=version,proto3,oneof" json:"version,omitempty"`
}

func (x *StudioSdkComposition) Reset() {
	*x = StudioSdkComposition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StudioSdkComposition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudioSdkComposition) ProtoMessage() {}

func (x *StudioSdkComposition) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudioSdkComposition.ProtoReflect.Descriptor instead.
func (*StudioSdkComposition) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{43}
}

func (x *StudioSdkComposition) GetRendererUrl() string {
	if x != nil && x.RendererUrl != nil {
		return *x.RendererUrl
	}
	return ""
}

func (x *StudioSdkComposition) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

// compose using the studio renderer
type StudioRendererComposition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the page to render studio kit with. If set, this takes priority over `version`
	RendererUrl *string `protobuf:"bytes,1,opt,name=renderer_url,json=rendererUrl,proto3,oneof" json:"renderer_url,omitempty"`
	// the version of the studio renderer to use. Ignored if renderer_url is set
	Version *string `protobuf:"bytes,2,opt,name=version,proto3,oneof" json:"version,omitempty"`
	// the active "scene" to render
	ActiveSceneId *string `protobuf:"bytes,3,opt,name=active_scene_id,json=activeSceneId,proto3,oneof" json:"active_scene_id,omitempty"`
}

func (x *StudioRendererComposition) Reset() {
	*x = StudioRendererComposition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StudioRendererComposition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudioRendererComposition) ProtoMessage() {}

func (x *StudioRendererComposition) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudioRendererComposition.ProtoReflect.Descriptor instead.
func (*StudioRendererComposition) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{44}
}

func (x *StudioRendererComposition) GetRendererUrl() string {
	if x != nil && x.RendererUrl != nil {
		return *x.RendererUrl
	}
	return ""
}

func (x *StudioRendererComposition) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

func (x *StudioRendererComposition) GetActiveSceneId() string {
	if x != nil && x.ActiveSceneId != nil {
		return *x.ActiveSceneId
	}
	return ""
}

// compose scenes using the browser-based compositor
type SceneComposition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the url to pass to the studiosdk
	RendererUrl *string `protobuf:"bytes,1,opt,name=renderer_url,json=rendererUrl,proto3,oneof" json:"renderer_url,omitempty"`
	// the active "scene" to render
	SelectedLayoutId *string `protobuf:"bytes,2,opt,name=selected_layout_id,json=selectedLayoutId,proto3,oneof" json:"selected_layout_id,omitempty"`
	Debug            *bool   `protobuf:"varint,3,opt,name=debug,proto3,oneof" json:"debug,omitempty"`
}

func (x *SceneComposition) Reset() {
	*x = SceneComposition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SceneComposition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SceneComposition) ProtoMessage() {}

func (x *SceneComposition) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SceneComposition.ProtoReflect.Descriptor instead.
func (*SceneComposition) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{45}
}

func (x *SceneComposition) GetRendererUrl() string {
	if x != nil && x.RendererUrl != nil {
		return *x.RendererUrl
	}
	return ""
}

func (x *SceneComposition) GetSelectedLayoutId() string {
	if x != nil && x.SelectedLayoutId != nil {
		return *x.SelectedLayoutId
	}
	return ""
}

func (x *SceneComposition) GetDebug() bool {
	if x != nil && x.Debug != nil {
		return *x.Debug
	}
	return false
}

// compose using an external renderer
type ExternalComposition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *ExternalComposition) Reset() {
	*x = ExternalComposition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalComposition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalComposition) ProtoMessage() {}

func (x *ExternalComposition) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalComposition.ProtoReflect.Descriptor instead.
func (*ExternalComposition) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{46}
}

func (x *ExternalComposition) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

// composition source for project (select one)
type Composition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*Composition_External
	//	*Composition_StudioSdk
	//	*Composition_StudioRenderer
	//	*Composition_Scene
	Type isComposition_Type `protobuf_oneof:"type"`
}

func (x *Composition) Reset() {
	*x = Composition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Composition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Composition) ProtoMessage() {}

func (x *Composition) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Composition.ProtoReflect.Descriptor instead.
func (*Composition) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{47}
}

func (m *Composition) GetType() isComposition_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *Composition) GetExternal() *ExternalComposition {
	if x, ok := x.GetType().(*Composition_External); ok {
		return x.External
	}
	return nil
}

func (x *Composition) GetStudioSdk() *StudioSdkComposition {
	if x, ok := x.GetType().(*Composition_StudioSdk); ok {
		return x.StudioSdk
	}
	return nil
}

func (x *Composition) GetStudioRenderer() *StudioRendererComposition {
	if x, ok := x.GetType().(*Composition_StudioRenderer); ok {
		return x.StudioRenderer
	}
	return nil
}

func (x *Composition) GetScene() *SceneComposition {
	if x, ok := x.GetType().(*Composition_Scene); ok {
		return x.Scene
	}
	return nil
}

type isComposition_Type interface {
	isComposition_Type()
}

type Composition_External struct {
	// compose using an external renderer
	External *ExternalComposition `protobuf:"bytes,1,opt,name=external,proto3,oneof"`
}

type Composition_StudioSdk struct {
	// compose using the studiosdk renderer
	StudioSdk *StudioSdkComposition `protobuf:"bytes,2,opt,name=studio_sdk,json=studioSdk,proto3,oneof"`
}

type Composition_StudioRenderer struct {
	// studio renderer url
	StudioRenderer *StudioRendererComposition `protobuf:"bytes,3,opt,name=studio_renderer,json=studioRenderer,proto3,oneof"`
}

type Composition_Scene struct {
	// compose scenes using the browser-based compositor
	Scene *SceneComposition `protobuf:"bytes,4,opt,name=scene,proto3,oneof"`
}

func (*Composition_External) isComposition_Type() {}

func (*Composition_StudioSdk) isComposition_Type() {}

func (*Composition_StudioRenderer) isComposition_Type() {}

func (*Composition_Scene) isComposition_Type() {}

// hosted webrtc configuration
type HostedWebRtc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// enable webrtc services
	Enabled *bool `protobuf:"varint,1,opt,name=enabled,proto3,oneof" json:"enabled,omitempty"`
}

func (x *HostedWebRtc) Reset() {
	*x = HostedWebRtc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostedWebRtc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostedWebRtc) ProtoMessage() {}

func (x *HostedWebRtc) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostedWebRtc.ProtoReflect.Descriptor instead.
func (*HostedWebRtc) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{48}
}

func (x *HostedWebRtc) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

// webrtc service (select one)
type WebRtc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*WebRtc_Hosted
	Type isWebRtc_Type `protobuf_oneof:"type"`
}

func (x *WebRtc) Reset() {
	*x = WebRtc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebRtc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebRtc) ProtoMessage() {}

func (x *WebRtc) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebRtc.ProtoReflect.Descriptor instead.
func (*WebRtc) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{49}
}

func (m *WebRtc) GetType() isWebRtc_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *WebRtc) GetHosted() *HostedWebRtc {
	if x, ok := x.GetType().(*WebRtc_Hosted); ok {
		return x.Hosted
	}
	return nil
}

type isWebRtc_Type interface {
	isWebRtc_Type()
}

type WebRtc_Hosted struct {
	// hosted webrtc configuration
	Hosted *HostedWebRtc `protobuf:"bytes,1,opt,name=hosted,proto3,oneof"`
}

func (*WebRtc_Hosted) isWebRtc_Type() {}

// webrtc access parameters
type WebRtcAccess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// access token for webrtc room
	AccessToken string `protobuf:"bytes,1,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	// the id this user was assigned in the webrtc room
	ParticipantId *string `protobuf:"bytes,3,opt,name=participant_id,json=participantId,proto3,oneof" json:"participant_id,omitempty"`
}

func (x *WebRtcAccess) Reset() {
	*x = WebRtcAccess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebRtcAccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebRtcAccess) ProtoMessage() {}

func (x *WebRtcAccess) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebRtcAccess.ProtoReflect.Descriptor instead.
func (*WebRtcAccess) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{50}
}

func (x *WebRtcAccess) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *WebRtcAccess) GetParticipantId() string {
	if x != nil && x.ParticipantId != nil {
		return *x.ParticipantId
	}
	return ""
}

// optimal location of broadcast (to optimize routing and delay)
type LatLong struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Latitude  float64 `protobuf:"fixed64,1,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude float64 `protobuf:"fixed64,2,opt,name=longitude,proto3" json:"longitude,omitempty"`
}

func (x *LatLong) Reset() {
	*x = LatLong{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LatLong) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LatLong) ProtoMessage() {}

func (x *LatLong) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LatLong.ProtoReflect.Descriptor instead.
func (*LatLong) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{51}
}

func (x *LatLong) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *LatLong) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

type DirectIngestUrl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If this is part of a dynamic source, this is the id provided.
	DynamicId *string `protobuf:"bytes,1,opt,name=dynamic_id,json=dynamicId,proto3,oneof" json:"dynamic_id,omitempty"`
	SourceId  *string `protobuf:"bytes,2,opt,name=source_id,json=sourceId,proto3,oneof" json:"source_id,omitempty"`
	// Types that are assignable to Type:
	//
	//	*DirectIngestUrl_RtmpPush
	//	*DirectIngestUrl_SrtPush
	Type isDirectIngestUrl_Type `protobuf_oneof:"type"`
}

func (x *DirectIngestUrl) Reset() {
	*x = DirectIngestUrl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DirectIngestUrl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DirectIngestUrl) ProtoMessage() {}

func (x *DirectIngestUrl) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DirectIngestUrl.ProtoReflect.Descriptor instead.
func (*DirectIngestUrl) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{52}
}

func (x *DirectIngestUrl) GetDynamicId() string {
	if x != nil && x.DynamicId != nil {
		return *x.DynamicId
	}
	return ""
}

func (x *DirectIngestUrl) GetSourceId() string {
	if x != nil && x.SourceId != nil {
		return *x.SourceId
	}
	return ""
}

func (m *DirectIngestUrl) GetType() isDirectIngestUrl_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *DirectIngestUrl) GetRtmpPush() *SourceRtmpPushAddress {
	if x, ok := x.GetType().(*DirectIngestUrl_RtmpPush); ok {
		return x.RtmpPush
	}
	return nil
}

func (x *DirectIngestUrl) GetSrtPush() *SrtPushAddress {
	if x, ok := x.GetType().(*DirectIngestUrl_SrtPush); ok {
		return x.SrtPush
	}
	return nil
}

type isDirectIngestUrl_Type interface {
	isDirectIngestUrl_Type()
}

type DirectIngestUrl_RtmpPush struct {
	// rtmp push addressing
	RtmpPush *SourceRtmpPushAddress `protobuf:"bytes,10,opt,name=rtmp_push,json=rtmpPush,proto3,oneof"`
}

type DirectIngestUrl_SrtPush struct {
	// the srt address to publish to
	SrtPush *SrtPushAddress `protobuf:"bytes,11,opt,name=srt_push,json=srtPush,proto3,oneof"`
}

func (*DirectIngestUrl_RtmpPush) isDirectIngestUrl_Type() {}

func (*DirectIngestUrl_SrtPush) isDirectIngestUrl_Type() {}

// broadcast status
type ProjectBroadcastStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// collection which owns the project which owns the broadcast
	CollectionId string `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	// project which owns the broadcast
	ProjectId   string  `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	BroadcastId *string `protobuf:"bytes,3,opt,name=broadcast_id,json=broadcastId,proto3,oneof" json:"broadcast_id,omitempty"`
	// broadcast duration (ms)
	Duration *uint32 `protobuf:"varint,4,opt,name=duration,proto3,oneof" json:"duration,omitempty"`
	// broadcast start timestamp (ISO8601 UTC)
	Start *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// broadcast stop timestamp (ISO8601 UTC)
	Stop *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=stop,proto3,oneof" json:"stop,omitempty"`
	// broadcast phase
	Phase ProjectBroadcastPhase `protobuf:"varint,7,opt,name=phase,proto3,enum=live.v21.ProjectBroadcastPhase" json:"phase,omitempty"`
	// region broadcast is located
	Region *Region `protobuf:"varint,8,opt,name=region,proto3,enum=live.v21.Region,oneof" json:"region,omitempty"`
	// datacenter broadcast is located
	Datacenter *string `protobuf:"bytes,9,opt,name=datacenter,proto3,oneof" json:"datacenter,omitempty"`
	// the direct ingests you can send video.
	DirectIngests []*DirectIngestUrl `protobuf:"bytes,10,rep,name=direct_ingests,json=directIngests,proto3" json:"direct_ingests,omitempty"`
	Origin        *BroadcastOrigin   `protobuf:"varint,11,opt,name=origin,proto3,enum=live.v21.BroadcastOrigin,oneof" json:"origin,omitempty"`
	// Types that are assignable to OriginMetadata:
	//
	//	*ProjectBroadcastStatus_OriginApiMetadata
	//	*ProjectBroadcastStatus_OriginSourceMetadata
	//	*ProjectBroadcastStatus_OriginExternalMetadata
	OriginMetadata isProjectBroadcastStatus_OriginMetadata `protobuf_oneof:"origin_metadata"`
}

func (x *ProjectBroadcastStatus) Reset() {
	*x = ProjectBroadcastStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectBroadcastStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectBroadcastStatus) ProtoMessage() {}

func (x *ProjectBroadcastStatus) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectBroadcastStatus.ProtoReflect.Descriptor instead.
func (*ProjectBroadcastStatus) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{53}
}

func (x *ProjectBroadcastStatus) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

func (x *ProjectBroadcastStatus) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *ProjectBroadcastStatus) GetBroadcastId() string {
	if x != nil && x.BroadcastId != nil {
		return *x.BroadcastId
	}
	return ""
}

func (x *ProjectBroadcastStatus) GetDuration() uint32 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

func (x *ProjectBroadcastStatus) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *ProjectBroadcastStatus) GetStop() *timestamppb.Timestamp {
	if x != nil {
		return x.Stop
	}
	return nil
}

func (x *ProjectBroadcastStatus) GetPhase() ProjectBroadcastPhase {
	if x != nil {
		return x.Phase
	}
	return ProjectBroadcastPhase_PROJECT_BROADCAST_PHASE_UNSPECIFIED
}

func (x *ProjectBroadcastStatus) GetRegion() Region {
	if x != nil && x.Region != nil {
		return *x.Region
	}
	return Region_REGION_UNSPECIFIED
}

func (x *ProjectBroadcastStatus) GetDatacenter() string {
	if x != nil && x.Datacenter != nil {
		return *x.Datacenter
	}
	return ""
}

func (x *ProjectBroadcastStatus) GetDirectIngests() []*DirectIngestUrl {
	if x != nil {
		return x.DirectIngests
	}
	return nil
}

func (x *ProjectBroadcastStatus) GetOrigin() BroadcastOrigin {
	if x != nil && x.Origin != nil {
		return *x.Origin
	}
	return BroadcastOrigin_BROADCAST_ORIGIN_UNSPECIFIED
}

func (m *ProjectBroadcastStatus) GetOriginMetadata() isProjectBroadcastStatus_OriginMetadata {
	if m != nil {
		return m.OriginMetadata
	}
	return nil
}

func (x *ProjectBroadcastStatus) GetOriginApiMetadata() *structpb.Value {
	if x, ok := x.GetOriginMetadata().(*ProjectBroadcastStatus_OriginApiMetadata); ok {
		return x.OriginApiMetadata
	}
	return nil
}

func (x *ProjectBroadcastStatus) GetOriginSourceMetadata() *BroadcastOriginSourceMetadata {
	if x, ok := x.GetOriginMetadata().(*ProjectBroadcastStatus_OriginSourceMetadata); ok {
		return x.OriginSourceMetadata
	}
	return nil
}

func (x *ProjectBroadcastStatus) GetOriginExternalMetadata() *BroadcastOriginExternalMetadata {
	if x, ok := x.GetOriginMetadata().(*ProjectBroadcastStatus_OriginExternalMetadata); ok {
		return x.OriginExternalMetadata
	}
	return nil
}

type isProjectBroadcastStatus_OriginMetadata interface {
	isProjectBroadcastStatus_OriginMetadata()
}

type ProjectBroadcastStatus_OriginApiMetadata struct {
	// present if broadcast_origin is BROADCAST_ORIGIN_API, contains metadata from consumer
	OriginApiMetadata *structpb.Value `protobuf:"bytes,12,opt,name=origin_api_metadata,json=originApiMetadata,proto3,oneof"`
}

type ProjectBroadcastStatus_OriginSourceMetadata struct {
	// present if broadcast_origin is BROADCAST_ORIGIN_SOURCE, contains metadata from source
	OriginSourceMetadata *BroadcastOriginSourceMetadata `protobuf:"bytes,13,opt,name=origin_source_metadata,json=originSourceMetadata,proto3,oneof"`
}

type ProjectBroadcastStatus_OriginExternalMetadata struct {
	// present if broadcast_origin is BROADCAST_ORIGIN_EXTERNAL, contains metadata from an external integration starting the broadcast
	OriginExternalMetadata *BroadcastOriginExternalMetadata `protobuf:"bytes,14,opt,name=origin_external_metadata,json=originExternalMetadata,proto3,oneof"`
}

func (*ProjectBroadcastStatus_OriginApiMetadata) isProjectBroadcastStatus_OriginMetadata() {}

func (*ProjectBroadcastStatus_OriginSourceMetadata) isProjectBroadcastStatus_OriginMetadata() {}

func (*ProjectBroadcastStatus_OriginExternalMetadata) isProjectBroadcastStatus_OriginMetadata() {}

// collection live source
type Source struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// collection which owns the source
	CollectionId string `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	// collection source id
	SourceId string `protobuf:"bytes,2,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`
	// arbitrary metadata associated with this collection source
	Metadata *structpb.Value `protobuf:"bytes,3,opt,name=metadata,proto3,oneof" json:"metadata,omitempty"`
	// preview addresses
	Preview *PreviewAddress `protobuf:"bytes,4,opt,name=preview,proto3,oneof" json:"preview,omitempty"`
	// source address
	Address *SourceAddress `protobuf:"bytes,6,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *Source) Reset() {
	*x = Source{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Source) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Source) ProtoMessage() {}

func (x *Source) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Source.ProtoReflect.Descriptor instead.
func (*Source) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{54}
}

func (x *Source) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

func (x *Source) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

func (x *Source) GetMetadata() *structpb.Value {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Source) GetPreview() *PreviewAddress {
	if x != nil {
		return x.Preview
	}
	return nil
}

func (x *Source) GetAddress() *SourceAddress {
	if x != nil {
		return x.Address
	}
	return nil
}

// streaming destination of project
type Destination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// collection which owns the project which owns the destination
	CollectionId string `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	// project which owns the destination
	ProjectId string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// destination id
	DestinationId string `protobuf:"bytes,3,opt,name=destination_id,json=destinationId,proto3" json:"destination_id,omitempty"`
	// arbitrary metadata associated with this destination
	Metadata *structpb.Value `protobuf:"bytes,4,opt,name=metadata,proto3,oneof" json:"metadata,omitempty"`
	// is output stream enabled?
	Enabled *bool `protobuf:"varint,5,opt,name=enabled,proto3,oneof" json:"enabled,omitempty"`
	// address of the destination
	Address *DestinationAddress `protobuf:"bytes,6,opt,name=address,proto3" json:"address,omitempty"`
	// timeout (ms) to wait before resetting a connection
	Timeout *uint32 `protobuf:"varint,7,opt,name=timeout,proto3,oneof" json:"timeout,omitempty"`
	// output delay (in milliseconds) to add to the destination
	// note: adjusting this will cause broadcast stop to be delayed
	OutputDelay *uint32 `protobuf:"varint,9,opt,name=output_delay,json=outputDelay,proto3,oneof" json:"output_delay,omitempty"`
}

func (x *Destination) Reset() {
	*x = Destination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Destination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Destination) ProtoMessage() {}

func (x *Destination) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Destination.ProtoReflect.Descriptor instead.
func (*Destination) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{55}
}

func (x *Destination) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

func (x *Destination) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *Destination) GetDestinationId() string {
	if x != nil {
		return x.DestinationId
	}
	return ""
}

func (x *Destination) GetMetadata() *structpb.Value {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Destination) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *Destination) GetAddress() *DestinationAddress {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *Destination) GetTimeout() uint32 {
	if x != nil && x.Timeout != nil {
		return *x.Timeout
	}
	return 0
}

func (x *Destination) GetOutputDelay() uint32 {
	if x != nil && x.OutputDelay != nil {
		return *x.OutputDelay
	}
	return 0
}

// project which owns a broadcast, sources, and destinations
type Project struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// collection which owns the project
	CollectionId string `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	// project id
	ProjectId string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// arbitrary metadata associated with this project
	Metadata *structpb.Value `protobuf:"bytes,3,opt,name=metadata,proto3,oneof" json:"metadata,omitempty"`
	// composition parameters
	Rendering *Rendering `protobuf:"bytes,4,opt,name=rendering,proto3" json:"rendering,omitempty"`
	// encoding parameters
	Encoding *Encoding `protobuf:"bytes,5,opt,name=encoding,proto3" json:"encoding,omitempty"`
	// collection live sources added to this project
	Sources []*Source `protobuf:"bytes,6,rep,name=sources,proto3" json:"sources,omitempty"`
	// destinations associated with this project
	Destinations []*Destination `protobuf:"bytes,7,rep,name=destinations,proto3" json:"destinations,omitempty"`
	// composition/layout source of the broadcast
	Composition *Composition `protobuf:"bytes,8,opt,name=composition,proto3" json:"composition,omitempty"`
	// maximum duration (ms) of project broadcasts
	MaxDuration *uint32 `protobuf:"varint,9,opt,name=max_duration,json=maxDuration,proto3,oneof" json:"max_duration,omitempty"`
	// configuration for webrtc services (if requested)
	Webrtc *WebRtc `protobuf:"bytes,10,opt,name=webrtc,proto3,oneof" json:"webrtc,omitempty"`
	// external triggers to start and stop this broadcast
	Triggers []*ProjectTrigger `protobuf:"bytes,11,rep,name=triggers,proto3" json:"triggers,omitempty"`
	// optional optimal location to start broadcast
	Location *LatLong `protobuf:"bytes,12,opt,name=location,proto3,oneof" json:"location,omitempty"`
}

func (x *Project) Reset() {
	*x = Project{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Project) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Project) ProtoMessage() {}

func (x *Project) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Project.ProtoReflect.Descriptor instead.
func (*Project) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{56}
}

func (x *Project) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

func (x *Project) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *Project) GetMetadata() *structpb.Value {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Project) GetRendering() *Rendering {
	if x != nil {
		return x.Rendering
	}
	return nil
}

func (x *Project) GetEncoding() *Encoding {
	if x != nil {
		return x.Encoding
	}
	return nil
}

func (x *Project) GetSources() []*Source {
	if x != nil {
		return x.Sources
	}
	return nil
}

func (x *Project) GetDestinations() []*Destination {
	if x != nil {
		return x.Destinations
	}
	return nil
}

func (x *Project) GetComposition() *Composition {
	if x != nil {
		return x.Composition
	}
	return nil
}

func (x *Project) GetMaxDuration() uint32 {
	if x != nil && x.MaxDuration != nil {
		return *x.MaxDuration
	}
	return 0
}

func (x *Project) GetWebrtc() *WebRtc {
	if x != nil {
		return x.Webrtc
	}
	return nil
}

func (x *Project) GetTriggers() []*ProjectTrigger {
	if x != nil {
		return x.Triggers
	}
	return nil
}

func (x *Project) GetLocation() *LatLong {
	if x != nil {
		return x.Location
	}
	return nil
}

// a Collection of Projects and Sources
type Collection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// collection id
	CollectionId string `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	// arbitrary metadata associated with this collection
	Metadata *structpb.Value `protobuf:"bytes,2,opt,name=metadata,proto3,oneof" json:"metadata,omitempty"`
	// projects owned by this collection
	Projects []*Project `protobuf:"bytes,3,rep,name=projects,proto3" json:"projects,omitempty"`
	// collection live sources owned by this collection
	Sources []*Source `protobuf:"bytes,4,rep,name=sources,proto3" json:"sources,omitempty"`
}

func (x *Collection) Reset() {
	*x = Collection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Collection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Collection) ProtoMessage() {}

func (x *Collection) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Collection.ProtoReflect.Descriptor instead.
func (*Collection) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{57}
}

func (x *Collection) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

func (x *Collection) GetMetadata() *structpb.Value {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Collection) GetProjects() []*Project {
	if x != nil {
		return x.Projects
	}
	return nil
}

func (x *Collection) GetSources() []*Source {
	if x != nil {
		return x.Sources
	}
	return nil
}

type CreateCollectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// arbitrary metadata to associate with this collection
	Metadata *structpb.Value `protobuf:"bytes,1,opt,name=metadata,proto3,oneof" json:"metadata,omitempty"`
}

func (x *CreateCollectionRequest) Reset() {
	*x = CreateCollectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCollectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCollectionRequest) ProtoMessage() {}

func (x *CreateCollectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCollectionRequest.ProtoReflect.Descriptor instead.
func (*CreateCollectionRequest) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{58}
}

func (x *CreateCollectionRequest) GetMetadata() *structpb.Value {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type CreateCollectionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Collection *Collection `protobuf:"bytes,1,opt,name=collection,proto3" json:"collection,omitempty"`
}

func (x *CreateCollectionResponse) Reset() {
	*x = CreateCollectionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCollectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCollectionResponse) ProtoMessage() {}

func (x *CreateCollectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCollectionResponse.ProtoReflect.Descriptor instead.
func (*CreateCollectionResponse) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{59}
}

func (x *CreateCollectionResponse) GetCollection() *Collection {
	if x != nil {
		return x.Collection
	}
	return nil
}

type GetCollectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// collection id
	CollectionId string `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	// optionally populate projects
	PopulateProjects *bool `protobuf:"varint,2,opt,name=populate_projects,json=populateProjects,proto3,oneof" json:"populate_projects,omitempty"`
	// optionally populate sources
	PopulateSources *bool `protobuf:"varint,3,opt,name=populate_sources,json=populateSources,proto3,oneof" json:"populate_sources,omitempty"`
}

func (x *GetCollectionRequest) Reset() {
	*x = GetCollectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCollectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCollectionRequest) ProtoMessage() {}

func (x *GetCollectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCollectionRequest.ProtoReflect.Descriptor instead.
func (*GetCollectionRequest) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{60}
}

func (x *GetCollectionRequest) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

func (x *GetCollectionRequest) GetPopulateProjects() bool {
	if x != nil && x.PopulateProjects != nil {
		return *x.PopulateProjects
	}
	return false
}

func (x *GetCollectionRequest) GetPopulateSources() bool {
	if x != nil && x.PopulateSources != nil {
		return *x.PopulateSources
	}
	return false
}

type GetCollectionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Collection *Collection `protobuf:"bytes,1,opt,name=collection,proto3" json:"collection,omitempty"`
}

func (x *GetCollectionResponse) Reset() {
	*x = GetCollectionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCollectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCollectionResponse) ProtoMessage() {}

func (x *GetCollectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCollectionResponse.ProtoReflect.Descriptor instead.
func (*GetCollectionResponse) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{61}
}

func (x *GetCollectionResponse) GetCollection() *Collection {
	if x != nil {
		return x.Collection
	}
	return nil
}

type UpdateCollectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// collection id
	CollectionId string `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	// fields to update
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// arbitrary metadata to associate with this collection
	Metadata *structpb.Value `protobuf:"bytes,3,opt,name=metadata,proto3,oneof" json:"metadata,omitempty"`
}

func (x *UpdateCollectionRequest) Reset() {
	*x = UpdateCollectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCollectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCollectionRequest) ProtoMessage() {}

func (x *UpdateCollectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCollectionRequest.ProtoReflect.Descriptor instead.
func (*UpdateCollectionRequest) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{62}
}

func (x *UpdateCollectionRequest) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

func (x *UpdateCollectionRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *UpdateCollectionRequest) GetMetadata() *structpb.Value {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type UpdateCollectionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the updated collection
	Collection *Collection `protobuf:"bytes,1,opt,name=collection,proto3" json:"collection,omitempty"`
}

func (x *UpdateCollectionResponse) Reset() {
	*x = UpdateCollectionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCollectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCollectionResponse) ProtoMessage() {}

func (x *UpdateCollectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCollectionResponse.ProtoReflect.Descriptor instead.
func (*UpdateCollectionResponse) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{63}
}

func (x *UpdateCollectionResponse) GetCollection() *Collection {
	if x != nil {
		return x.Collection
	}
	return nil
}

type DeleteCollectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// collection id
	CollectionId string `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	// forcibly end all child project broadcasts in progress
	Force *bool `protobuf:"varint,2,opt,name=force,proto3,oneof" json:"force,omitempty"`
}

func (x *DeleteCollectionRequest) Reset() {
	*x = DeleteCollectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCollectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCollectionRequest) ProtoMessage() {}

func (x *DeleteCollectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCollectionRequest.ProtoReflect.Descriptor instead.
func (*DeleteCollectionRequest) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{64}
}

func (x *DeleteCollectionRequest) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

func (x *DeleteCollectionRequest) GetForce() bool {
	if x != nil && x.Force != nil {
		return *x.Force
	}
	return false
}

type DeleteCollectionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// number of live sources owned by this collection which were deleted
	SourcesDeleted uint32 `protobuf:"varint,1,opt,name=sources_deleted,json=sourcesDeleted,proto3" json:"sources_deleted,omitempty"`
	// number of projects owned by this collection which were deleted
	ProjectsDeleted uint32 `protobuf:"varint,2,opt,name=projects_deleted,json=projectsDeleted,proto3" json:"projects_deleted,omitempty"`
	// project ids owned by this collection whose broadcasts were stopped
	ProjectIdsStopped []string `protobuf:"bytes,3,rep,name=project_ids_stopped,json=projectIdsStopped,proto3" json:"project_ids_stopped,omitempty"`
}

func (x *DeleteCollectionResponse) Reset() {
	*x = DeleteCollectionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCollectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCollectionResponse) ProtoMessage() {}

func (x *DeleteCollectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCollectionResponse.ProtoReflect.Descriptor instead.
func (*DeleteCollectionResponse) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{65}
}

func (x *DeleteCollectionResponse) GetSourcesDeleted() uint32 {
	if x != nil {
		return x.SourcesDeleted
	}
	return 0
}

func (x *DeleteCollectionResponse) GetProjectsDeleted() uint32 {
	if x != nil {
		return x.ProjectsDeleted
	}
	return 0
}

func (x *DeleteCollectionResponse) GetProjectIdsStopped() []string {
	if x != nil {
		return x.ProjectIdsStopped
	}
	return nil
}

type GetCollectionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetCollectionsRequest) Reset() {
	*x = GetCollectionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCollectionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCollectionsRequest) ProtoMessage() {}

func (x *GetCollectionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCollectionsRequest.ProtoReflect.Descriptor instead.
func (*GetCollectionsRequest) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{66}
}

type GetCollectionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// all collections owned by this user
	Collections []*Collection `protobuf:"bytes,1,rep,name=collections,proto3" json:"collections,omitempty"`
}

func (x *GetCollectionsResponse) Reset() {
	*x = GetCollectionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCollectionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCollectionsResponse) ProtoMessage() {}

func (x *GetCollectionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCollectionsResponse.ProtoReflect.Descriptor instead.
func (*GetCollectionsResponse) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{67}
}

func (x *GetCollectionsResponse) GetCollections() []*Collection {
	if x != nil {
		return x.Collections
	}
	return nil
}

type CreateProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// collection which will own this project
	CollectionId string `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	// arbitrary metadata to associate with this project
	Metadata *structpb.Value `protobuf:"bytes,2,opt,name=metadata,proto3,oneof" json:"metadata,omitempty"`
	// composition parameters
	Rendering *Rendering `protobuf:"bytes,3,opt,name=rendering,proto3,oneof" json:"rendering,omitempty"`
	// encoding parameters
	Encoding *Encoding `protobuf:"bytes,4,opt,name=encoding,proto3,oneof" json:"encoding,omitempty"`
	// composition/layout source of the broadcast
	Composition *Composition `protobuf:"bytes,5,opt,name=composition,proto3" json:"composition,omitempty"`
	// maximum duration of project broadcasts (ms)
	MaxDuration *uint32 `protobuf:"varint,6,opt,name=max_duration,json=maxDuration,proto3,oneof" json:"max_duration,omitempty"`
	// request webrtc services
	Webrtc *WebRtc `protobuf:"bytes,7,opt,name=webrtc,proto3,oneof" json:"webrtc,omitempty"`
	// optimal broadcast location (for routing and delay)
	Location *LatLong `protobuf:"bytes,9,opt,name=location,proto3,oneof" json:"location,omitempty"`
}

func (x *CreateProjectRequest) Reset() {
	*x = CreateProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProjectRequest) ProtoMessage() {}

func (x *CreateProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProjectRequest.ProtoReflect.Descriptor instead.
func (*CreateProjectRequest) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{68}
}

func (x *CreateProjectRequest) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

func (x *CreateProjectRequest) GetMetadata() *structpb.Value {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *CreateProjectRequest) GetRendering() *Rendering {
	if x != nil {
		return x.Rendering
	}
	return nil
}

func (x *CreateProjectRequest) GetEncoding() *Encoding {
	if x != nil {
		return x.Encoding
	}
	return nil
}

func (x *CreateProjectRequest) GetComposition() *Composition {
	if x != nil {
		return x.Composition
	}
	return nil
}

func (x *CreateProjectRequest) GetMaxDuration() uint32 {
	if x != nil && x.MaxDuration != nil {
		return *x.MaxDuration
	}
	return 0
}

func (x *CreateProjectRequest) GetWebrtc() *WebRtc {
	if x != nil {
		return x.Webrtc
	}
	return nil
}

func (x *CreateProjectRequest) GetLocation() *LatLong {
	if x != nil {
		return x.Location
	}
	return nil
}

type CreateProjectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Project *Project `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
}

func (x *CreateProjectResponse) Reset() {
	*x = CreateProjectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateProjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProjectResponse) ProtoMessage() {}

func (x *CreateProjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProjectResponse.ProtoReflect.Descriptor instead.
func (*CreateProjectResponse) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{69}
}

func (x *CreateProjectResponse) GetProject() *Project {
	if x != nil {
		return x.Project
	}
	return nil
}

type UpdateProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// collection which owns the project
	CollectionId string `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	// project id
	ProjectId string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// fields to update
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,3,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// arbitrary metadata to associate with this project
	Metadata *structpb.Value `protobuf:"bytes,4,opt,name=metadata,proto3,oneof" json:"metadata,omitempty"`
	// composition parameters
	Rendering *Rendering `protobuf:"bytes,5,opt,name=rendering,proto3,oneof" json:"rendering,omitempty"`
	// encoding parameters
	Encoding *Encoding `protobuf:"bytes,6,opt,name=encoding,proto3,oneof" json:"encoding,omitempty"`
	// composition/layout source of the broadcast
	Composition *Composition `protobuf:"bytes,7,opt,name=composition,proto3,oneof" json:"composition,omitempty"`
	// maximum duration of project broadcasts (ms)
	MaxDuration *uint32 `protobuf:"varint,8,opt,name=max_duration,json=maxDuration,proto3,oneof" json:"max_duration,omitempty"`
	// configuration for webrtc services (if requested)
	Webrtc *WebRtc `protobuf:"bytes,9,opt,name=webrtc,proto3,oneof" json:"webrtc,omitempty"`
	// optimal broadcast location (for routing and delay)
	Location *LatLong `protobuf:"bytes,10,opt,name=location,proto3,oneof" json:"location,omitempty"`
}

func (x *UpdateProjectRequest) Reset() {
	*x = UpdateProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProjectRequest) ProtoMessage() {}

func (x *UpdateProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProjectRequest.ProtoReflect.Descriptor instead.
func (*UpdateProjectRequest) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{70}
}

func (x *UpdateProjectRequest) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

func (x *UpdateProjectRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *UpdateProjectRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *UpdateProjectRequest) GetMetadata() *structpb.Value {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *UpdateProjectRequest) GetRendering() *Rendering {
	if x != nil {
		return x.Rendering
	}
	return nil
}

func (x *UpdateProjectRequest) GetEncoding() *Encoding {
	if x != nil {
		return x.Encoding
	}
	return nil
}

func (x *UpdateProjectRequest) GetComposition() *Composition {
	if x != nil {
		return x.Composition
	}
	return nil
}

func (x *UpdateProjectRequest) GetMaxDuration() uint32 {
	if x != nil && x.MaxDuration != nil {
		return *x.MaxDuration
	}
	return 0
}

func (x *UpdateProjectRequest) GetWebrtc() *WebRtc {
	if x != nil {
		return x.Webrtc
	}
	return nil
}

func (x *UpdateProjectRequest) GetLocation() *LatLong {
	if x != nil {
		return x.Location
	}
	return nil
}

type UpdateProjectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// updated project
	Project *Project `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	// indicates whether the broadcast was updated as a function of this request
	BroadcastUpdated bool `protobuf:"varint,2,opt,name=broadcast_updated,json=broadcastUpdated,proto3" json:"broadcast_updated,omitempty"`
}

func (x *UpdateProjectResponse) Reset() {
	*x = UpdateProjectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProjectResponse) ProtoMessage() {}

func (x *UpdateProjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProjectResponse.ProtoReflect.Descriptor instead.
func (*UpdateProjectResponse) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{71}
}

func (x *UpdateProjectResponse) GetProject() *Project {
	if x != nil {
		return x.Project
	}
	return nil
}

func (x *UpdateProjectResponse) GetBroadcastUpdated() bool {
	if x != nil {
		return x.BroadcastUpdated
	}
	return false
}

type DeleteProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// collection which owns the project
	CollectionId string `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	// project id
	ProjectId string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// forcibly end broadcast in progress
	Force *bool `protobuf:"varint,3,opt,name=force,proto3,oneof" json:"force,omitempty"`
}

func (x *DeleteProjectRequest) Reset() {
	*x = DeleteProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProjectRequest) ProtoMessage() {}

func (x *DeleteProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProjectRequest.ProtoReflect.Descriptor instead.
func (*DeleteProjectRequest) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{72}
}

func (x *DeleteProjectRequest) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

func (x *DeleteProjectRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *DeleteProjectRequest) GetForce() bool {
	if x != nil && x.Force != nil {
		return *x.Force
	}
	return false
}

type DeleteProjectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// was a broadcast stopped
	BroadcastStopped bool `protobuf:"varint,1,opt,name=broadcast_stopped,json=broadcastStopped,proto3" json:"broadcast_stopped,omitempty"`
	// the number of associated layouts deleted
	LayoutsDeleted uint32 `protobuf:"varint,2,opt,name=layouts_deleted,json=layoutsDeleted,proto3" json:"layouts_deleted,omitempty"`
}

func (x *DeleteProjectResponse) Reset() {
	*x = DeleteProjectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteProjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProjectResponse) ProtoMessage() {}

func (x *DeleteProjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProjectResponse.ProtoReflect.Descriptor instead.
func (*DeleteProjectResponse) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{73}
}

func (x *DeleteProjectResponse) GetBroadcastStopped() bool {
	if x != nil {
		return x.BroadcastStopped
	}
	return false
}

func (x *DeleteProjectResponse) GetLayoutsDeleted() uint32 {
	if x != nil {
		return x.LayoutsDeleted
	}
	return 0
}

type StartProjectBroadcastRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// collection which owns the project
	CollectionId string `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	// project id
	ProjectId string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// also start webrtc room
	WebrtcStart *bool `protobuf:"varint,3,opt,name=webrtc_start,json=webrtcStart,proto3,oneof" json:"webrtc_start,omitempty"`
	// whether to wait for the broadcast to be ready
	Async *bool `protobuf:"varint,4,opt,name=async,proto3,oneof" json:"async,omitempty"`
	// dynamic sources to start the broadcast with.
	DynamicSources map[string]*RuntimeSourceAddress `protobuf:"bytes,5,rep,name=dynamic_sources,json=dynamicSources,proto3" json:"dynamic_sources,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// arbitrary metadata to associate with this go-live session. This data will be available in the broadcast status and go-live webhook.
	RequestMetadata *structpb.Value `protobuf:"bytes,7,opt,name=request_metadata,json=requestMetadata,proto3,oneof" json:"request_metadata,omitempty"`
}

func (x *StartProjectBroadcastRequest) Reset() {
	*x = StartProjectBroadcastRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartProjectBroadcastRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartProjectBroadcastRequest) ProtoMessage() {}

func (x *StartProjectBroadcastRequest) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartProjectBroadcastRequest.ProtoReflect.Descriptor instead.
func (*StartProjectBroadcastRequest) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{74}
}

func (x *StartProjectBroadcastRequest) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

func (x *StartProjectBroadcastRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *StartProjectBroadcastRequest) GetWebrtcStart() bool {
	if x != nil && x.WebrtcStart != nil {
		return *x.WebrtcStart
	}
	return false
}

func (x *StartProjectBroadcastRequest) GetAsync() bool {
	if x != nil && x.Async != nil {
		return *x.Async
	}
	return false
}

func (x *StartProjectBroadcastRequest) GetDynamicSources() map[string]*RuntimeSourceAddress {
	if x != nil {
		return x.DynamicSources
	}
	return nil
}

func (x *StartProjectBroadcastRequest) GetRequestMetadata() *structpb.Value {
	if x != nil {
		return x.RequestMetadata
	}
	return nil
}

type StartProjectBroadcastResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the id of the broadcast started
	BroadcastId string `protobuf:"bytes,1,opt,name=broadcast_id,json=broadcastId,proto3" json:"broadcast_id,omitempty"`
}

func (x *StartProjectBroadcastResponse) Reset() {
	*x = StartProjectBroadcastResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartProjectBroadcastResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartProjectBroadcastResponse) ProtoMessage() {}

func (x *StartProjectBroadcastResponse) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartProjectBroadcastResponse.ProtoReflect.Descriptor instead.
func (*StartProjectBroadcastResponse) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{75}
}

func (x *StartProjectBroadcastResponse) GetBroadcastId() string {
	if x != nil {
		return x.BroadcastId
	}
	return ""
}

type StopProjectBroadcastRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// collection which owns the project
	CollectionId string `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	// project id
	ProjectId string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// stop the associated webrtc room,
	WebrtcStop *bool `protobuf:"varint,3,opt,name=webrtc_stop,json=webrtcStop,proto3,oneof" json:"webrtc_stop,omitempty"`
}

func (x *StopProjectBroadcastRequest) Reset() {
	*x = StopProjectBroadcastRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopProjectBroadcastRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopProjectBroadcastRequest) ProtoMessage() {}

func (x *StopProjectBroadcastRequest) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopProjectBroadcastRequest.ProtoReflect.Descriptor instead.
func (*StopProjectBroadcastRequest) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{76}
}

func (x *StopProjectBroadcastRequest) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

func (x *StopProjectBroadcastRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *StopProjectBroadcastRequest) GetWebrtcStop() bool {
	if x != nil && x.WebrtcStop != nil {
		return *x.WebrtcStop
	}
	return false
}

type StopProjectBroadcastResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StopProjectBroadcastResponse) Reset() {
	*x = StopProjectBroadcastResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopProjectBroadcastResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopProjectBroadcastResponse) ProtoMessage() {}

func (x *StopProjectBroadcastResponse) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopProjectBroadcastResponse.ProtoReflect.Descriptor instead.
func (*StopProjectBroadcastResponse) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{77}
}

type GetProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// collection which owns the project
	CollectionId string `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	// project id
	ProjectId string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// also query project broadcast status
	Status *bool `protobuf:"varint,3,opt,name=status,proto3,oneof" json:"status,omitempty"`
}

func (x *GetProjectRequest) Reset() {
	*x = GetProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectRequest) ProtoMessage() {}

func (x *GetProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectRequest.ProtoReflect.Descriptor instead.
func (*GetProjectRequest) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{78}
}

func (x *GetProjectRequest) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

func (x *GetProjectRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *GetProjectRequest) GetStatus() bool {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return false
}

type GetProjectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the request project
	Project *Project `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	// the status of the project broadcast (if requested)
	Status *ProjectBroadcastStatus `protobuf:"bytes,2,opt,name=status,proto3,oneof" json:"status,omitempty"`
}

func (x *GetProjectResponse) Reset() {
	*x = GetProjectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectResponse) ProtoMessage() {}

func (x *GetProjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectResponse.ProtoReflect.Descriptor instead.
func (*GetProjectResponse) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{79}
}

func (x *GetProjectResponse) GetProject() *Project {
	if x != nil {
		return x.Project
	}
	return nil
}

func (x *GetProjectResponse) GetStatus() *ProjectBroadcastStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type GetProjectBroadcastSnapshotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// collection which owns the project
	CollectionId string `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	// project id
	ProjectId string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// snapshot binary format
	Format *ImageFormat `protobuf:"varint,3,opt,name=format,proto3,enum=live.v21.ImageFormat,oneof" json:"format,omitempty"`
}

func (x *GetProjectBroadcastSnapshotRequest) Reset() {
	*x = GetProjectBroadcastSnapshotRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProjectBroadcastSnapshotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectBroadcastSnapshotRequest) ProtoMessage() {}

func (x *GetProjectBroadcastSnapshotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectBroadcastSnapshotRequest.ProtoReflect.Descriptor instead.
func (*GetProjectBroadcastSnapshotRequest) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{80}
}

func (x *GetProjectBroadcastSnapshotRequest) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

func (x *GetProjectBroadcastSnapshotRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *GetProjectBroadcastSnapshotRequest) GetFormat() ImageFormat {
	if x != nil && x.Format != nil {
		return *x.Format
	}
	return ImageFormat_IMAGE_FORMAT_UNSPECIFIED
}

type GetProjectBroadcastSnapshotResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the format of the returned snapshot
	Format ImageFormat `protobuf:"varint,1,opt,name=format,proto3,enum=live.v21.ImageFormat" json:"format,omitempty"`
	// the binary snapshot
	Image []byte `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
}

func (x *GetProjectBroadcastSnapshotResponse) Reset() {
	*x = GetProjectBroadcastSnapshotResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProjectBroadcastSnapshotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectBroadcastSnapshotResponse) ProtoMessage() {}

func (x *GetProjectBroadcastSnapshotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectBroadcastSnapshotResponse.ProtoReflect.Descriptor instead.
func (*GetProjectBroadcastSnapshotResponse) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{81}
}

func (x *GetProjectBroadcastSnapshotResponse) GetFormat() ImageFormat {
	if x != nil {
		return x.Format
	}
	return ImageFormat_IMAGE_FORMAT_UNSPECIFIED
}

func (x *GetProjectBroadcastSnapshotResponse) GetImage() []byte {
	if x != nil {
		return x.Image
	}
	return nil
}

type GetProjectBroadcastStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// collection which owns the project
	CollectionId string `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	// project id
	ProjectId string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
}

func (x *GetProjectBroadcastStatusRequest) Reset() {
	*x = GetProjectBroadcastStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProjectBroadcastStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectBroadcastStatusRequest) ProtoMessage() {}

func (x *GetProjectBroadcastStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectBroadcastStatusRequest.ProtoReflect.Descriptor instead.
func (*GetProjectBroadcastStatusRequest) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{82}
}

func (x *GetProjectBroadcastStatusRequest) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

func (x *GetProjectBroadcastStatusRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

type GetProjectBroadcastStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the status of the project broadcast
	Status *ProjectBroadcastStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *GetProjectBroadcastStatusResponse) Reset() {
	*x = GetProjectBroadcastStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProjectBroadcastStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectBroadcastStatusResponse) ProtoMessage() {}

func (x *GetProjectBroadcastStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectBroadcastStatusResponse.ProtoReflect.Descriptor instead.
func (*GetProjectBroadcastStatusResponse) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{83}
}

func (x *GetProjectBroadcastStatusResponse) GetStatus() *ProjectBroadcastStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type StartProjectWebRtcRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// collection which owns the project
	CollectionId string `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	// project id
	ProjectId string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
}

func (x *StartProjectWebRtcRequest) Reset() {
	*x = StartProjectWebRtcRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartProjectWebRtcRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartProjectWebRtcRequest) ProtoMessage() {}

func (x *StartProjectWebRtcRequest) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartProjectWebRtcRequest.ProtoReflect.Descriptor instead.
func (*StartProjectWebRtcRequest) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{84}
}

func (x *StartProjectWebRtcRequest) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

func (x *StartProjectWebRtcRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

type StartProjectWebRtcResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StartProjectWebRtcResponse) Reset() {
	*x = StartProjectWebRtcResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartProjectWebRtcResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartProjectWebRtcResponse) ProtoMessage() {}

func (x *StartProjectWebRtcResponse) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartProjectWebRtcResponse.ProtoReflect.Descriptor instead.
func (*StartProjectWebRtcResponse) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{85}
}

type StopProjectWebRtcRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// collection which owns the project
	CollectionId string `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	// project id
	ProjectId string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
}

func (x *StopProjectWebRtcRequest) Reset() {
	*x = StopProjectWebRtcRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopProjectWebRtcRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopProjectWebRtcRequest) ProtoMessage() {}

func (x *StopProjectWebRtcRequest) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopProjectWebRtcRequest.ProtoReflect.Descriptor instead.
func (*StopProjectWebRtcRequest) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{86}
}

func (x *StopProjectWebRtcRequest) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

func (x *StopProjectWebRtcRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

type StopProjectWebRtcResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StopProjectWebRtcResponse) Reset() {
	*x = StopProjectWebRtcResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopProjectWebRtcResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopProjectWebRtcResponse) ProtoMessage() {}

func (x *StopProjectWebRtcResponse) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopProjectWebRtcResponse.ProtoReflect.Descriptor instead.
func (*StopProjectWebRtcResponse) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{87}
}

type CreateDestinationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// collection which owns the project which owns the destination
	CollectionId string `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	// project which will own this destination
	ProjectId string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// arbitrary metadata associated with this destination
	Metadata *structpb.Value `protobuf:"bytes,3,opt,name=metadata,proto3,oneof" json:"metadata,omitempty"`
	// destination address (select one)
	Address *DestinationAddress `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`
	// enable or disable this destination
	Enabled *bool `protobuf:"varint,6,opt,name=enabled,proto3,oneof" json:"enabled,omitempty"`
	// timeout (in milliseconds) to wait before resetting a connection
	Timeout *uint32 `protobuf:"varint,7,opt,name=timeout,proto3,oneof" json:"timeout,omitempty"`
	// output delay (in milliseconds) to add to the destination
	// note: adjusting this will cause broadcast stop to be delayed
	OutputDelay *uint32 `protobuf:"varint,9,opt,name=output_delay,json=outputDelay,proto3,oneof" json:"output_delay,omitempty"`
}

func (x *CreateDestinationRequest) Reset() {
	*x = CreateDestinationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDestinationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDestinationRequest) ProtoMessage() {}

func (x *CreateDestinationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDestinationRequest.ProtoReflect.Descriptor instead.
func (*CreateDestinationRequest) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{88}
}

func (x *CreateDestinationRequest) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

func (x *CreateDestinationRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *CreateDestinationRequest) GetMetadata() *structpb.Value {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *CreateDestinationRequest) GetAddress() *DestinationAddress {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *CreateDestinationRequest) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *CreateDestinationRequest) GetTimeout() uint32 {
	if x != nil && x.Timeout != nil {
		return *x.Timeout
	}
	return 0
}

func (x *CreateDestinationRequest) GetOutputDelay() uint32 {
	if x != nil && x.OutputDelay != nil {
		return *x.OutputDelay
	}
	return 0
}

type CreateDestinationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the newly created destination
	Destination *Destination `protobuf:"bytes,1,opt,name=destination,proto3" json:"destination,omitempty"`
}

func (x *CreateDestinationResponse) Reset() {
	*x = CreateDestinationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDestinationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDestinationResponse) ProtoMessage() {}

func (x *CreateDestinationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDestinationResponse.ProtoReflect.Descriptor instead.
func (*CreateDestinationResponse) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{89}
}

func (x *CreateDestinationResponse) GetDestination() *Destination {
	if x != nil {
		return x.Destination
	}
	return nil
}

type GetDestinationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// collection which owns the project which owns the destination
	CollectionId string `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	// project which owns the destination
	ProjectId string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// destination id
	DestinationId string `protobuf:"bytes,3,opt,name=destination_id,json=destinationId,proto3" json:"destination_id,omitempty"`
}

func (x *GetDestinationRequest) Reset() {
	*x = GetDestinationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDestinationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDestinationRequest) ProtoMessage() {}

func (x *GetDestinationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDestinationRequest.ProtoReflect.Descriptor instead.
func (*GetDestinationRequest) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{90}
}

func (x *GetDestinationRequest) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

func (x *GetDestinationRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *GetDestinationRequest) GetDestinationId() string {
	if x != nil {
		return x.DestinationId
	}
	return ""
}

type GetDestinationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the requested destination
	Destination *Destination `protobuf:"bytes,1,opt,name=destination,proto3" json:"destination,omitempty"`
}

func (x *GetDestinationResponse) Reset() {
	*x = GetDestinationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDestinationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDestinationResponse) ProtoMessage() {}

func (x *GetDestinationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDestinationResponse.ProtoReflect.Descriptor instead.
func (*GetDestinationResponse) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{91}
}

func (x *GetDestinationResponse) GetDestination() *Destination {
	if x != nil {
		return x.Destination
	}
	return nil
}

type DeleteDestinationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// collection which owns the project which owns the destination
	CollectionId string `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	// project which owns the destination
	ProjectId string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// destination id
	DestinationId string `protobuf:"bytes,3,opt,name=destination_id,json=destinationId,proto3" json:"destination_id,omitempty"`
	// forcibly remove destination if enabled
	Force *bool `protobuf:"varint,4,opt,name=force,proto3,oneof" json:"force,omitempty"`
}

func (x *DeleteDestinationRequest) Reset() {
	*x = DeleteDestinationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDestinationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDestinationRequest) ProtoMessage() {}

func (x *DeleteDestinationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDestinationRequest.ProtoReflect.Descriptor instead.
func (*DeleteDestinationRequest) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{92}
}

func (x *DeleteDestinationRequest) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

func (x *DeleteDestinationRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *DeleteDestinationRequest) GetDestinationId() string {
	if x != nil {
		return x.DestinationId
	}
	return ""
}

func (x *DeleteDestinationRequest) GetForce() bool {
	if x != nil && x.Force != nil {
		return *x.Force
	}
	return false
}

type DeleteDestinationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// indicates whether the broadcast was updated as a function of this request
	BroadcastUpdated bool `protobuf:"varint,1,opt,name=broadcast_updated,json=broadcastUpdated,proto3" json:"broadcast_updated,omitempty"`
}

func (x *DeleteDestinationResponse) Reset() {
	*x = DeleteDestinationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDestinationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDestinationResponse) ProtoMessage() {}

func (x *DeleteDestinationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDestinationResponse.ProtoReflect.Descriptor instead.
func (*DeleteDestinationResponse) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{93}
}

func (x *DeleteDestinationResponse) GetBroadcastUpdated() bool {
	if x != nil {
		return x.BroadcastUpdated
	}
	return false
}

type UpdateDestinationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// collection which owns the project which owns the destination
	CollectionId string `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	// project which owns the destination
	ProjectId string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// destination id
	DestinationId string `protobuf:"bytes,3,opt,name=destination_id,json=destinationId,proto3" json:"destination_id,omitempty"`
	// fields to update (default updates any non-null field)
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,4,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// arbitrary metadata associated with this destination
	Metadata *structpb.Value `protobuf:"bytes,5,opt,name=metadata,proto3,oneof" json:"metadata,omitempty"`
	// destination address (select one)
	Address *DestinationAddress `protobuf:"bytes,6,opt,name=address,proto3,oneof" json:"address,omitempty"`
	// enable or disable this destination
	Enabled *bool `protobuf:"varint,7,opt,name=enabled,proto3,oneof" json:"enabled,omitempty"`
	// timeout (in milliseconds) to wait before resetting a connection
	Timeout *uint32 `protobuf:"varint,8,opt,name=timeout,proto3,oneof" json:"timeout,omitempty"`
	// output delay (in milliseconds) to add to the destination
	// note: adjusting this will cause broadcast stop to be delayed
	OutputDelay *uint32 `protobuf:"varint,9,opt,name=output_delay,json=outputDelay,proto3,oneof" json:"output_delay,omitempty"`
}

func (x *UpdateDestinationRequest) Reset() {
	*x = UpdateDestinationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDestinationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDestinationRequest) ProtoMessage() {}

func (x *UpdateDestinationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDestinationRequest.ProtoReflect.Descriptor instead.
func (*UpdateDestinationRequest) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{94}
}

func (x *UpdateDestinationRequest) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

func (x *UpdateDestinationRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *UpdateDestinationRequest) GetDestinationId() string {
	if x != nil {
		return x.DestinationId
	}
	return ""
}

func (x *UpdateDestinationRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *UpdateDestinationRequest) GetMetadata() *structpb.Value {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *UpdateDestinationRequest) GetAddress() *DestinationAddress {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *UpdateDestinationRequest) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *UpdateDestinationRequest) GetTimeout() uint32 {
	if x != nil && x.Timeout != nil {
		return *x.Timeout
	}
	return 0
}

func (x *UpdateDestinationRequest) GetOutputDelay() uint32 {
	if x != nil && x.OutputDelay != nil {
		return *x.OutputDelay
	}
	return 0
}

type UpdateDestinationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// updated destination
	Destination *Destination `protobuf:"bytes,1,opt,name=destination,proto3" json:"destination,omitempty"`
	// indicates whether the broadcast was updated as a function of this request
	BroadcastUpdated bool `protobuf:"varint,2,opt,name=broadcast_updated,json=broadcastUpdated,proto3" json:"broadcast_updated,omitempty"`
}

func (x *UpdateDestinationResponse) Reset() {
	*x = UpdateDestinationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDestinationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDestinationResponse) ProtoMessage() {}

func (x *UpdateDestinationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDestinationResponse.ProtoReflect.Descriptor instead.
func (*UpdateDestinationResponse) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{95}
}

func (x *UpdateDestinationResponse) GetDestination() *Destination {
	if x != nil {
		return x.Destination
	}
	return nil
}

func (x *UpdateDestinationResponse) GetBroadcastUpdated() bool {
	if x != nil {
		return x.BroadcastUpdated
	}
	return false
}

type CreateSourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// collection which will own this collection live source
	CollectionId string `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	// arbitrary metadata to associate with this collection live source
	Metadata *structpb.Value `protobuf:"bytes,2,opt,name=metadata,proto3,oneof" json:"metadata,omitempty"`
	// type of collection live source
	Address *SourceAddress `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	// enable real-time previews
	Preview *PreviewAddress `protobuf:"bytes,4,opt,name=preview,proto3,oneof" json:"preview,omitempty"`
}

func (x *CreateSourceRequest) Reset() {
	*x = CreateSourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSourceRequest) ProtoMessage() {}

func (x *CreateSourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSourceRequest.ProtoReflect.Descriptor instead.
func (*CreateSourceRequest) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{96}
}

func (x *CreateSourceRequest) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

func (x *CreateSourceRequest) GetMetadata() *structpb.Value {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *CreateSourceRequest) GetAddress() *SourceAddress {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *CreateSourceRequest) GetPreview() *PreviewAddress {
	if x != nil {
		return x.Preview
	}
	return nil
}

type CreateSourceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source *Source `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *CreateSourceResponse) Reset() {
	*x = CreateSourceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSourceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSourceResponse) ProtoMessage() {}

func (x *CreateSourceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSourceResponse.ProtoReflect.Descriptor instead.
func (*CreateSourceResponse) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{97}
}

func (x *CreateSourceResponse) GetSource() *Source {
	if x != nil {
		return x.Source
	}
	return nil
}

type DeleteSourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// collection which owns the live source
	CollectionId string `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	// live source id
	SourceId string `protobuf:"bytes,2,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`
	// delete a live source even if it is in use in a broadcast
	Force *bool `protobuf:"varint,3,opt,name=force,proto3,oneof" json:"force,omitempty"`
}

func (x *DeleteSourceRequest) Reset() {
	*x = DeleteSourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSourceRequest) ProtoMessage() {}

func (x *DeleteSourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSourceRequest.ProtoReflect.Descriptor instead.
func (*DeleteSourceRequest) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{98}
}

func (x *DeleteSourceRequest) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

func (x *DeleteSourceRequest) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

func (x *DeleteSourceRequest) GetForce() bool {
	if x != nil && x.Force != nil {
		return *x.Force
	}
	return false
}

type DeleteSourceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// project ids owned by this collection which were affected
	ProjectIdsUpdated []string `protobuf:"bytes,3,rep,name=project_ids_updated,json=projectIdsUpdated,proto3" json:"project_ids_updated,omitempty"`
}

func (x *DeleteSourceResponse) Reset() {
	*x = DeleteSourceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSourceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSourceResponse) ProtoMessage() {}

func (x *DeleteSourceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSourceResponse.ProtoReflect.Descriptor instead.
func (*DeleteSourceResponse) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{99}
}

func (x *DeleteSourceResponse) GetProjectIdsUpdated() []string {
	if x != nil {
		return x.ProjectIdsUpdated
	}
	return nil
}

type AddSourceToProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// collection which owns the project
	CollectionId string `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	// project which will own the source
	ProjectId string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// live source id
	SourceId string `protobuf:"bytes,3,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`
	// allow this source to trigger a project broadcast
	Trigger *SourceTrigger `protobuf:"bytes,4,opt,name=trigger,proto3,oneof" json:"trigger,omitempty"`
}

func (x *AddSourceToProjectRequest) Reset() {
	*x = AddSourceToProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddSourceToProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSourceToProjectRequest) ProtoMessage() {}

func (x *AddSourceToProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSourceToProjectRequest.ProtoReflect.Descriptor instead.
func (*AddSourceToProjectRequest) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{100}
}

func (x *AddSourceToProjectRequest) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

func (x *AddSourceToProjectRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *AddSourceToProjectRequest) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

func (x *AddSourceToProjectRequest) GetTrigger() *SourceTrigger {
	if x != nil {
		return x.Trigger
	}
	return nil
}

type AddSourceToProjectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// updated project
	Project *Project `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	// indicates whether the broadcast was updated as a function of this request
	BroadcastUpdated bool `protobuf:"varint,2,opt,name=broadcast_updated,json=broadcastUpdated,proto3" json:"broadcast_updated,omitempty"`
}

func (x *AddSourceToProjectResponse) Reset() {
	*x = AddSourceToProjectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddSourceToProjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSourceToProjectResponse) ProtoMessage() {}

func (x *AddSourceToProjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSourceToProjectResponse.ProtoReflect.Descriptor instead.
func (*AddSourceToProjectResponse) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{101}
}

func (x *AddSourceToProjectResponse) GetProject() *Project {
	if x != nil {
		return x.Project
	}
	return nil
}

func (x *AddSourceToProjectResponse) GetBroadcastUpdated() bool {
	if x != nil {
		return x.BroadcastUpdated
	}
	return false
}

type UpdateSourceInProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// collection which owns the project
	CollectionId string `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	// project which will own the source
	ProjectId string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// live source id
	SourceId string `protobuf:"bytes,3,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`
	// fields to update (default updates any non-null field)
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,4,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// allow this source to trigger a project broadcast
	Trigger *SourceTrigger `protobuf:"bytes,5,opt,name=trigger,proto3,oneof" json:"trigger,omitempty"`
}

func (x *UpdateSourceInProjectRequest) Reset() {
	*x = UpdateSourceInProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSourceInProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSourceInProjectRequest) ProtoMessage() {}

func (x *UpdateSourceInProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSourceInProjectRequest.ProtoReflect.Descriptor instead.
func (*UpdateSourceInProjectRequest) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{102}
}

func (x *UpdateSourceInProjectRequest) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

func (x *UpdateSourceInProjectRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *UpdateSourceInProjectRequest) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

func (x *UpdateSourceInProjectRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *UpdateSourceInProjectRequest) GetTrigger() *SourceTrigger {
	if x != nil {
		return x.Trigger
	}
	return nil
}

type UpdateSourceInProjectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// updated project
	Project *Project `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
}

func (x *UpdateSourceInProjectResponse) Reset() {
	*x = UpdateSourceInProjectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSourceInProjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSourceInProjectResponse) ProtoMessage() {}

func (x *UpdateSourceInProjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSourceInProjectResponse.ProtoReflect.Descriptor instead.
func (*UpdateSourceInProjectResponse) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{103}
}

func (x *UpdateSourceInProjectResponse) GetProject() *Project {
	if x != nil {
		return x.Project
	}
	return nil
}

type GetSourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// collection which owns the project which owns the source
	CollectionId string `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	// source id
	SourceId string `protobuf:"bytes,3,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`
}

func (x *GetSourceRequest) Reset() {
	*x = GetSourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSourceRequest) ProtoMessage() {}

func (x *GetSourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSourceRequest.ProtoReflect.Descriptor instead.
func (*GetSourceRequest) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{104}
}

func (x *GetSourceRequest) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

func (x *GetSourceRequest) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

type GetSourceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source *Source `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *GetSourceResponse) Reset() {
	*x = GetSourceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSourceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSourceResponse) ProtoMessage() {}

func (x *GetSourceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSourceResponse.ProtoReflect.Descriptor instead.
func (*GetSourceResponse) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{105}
}

func (x *GetSourceResponse) GetSource() *Source {
	if x != nil {
		return x.Source
	}
	return nil
}

type GetSourcesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// collection which owns the project which owns the source
	CollectionId string `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
}

func (x *GetSourcesRequest) Reset() {
	*x = GetSourcesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSourcesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSourcesRequest) ProtoMessage() {}

func (x *GetSourcesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSourcesRequest.ProtoReflect.Descriptor instead.
func (*GetSourcesRequest) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{106}
}

func (x *GetSourcesRequest) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

type GetSourcesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sources []*Source `protobuf:"bytes,1,rep,name=sources,proto3" json:"sources,omitempty"`
}

func (x *GetSourcesResponse) Reset() {
	*x = GetSourcesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSourcesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSourcesResponse) ProtoMessage() {}

func (x *GetSourcesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSourcesResponse.ProtoReflect.Descriptor instead.
func (*GetSourcesResponse) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{107}
}

func (x *GetSourcesResponse) GetSources() []*Source {
	if x != nil {
		return x.Sources
	}
	return nil
}

type UpdateSourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// collection which owns the project which owns the source
	CollectionId string `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	// source id
	SourceId string `protobuf:"bytes,3,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`
	// fields to update (default updates any non-null field)
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,4,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// arbitrary metadata to associate with this source
	Metadata *structpb.Value `protobuf:"bytes,5,opt,name=metadata,proto3,oneof" json:"metadata,omitempty"`
	// type of collection live source
	Address *SourceAddress `protobuf:"bytes,6,opt,name=address,proto3,oneof" json:"address,omitempty"`
	// enable real-time previews
	Preview *PreviewAddress `protobuf:"bytes,7,opt,name=preview,proto3,oneof" json:"preview,omitempty"`
}

func (x *UpdateSourceRequest) Reset() {
	*x = UpdateSourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSourceRequest) ProtoMessage() {}

func (x *UpdateSourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSourceRequest.ProtoReflect.Descriptor instead.
func (*UpdateSourceRequest) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{108}
}

func (x *UpdateSourceRequest) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

func (x *UpdateSourceRequest) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

func (x *UpdateSourceRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *UpdateSourceRequest) GetMetadata() *structpb.Value {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *UpdateSourceRequest) GetAddress() *SourceAddress {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *UpdateSourceRequest) GetPreview() *PreviewAddress {
	if x != nil {
		return x.Preview
	}
	return nil
}

type UpdateSourceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// updated source
	Source *Source `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	// indicates whether the broadcast was updated as a function of this request
	BroadcastUpdated bool `protobuf:"varint,2,opt,name=broadcast_updated,json=broadcastUpdated,proto3" json:"broadcast_updated,omitempty"`
}

func (x *UpdateSourceResponse) Reset() {
	*x = UpdateSourceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSourceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSourceResponse) ProtoMessage() {}

func (x *UpdateSourceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSourceResponse.ProtoReflect.Descriptor instead.
func (*UpdateSourceResponse) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{109}
}

func (x *UpdateSourceResponse) GetSource() *Source {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *UpdateSourceResponse) GetBroadcastUpdated() bool {
	if x != nil {
		return x.BroadcastUpdated
	}
	return false
}

type RemoveSourceFromProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the id of the parent Collection
	CollectionId string `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	// the id of the Project
	ProjectId string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// the id of the Source
	SourceId string `protobuf:"bytes,3,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`
	// delete a live source even if it is in use in a broadcast
	Force *bool `protobuf:"varint,4,opt,name=force,proto3,oneof" json:"force,omitempty"`
}

func (x *RemoveSourceFromProjectRequest) Reset() {
	*x = RemoveSourceFromProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveSourceFromProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveSourceFromProjectRequest) ProtoMessage() {}

func (x *RemoveSourceFromProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveSourceFromProjectRequest.ProtoReflect.Descriptor instead.
func (*RemoveSourceFromProjectRequest) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{110}
}

func (x *RemoveSourceFromProjectRequest) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

func (x *RemoveSourceFromProjectRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *RemoveSourceFromProjectRequest) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

func (x *RemoveSourceFromProjectRequest) GetForce() bool {
	if x != nil && x.Force != nil {
		return *x.Force
	}
	return false
}

type RemoveSourceFromProjectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// updated project
	Project *Project `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	// indicates whether the broadcast was updated as a function of this request
	BroadcastUpdated bool `protobuf:"varint,2,opt,name=broadcast_updated,json=broadcastUpdated,proto3" json:"broadcast_updated,omitempty"`
}

func (x *RemoveSourceFromProjectResponse) Reset() {
	*x = RemoveSourceFromProjectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveSourceFromProjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveSourceFromProjectResponse) ProtoMessage() {}

func (x *RemoveSourceFromProjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveSourceFromProjectResponse.ProtoReflect.Descriptor instead.
func (*RemoveSourceFromProjectResponse) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{111}
}

func (x *RemoveSourceFromProjectResponse) GetProject() *Project {
	if x != nil {
		return x.Project
	}
	return nil
}

func (x *RemoveSourceFromProjectResponse) GetBroadcastUpdated() bool {
	if x != nil {
		return x.BroadcastUpdated
	}
	return false
}

type GetSourcePlaylistRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// collection which owns the project which owns the source
	CollectionId string `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	// source id
	SourceId string `protobuf:"bytes,3,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`
	// If you are calling this from a client, this enables you to pass access_token as a query parameter.
	// Otherwise, you should use the standard Authorization header.
	AccessToken *string `protobuf:"bytes,4,opt,name=access_token,json=accessToken,proto3,oneof" json:"access_token,omitempty"`
}

func (x *GetSourcePlaylistRequest) Reset() {
	*x = GetSourcePlaylistRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSourcePlaylistRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSourcePlaylistRequest) ProtoMessage() {}

func (x *GetSourcePlaylistRequest) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSourcePlaylistRequest.ProtoReflect.Descriptor instead.
func (*GetSourcePlaylistRequest) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{112}
}

func (x *GetSourcePlaylistRequest) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

func (x *GetSourcePlaylistRequest) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

func (x *GetSourcePlaylistRequest) GetAccessToken() string {
	if x != nil && x.AccessToken != nil {
		return *x.AccessToken
	}
	return ""
}

type GetSourcePlaylistResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Manifest string `protobuf:"bytes,1,opt,name=manifest,proto3" json:"manifest,omitempty"`
}

func (x *GetSourcePlaylistResponse) Reset() {
	*x = GetSourcePlaylistResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSourcePlaylistResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSourcePlaylistResponse) ProtoMessage() {}

func (x *GetSourcePlaylistResponse) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSourcePlaylistResponse.ProtoReflect.Descriptor instead.
func (*GetSourcePlaylistResponse) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{113}
}

func (x *GetSourcePlaylistResponse) GetManifest() string {
	if x != nil {
		return x.Manifest
	}
	return ""
}

type CreateAccessTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// service-specific user id
	// ### Usage
	// * this should be an opaque GUID with no spaces
	ServiceUserId string  `protobuf:"bytes,1,opt,name=service_user_id,json=serviceUserId,proto3" json:"service_user_id,omitempty"`
	DisplayName   *string `protobuf:"bytes,4,opt,name=display_name,json=displayName,proto3,oneof" json:"display_name,omitempty"`
	// the requested role
	Role *Role `protobuf:"varint,2,opt,name=role,proto3,enum=live.v21.Role,oneof" json:"role,omitempty"`
	// requested duration of token before it expires (ms)
	MaxDuration *uint32 `protobuf:"varint,3,opt,name=max_duration,json=maxDuration,proto3,oneof" json:"max_duration,omitempty"`
}

func (x *CreateAccessTokenRequest) Reset() {
	*x = CreateAccessTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAccessTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAccessTokenRequest) ProtoMessage() {}

func (x *CreateAccessTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAccessTokenRequest.ProtoReflect.Descriptor instead.
func (*CreateAccessTokenRequest) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{114}
}

func (x *CreateAccessTokenRequest) GetServiceUserId() string {
	if x != nil {
		return x.ServiceUserId
	}
	return ""
}

func (x *CreateAccessTokenRequest) GetDisplayName() string {
	if x != nil && x.DisplayName != nil {
		return *x.DisplayName
	}
	return ""
}

func (x *CreateAccessTokenRequest) GetRole() Role {
	if x != nil && x.Role != nil {
		return *x.Role
	}
	return Role_ROLE_UNSPECIFIED
}

func (x *CreateAccessTokenRequest) GetMaxDuration() uint32 {
	if x != nil && x.MaxDuration != nil {
		return *x.MaxDuration
	}
	return 0
}

type CreateAccessTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// access token for owner to be asserted in subsequent Video and Layout API
	// calls
	AccessToken string `protobuf:"bytes,1,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
}

func (x *CreateAccessTokenResponse) Reset() {
	*x = CreateAccessTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAccessTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAccessTokenResponse) ProtoMessage() {}

func (x *CreateAccessTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAccessTokenResponse.ProtoReflect.Descriptor instead.
func (*CreateAccessTokenResponse) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{115}
}

func (x *CreateAccessTokenResponse) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

type LookupGuestCodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *LookupGuestCodeRequest) Reset() {
	*x = LookupGuestCodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LookupGuestCodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookupGuestCodeRequest) ProtoMessage() {}

func (x *LookupGuestCodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookupGuestCodeRequest.ProtoReflect.Descriptor instead.
func (*LookupGuestCodeRequest) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{116}
}

func (x *LookupGuestCodeRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type LookupGuestCodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the access token for the guest
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *LookupGuestCodeResponse) Reset() {
	*x = LookupGuestCodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LookupGuestCodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookupGuestCodeResponse) ProtoMessage() {}

func (x *LookupGuestCodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookupGuestCodeResponse.ProtoReflect.Descriptor instead.
func (*LookupGuestCodeResponse) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{117}
}

func (x *LookupGuestCodeResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

// create an immutable, single-use guest access token
type GuestAccessTokenDirect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// display name of the guest (used to generate webrtc particpant name)
	DisplayName string `protobuf:"bytes,1,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// service-specific user id (used for record auditing purposes)
	ServiceUserId *string `protobuf:"bytes,2,opt,name=service_user_id,json=serviceUserId,proto3,oneof" json:"service_user_id,omitempty"`
}

func (x *GuestAccessTokenDirect) Reset() {
	*x = GuestAccessTokenDirect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuestAccessTokenDirect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuestAccessTokenDirect) ProtoMessage() {}

func (x *GuestAccessTokenDirect) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuestAccessTokenDirect.ProtoReflect.Descriptor instead.
func (*GuestAccessTokenDirect) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{118}
}

func (x *GuestAccessTokenDirect) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *GuestAccessTokenDirect) GetServiceUserId() string {
	if x != nil && x.ServiceUserId != nil {
		return *x.ServiceUserId
	}
	return ""
}

// create a multi-use guest access token
type GuestAccessTokenExchange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the max duration this token is valid for redemption
	MaxDuration *uint32 `protobuf:"varint,1,opt,name=max_duration,json=maxDuration,proto3,oneof" json:"max_duration,omitempty"`
}

func (x *GuestAccessTokenExchange) Reset() {
	*x = GuestAccessTokenExchange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuestAccessTokenExchange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuestAccessTokenExchange) ProtoMessage() {}

func (x *GuestAccessTokenExchange) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuestAccessTokenExchange.ProtoReflect.Descriptor instead.
func (*GuestAccessTokenExchange) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{119}
}

func (x *GuestAccessTokenExchange) GetMaxDuration() uint32 {
	if x != nil && x.MaxDuration != nil {
		return *x.MaxDuration
	}
	return 0
}

// the type of access token (selec one)
type GuestAccessToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*GuestAccessToken_Direct
	//	*GuestAccessToken_Exchange
	Type isGuestAccessToken_Type `protobuf_oneof:"type"`
}

func (x *GuestAccessToken) Reset() {
	*x = GuestAccessToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuestAccessToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuestAccessToken) ProtoMessage() {}

func (x *GuestAccessToken) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuestAccessToken.ProtoReflect.Descriptor instead.
func (*GuestAccessToken) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{120}
}

func (m *GuestAccessToken) GetType() isGuestAccessToken_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *GuestAccessToken) GetDirect() *GuestAccessTokenDirect {
	if x, ok := x.GetType().(*GuestAccessToken_Direct); ok {
		return x.Direct
	}
	return nil
}

func (x *GuestAccessToken) GetExchange() *GuestAccessTokenExchange {
	if x, ok := x.GetType().(*GuestAccessToken_Exchange); ok {
		return x.Exchange
	}
	return nil
}

type isGuestAccessToken_Type interface {
	isGuestAccessToken_Type()
}

type GuestAccessToken_Direct struct {
	Direct *GuestAccessTokenDirect `protobuf:"bytes,1,opt,name=direct,proto3,oneof"`
}

type GuestAccessToken_Exchange struct {
	Exchange *GuestAccessTokenExchange `protobuf:"bytes,2,opt,name=exchange,proto3,oneof"`
}

func (*GuestAccessToken_Direct) isGuestAccessToken_Type() {}

func (*GuestAccessToken_Exchange) isGuestAccessToken_Type() {}

type CreateGuestAccessTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id of the collection this token is allowed to access
	CollectionId string `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	// id of the project this token is allowed to access
	ProjectId string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// requested duration (ms) of token before it expires
	MaxDuration *uint32 `protobuf:"varint,3,opt,name=max_duration,json=maxDuration,proto3,oneof" json:"max_duration,omitempty"`
	// the requested role of the guest
	Role Role `protobuf:"varint,4,opt,name=role,proto3,enum=live.v21.Role" json:"role,omitempty"`
	// the type of token
	Token *GuestAccessToken `protobuf:"bytes,5,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *CreateGuestAccessTokenRequest) Reset() {
	*x = CreateGuestAccessTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGuestAccessTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGuestAccessTokenRequest) ProtoMessage() {}

func (x *CreateGuestAccessTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGuestAccessTokenRequest.ProtoReflect.Descriptor instead.
func (*CreateGuestAccessTokenRequest) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{121}
}

func (x *CreateGuestAccessTokenRequest) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

func (x *CreateGuestAccessTokenRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *CreateGuestAccessTokenRequest) GetMaxDuration() uint32 {
	if x != nil && x.MaxDuration != nil {
		return *x.MaxDuration
	}
	return 0
}

func (x *CreateGuestAccessTokenRequest) GetRole() Role {
	if x != nil {
		return x.Role
	}
	return Role_ROLE_UNSPECIFIED
}

func (x *CreateGuestAccessTokenRequest) GetToken() *GuestAccessToken {
	if x != nil {
		return x.Token
	}
	return nil
}

type CreateGuestAccessTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// access token for guest to be used in subsequent API calls
	AccessToken string `protobuf:"bytes,1,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	// the shortened url
	Url *string `protobuf:"bytes,2,opt,name=url,proto3,oneof" json:"url,omitempty"`
}

func (x *CreateGuestAccessTokenResponse) Reset() {
	*x = CreateGuestAccessTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGuestAccessTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGuestAccessTokenResponse) ProtoMessage() {}

func (x *CreateGuestAccessTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGuestAccessTokenResponse.ProtoReflect.Descriptor instead.
func (*CreateGuestAccessTokenResponse) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{122}
}

func (x *CreateGuestAccessTokenResponse) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *CreateGuestAccessTokenResponse) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

type CreateWebRtcAccessTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id of the collection this token is allowed to access
	CollectionId string `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	// id of the project this token is allowed to access
	ProjectId string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// display name of the guest (used to generate webrtc particpant name)
	DisplayName string `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
}

func (x *CreateWebRtcAccessTokenRequest) Reset() {
	*x = CreateWebRtcAccessTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateWebRtcAccessTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWebRtcAccessTokenRequest) ProtoMessage() {}

func (x *CreateWebRtcAccessTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWebRtcAccessTokenRequest.ProtoReflect.Descriptor instead.
func (*CreateWebRtcAccessTokenRequest) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{123}
}

func (x *CreateWebRtcAccessTokenRequest) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

func (x *CreateWebRtcAccessTokenRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *CreateWebRtcAccessTokenRequest) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

type CreateWebRtcAccessTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the webrtc token parameters
	WebrtcAccess *WebRtcAccess `protobuf:"bytes,2,opt,name=webrtc_access,json=webrtcAccess,proto3" json:"webrtc_access,omitempty"`
}

func (x *CreateWebRtcAccessTokenResponse) Reset() {
	*x = CreateWebRtcAccessTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateWebRtcAccessTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWebRtcAccessTokenResponse) ProtoMessage() {}

func (x *CreateWebRtcAccessTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWebRtcAccessTokenResponse.ProtoReflect.Descriptor instead.
func (*CreateWebRtcAccessTokenResponse) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{124}
}

func (x *CreateWebRtcAccessTokenResponse) GetWebrtcAccess() *WebRtcAccess {
	if x != nil {
		return x.WebrtcAccess
	}
	return nil
}

type RefreshAccessTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RefreshAccessTokenRequest) Reset() {
	*x = RefreshAccessTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshAccessTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshAccessTokenRequest) ProtoMessage() {}

func (x *RefreshAccessTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshAccessTokenRequest.ProtoReflect.Descriptor instead.
func (*RefreshAccessTokenRequest) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{125}
}

type RefreshAccessTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RefreshAccessTokenResponse) Reset() {
	*x = RefreshAccessTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshAccessTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshAccessTokenResponse) ProtoMessage() {}

func (x *RefreshAccessTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshAccessTokenResponse.ProtoReflect.Descriptor instead.
func (*RefreshAccessTokenResponse) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{126}
}

type GuestCodeRedirectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the id of the service
	ServiceId string `protobuf:"bytes,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	// the short url code
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *GuestCodeRedirectRequest) Reset() {
	*x = GuestCodeRedirectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuestCodeRedirectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuestCodeRedirectRequest) ProtoMessage() {}

func (x *GuestCodeRedirectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuestCodeRedirectRequest.ProtoReflect.Descriptor instead.
func (*GuestCodeRedirectRequest) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{127}
}

func (x *GuestCodeRedirectRequest) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *GuestCodeRedirectRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type GuestCodeRedirectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GuestCodeRedirectResponse) Reset() {
	*x = GuestCodeRedirectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuestCodeRedirectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuestCodeRedirectResponse) ProtoMessage() {}

func (x *GuestCodeRedirectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuestCodeRedirectResponse.ProtoReflect.Descriptor instead.
func (*GuestCodeRedirectResponse) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{128}
}

type IssuedGuestCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id of the collection this token is allowed to access
	CollectionId string `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	// id of the project this token is allowed to access
	ProjectId string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// requested duration (ms) of token before it expires
	MaxDuration *uint32 `protobuf:"varint,3,opt,name=max_duration,json=maxDuration,proto3,oneof" json:"max_duration,omitempty"`
	// the requested role of the guest
	Role Role `protobuf:"varint,4,opt,name=role,proto3,enum=live.v21.Role" json:"role,omitempty"`
	// the type of token
	Token *GuestAccessToken `protobuf:"bytes,5,opt,name=token,proto3" json:"token,omitempty"`
	// the destination to forward to.
	TargetUrl string `protobuf:"bytes,6,opt,name=target_url,json=targetUrl,proto3" json:"target_url,omitempty"`
	// the short identifier of the guest code
	Code string `protobuf:"bytes,7,opt,name=code,proto3" json:"code,omitempty"`
	// the endpoint to forward the user to.
	LinkUrl string `protobuf:"bytes,9,opt,name=link_url,json=linkUrl,proto3" json:"link_url,omitempty"`
}

func (x *IssuedGuestCode) Reset() {
	*x = IssuedGuestCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssuedGuestCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssuedGuestCode) ProtoMessage() {}

func (x *IssuedGuestCode) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssuedGuestCode.ProtoReflect.Descriptor instead.
func (*IssuedGuestCode) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{129}
}

func (x *IssuedGuestCode) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

func (x *IssuedGuestCode) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *IssuedGuestCode) GetMaxDuration() uint32 {
	if x != nil && x.MaxDuration != nil {
		return *x.MaxDuration
	}
	return 0
}

func (x *IssuedGuestCode) GetRole() Role {
	if x != nil {
		return x.Role
	}
	return Role_ROLE_UNSPECIFIED
}

func (x *IssuedGuestCode) GetToken() *GuestAccessToken {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *IssuedGuestCode) GetTargetUrl() string {
	if x != nil {
		return x.TargetUrl
	}
	return ""
}

func (x *IssuedGuestCode) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *IssuedGuestCode) GetLinkUrl() string {
	if x != nil {
		return x.LinkUrl
	}
	return ""
}

type CreateGuestCodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id of the collection this token is allowed to access
	CollectionId string `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	// id of the project this token is allowed to access
	ProjectId string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// requested duration (ms) of token before it expires
	MaxDuration *uint32 `protobuf:"varint,3,opt,name=max_duration,json=maxDuration,proto3,oneof" json:"max_duration,omitempty"`
	// the requested role of the guest
	Role Role `protobuf:"varint,4,opt,name=role,proto3,enum=live.v21.Role" json:"role,omitempty"`
	// the type of token
	Token *GuestAccessToken `protobuf:"bytes,5,opt,name=token,proto3" json:"token,omitempty"`
	// the target to redirect to
	Url string `protobuf:"bytes,6,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *CreateGuestCodeRequest) Reset() {
	*x = CreateGuestCodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGuestCodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGuestCodeRequest) ProtoMessage() {}

func (x *CreateGuestCodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGuestCodeRequest.ProtoReflect.Descriptor instead.
func (*CreateGuestCodeRequest) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{130}
}

func (x *CreateGuestCodeRequest) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

func (x *CreateGuestCodeRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *CreateGuestCodeRequest) GetMaxDuration() uint32 {
	if x != nil && x.MaxDuration != nil {
		return *x.MaxDuration
	}
	return 0
}

func (x *CreateGuestCodeRequest) GetRole() Role {
	if x != nil {
		return x.Role
	}
	return Role_ROLE_UNSPECIFIED
}

func (x *CreateGuestCodeRequest) GetToken() *GuestAccessToken {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *CreateGuestCodeRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type CreateGuestCodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the guest token details.
	GuestCode *IssuedGuestCode `protobuf:"bytes,1,opt,name=guest_code,json=guestCode,proto3" json:"guest_code,omitempty"`
}

func (x *CreateGuestCodeResponse) Reset() {
	*x = CreateGuestCodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGuestCodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGuestCodeResponse) ProtoMessage() {}

func (x *CreateGuestCodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGuestCodeResponse.ProtoReflect.Descriptor instead.
func (*CreateGuestCodeResponse) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{131}
}

func (x *CreateGuestCodeResponse) GetGuestCode() *IssuedGuestCode {
	if x != nil {
		return x.GuestCode
	}
	return nil
}

type GetGuestCodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the short url code
	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *GetGuestCodeRequest) Reset() {
	*x = GetGuestCodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGuestCodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGuestCodeRequest) ProtoMessage() {}

func (x *GetGuestCodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGuestCodeRequest.ProtoReflect.Descriptor instead.
func (*GetGuestCodeRequest) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{132}
}

func (x *GetGuestCodeRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type GetGuestCodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the guest token details.
	GuestCode *IssuedGuestCode `protobuf:"bytes,1,opt,name=guest_code,json=guestCode,proto3" json:"guest_code,omitempty"`
}

func (x *GetGuestCodeResponse) Reset() {
	*x = GetGuestCodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGuestCodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGuestCodeResponse) ProtoMessage() {}

func (x *GetGuestCodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGuestCodeResponse.ProtoReflect.Descriptor instead.
func (*GetGuestCodeResponse) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{133}
}

func (x *GetGuestCodeResponse) GetGuestCode() *IssuedGuestCode {
	if x != nil {
		return x.GuestCode
	}
	return nil
}

type GetGuestCodesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id of the collection to filter by
	CollectionId *string `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3,oneof" json:"collection_id,omitempty"`
	// id of the project to filter by
	ProjectId *string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3,oneof" json:"project_id,omitempty"`
	// role to filter by
	Role *Role `protobuf:"varint,3,opt,name=role,proto3,enum=live.v21.Role,oneof" json:"role,omitempty"`
}

func (x *GetGuestCodesRequest) Reset() {
	*x = GetGuestCodesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGuestCodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGuestCodesRequest) ProtoMessage() {}

func (x *GetGuestCodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGuestCodesRequest.ProtoReflect.Descriptor instead.
func (*GetGuestCodesRequest) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{134}
}

func (x *GetGuestCodesRequest) GetCollectionId() string {
	if x != nil && x.CollectionId != nil {
		return *x.CollectionId
	}
	return ""
}

func (x *GetGuestCodesRequest) GetProjectId() string {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return ""
}

func (x *GetGuestCodesRequest) GetRole() Role {
	if x != nil && x.Role != nil {
		return *x.Role
	}
	return Role_ROLE_UNSPECIFIED
}

type GetGuestCodesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// matching guest tokens
	GuestCodes []*IssuedGuestCode `protobuf:"bytes,1,rep,name=guest_codes,json=guestCodes,proto3" json:"guest_codes,omitempty"`
}

func (x *GetGuestCodesResponse) Reset() {
	*x = GetGuestCodesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGuestCodesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGuestCodesResponse) ProtoMessage() {}

func (x *GetGuestCodesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGuestCodesResponse.ProtoReflect.Descriptor instead.
func (*GetGuestCodesResponse) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{135}
}

func (x *GetGuestCodesResponse) GetGuestCodes() []*IssuedGuestCode {
	if x != nil {
		return x.GuestCodes
	}
	return nil
}

type DeleteGuestCodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the short url code
	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *DeleteGuestCodeRequest) Reset() {
	*x = DeleteGuestCodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteGuestCodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteGuestCodeRequest) ProtoMessage() {}

func (x *DeleteGuestCodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteGuestCodeRequest.ProtoReflect.Descriptor instead.
func (*DeleteGuestCodeRequest) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{136}
}

func (x *DeleteGuestCodeRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type DeleteGuestCodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteGuestCodeResponse) Reset() {
	*x = DeleteGuestCodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteGuestCodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteGuestCodeResponse) ProtoMessage() {}

func (x *DeleteGuestCodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteGuestCodeResponse.ProtoReflect.Descriptor instead.
func (*DeleteGuestCodeResponse) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{137}
}

type JsonWebKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alg string `protobuf:"bytes,1,opt,name=alg,proto3" json:"alg,omitempty"`
	Kty string `protobuf:"bytes,2,opt,name=kty,proto3" json:"kty,omitempty"`
	Use string `protobuf:"bytes,3,opt,name=use,proto3" json:"use,omitempty"`
	Kid string `protobuf:"bytes,4,opt,name=kid,proto3" json:"kid,omitempty"`
	E   string `protobuf:"bytes,5,opt,name=e,proto3" json:"e,omitempty"`
	N   string `protobuf:"bytes,6,opt,name=n,proto3" json:"n,omitempty"`
}

func (x *JsonWebKey) Reset() {
	*x = JsonWebKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JsonWebKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JsonWebKey) ProtoMessage() {}

func (x *JsonWebKey) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JsonWebKey.ProtoReflect.Descriptor instead.
func (*JsonWebKey) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{138}
}

func (x *JsonWebKey) GetAlg() string {
	if x != nil {
		return x.Alg
	}
	return ""
}

func (x *JsonWebKey) GetKty() string {
	if x != nil {
		return x.Kty
	}
	return ""
}

func (x *JsonWebKey) GetUse() string {
	if x != nil {
		return x.Use
	}
	return ""
}

func (x *JsonWebKey) GetKid() string {
	if x != nil {
		return x.Kid
	}
	return ""
}

func (x *JsonWebKey) GetE() string {
	if x != nil {
		return x.E
	}
	return ""
}

func (x *JsonWebKey) GetN() string {
	if x != nil {
		return x.N
	}
	return ""
}

type GetJsonWebKeySetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetJsonWebKeySetRequest) Reset() {
	*x = GetJsonWebKeySetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetJsonWebKeySetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJsonWebKeySetRequest) ProtoMessage() {}

func (x *GetJsonWebKeySetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJsonWebKeySetRequest.ProtoReflect.Descriptor instead.
func (*GetJsonWebKeySetRequest) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{139}
}

type GetJsonWebKeySetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// public keys used to sign access tokens
	Keys []*JsonWebKey `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *GetJsonWebKeySetResponse) Reset() {
	*x = GetJsonWebKeySetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetJsonWebKeySetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJsonWebKeySetResponse) ProtoMessage() {}

func (x *GetJsonWebKeySetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJsonWebKeySetResponse.ProtoReflect.Descriptor instead.
func (*GetJsonWebKeySetResponse) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{140}
}

func (x *GetJsonWebKeySetResponse) GetKeys() []*JsonWebKey {
	if x != nil {
		return x.Keys
	}
	return nil
}

type GetTestTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetTestTokenRequest) Reset() {
	*x = GetTestTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTestTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTestTokenRequest) ProtoMessage() {}

func (x *GetTestTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTestTokenRequest.ProtoReflect.Descriptor instead.
func (*GetTestTokenRequest) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{141}
}

type GetTestTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// a dummy access key (with no grants)
	AccessToken string `protobuf:"bytes,1,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
}

func (x *GetTestTokenResponse) Reset() {
	*x = GetTestTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTestTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTestTokenResponse) ProtoMessage() {}

func (x *GetTestTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTestTokenResponse.ProtoReflect.Descriptor instead.
func (*GetTestTokenResponse) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{142}
}

func (x *GetTestTokenResponse) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

// a destination was created
type DestinationCreateEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// collection which owns the project which owns the destination
	CollectionId string `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	// project which owns the destination
	ProjectId string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// destination id
	DestinationId string `protobuf:"bytes,3,opt,name=destination_id,json=destinationId,proto3" json:"destination_id,omitempty"`
	// the new destination
	Destination *Destination `protobuf:"bytes,4,opt,name=destination,proto3" json:"destination,omitempty"`
}

func (x *DestinationCreateEvent) Reset() {
	*x = DestinationCreateEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestinationCreateEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestinationCreateEvent) ProtoMessage() {}

func (x *DestinationCreateEvent) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestinationCreateEvent.ProtoReflect.Descriptor instead.
func (*DestinationCreateEvent) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{143}
}

func (x *DestinationCreateEvent) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

func (x *DestinationCreateEvent) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *DestinationCreateEvent) GetDestinationId() string {
	if x != nil {
		return x.DestinationId
	}
	return ""
}

func (x *DestinationCreateEvent) GetDestination() *Destination {
	if x != nil {
		return x.Destination
	}
	return nil
}

// a destination was deleted
type DestinationDeleteEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// collection which owns the project which owns the destination
	CollectionId string `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	// project which owns the destination
	ProjectId string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// destination id
	DestinationId string `protobuf:"bytes,3,opt,name=destination_id,json=destinationId,proto3" json:"destination_id,omitempty"`
}

func (x *DestinationDeleteEvent) Reset() {
	*x = DestinationDeleteEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestinationDeleteEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestinationDeleteEvent) ProtoMessage() {}

func (x *DestinationDeleteEvent) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestinationDeleteEvent.ProtoReflect.Descriptor instead.
func (*DestinationDeleteEvent) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{144}
}

func (x *DestinationDeleteEvent) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

func (x *DestinationDeleteEvent) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *DestinationDeleteEvent) GetDestinationId() string {
	if x != nil {
		return x.DestinationId
	}
	return ""
}

// a destination was updated
type DestinationUpdateEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// collection which owns the project which owns the destination
	CollectionId string `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	// project which owns the destination
	ProjectId string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// destination id
	DestinationId string `protobuf:"bytes,3,opt,name=destination_id,json=destinationId,proto3" json:"destination_id,omitempty"`
	// changed fields
	UpdateMask []string `protobuf:"bytes,4,rep,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// the updated destination
	Destination *Destination `protobuf:"bytes,5,opt,name=destination,proto3" json:"destination,omitempty"`
}

func (x *DestinationUpdateEvent) Reset() {
	*x = DestinationUpdateEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestinationUpdateEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestinationUpdateEvent) ProtoMessage() {}

func (x *DestinationUpdateEvent) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestinationUpdateEvent.ProtoReflect.Descriptor instead.
func (*DestinationUpdateEvent) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{145}
}

func (x *DestinationUpdateEvent) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

func (x *DestinationUpdateEvent) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *DestinationUpdateEvent) GetDestinationId() string {
	if x != nil {
		return x.DestinationId
	}
	return ""
}

func (x *DestinationUpdateEvent) GetUpdateMask() []string {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *DestinationUpdateEvent) GetDestination() *Destination {
	if x != nil {
		return x.Destination
	}
	return nil
}

// the state of a destination changed
type DestinationStateEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// collection which owns the project which owns the destination
	CollectionId string `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	// project which owns the destination
	ProjectId string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// destination id
	DestinationId string `protobuf:"bytes,3,opt,name=destination_id,json=destinationId,proto3" json:"destination_id,omitempty"`
	// what changed
	//
	// Types that are assignable to Type:
	//
	//	*DestinationStateEvent_Connect
	Type isDestinationStateEvent_Type `protobuf_oneof:"type"`
}

func (x *DestinationStateEvent) Reset() {
	*x = DestinationStateEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestinationStateEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestinationStateEvent) ProtoMessage() {}

func (x *DestinationStateEvent) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestinationStateEvent.ProtoReflect.Descriptor instead.
func (*DestinationStateEvent) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{146}
}

func (x *DestinationStateEvent) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

func (x *DestinationStateEvent) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *DestinationStateEvent) GetDestinationId() string {
	if x != nil {
		return x.DestinationId
	}
	return ""
}

func (m *DestinationStateEvent) GetType() isDestinationStateEvent_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *DestinationStateEvent) GetConnect() ConnectState {
	if x, ok := x.GetType().(*DestinationStateEvent_Connect); ok {
		return x.Connect
	}
	return ConnectState_CONNECT_STATE_UNSPECIFIED
}

type isDestinationStateEvent_Type interface {
	isDestinationStateEvent_Type()
}

type DestinationStateEvent_Connect struct {
	// the state of the connection changed
	Connect ConnectState `protobuf:"varint,4,opt,name=connect,proto3,enum=live.v21.ConnectState,oneof"`
}

func (*DestinationStateEvent_Connect) isDestinationStateEvent_Type() {}

// a project was created
type ProjectCreateEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// collection which owns the project
	CollectionId string `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	// project id
	ProjectId string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// the new project
	Project *Project `protobuf:"bytes,3,opt,name=project,proto3" json:"project,omitempty"`
}

func (x *ProjectCreateEvent) Reset() {
	*x = ProjectCreateEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectCreateEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectCreateEvent) ProtoMessage() {}

func (x *ProjectCreateEvent) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectCreateEvent.ProtoReflect.Descriptor instead.
func (*ProjectCreateEvent) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{147}
}

func (x *ProjectCreateEvent) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

func (x *ProjectCreateEvent) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *ProjectCreateEvent) GetProject() *Project {
	if x != nil {
		return x.Project
	}
	return nil
}

// a project was deleted
type ProjectDeleteEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// collection which owns the project
	CollectionId string `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	// project id
	ProjectId string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
}

func (x *ProjectDeleteEvent) Reset() {
	*x = ProjectDeleteEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectDeleteEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectDeleteEvent) ProtoMessage() {}

func (x *ProjectDeleteEvent) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectDeleteEvent.ProtoReflect.Descriptor instead.
func (*ProjectDeleteEvent) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{148}
}

func (x *ProjectDeleteEvent) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

func (x *ProjectDeleteEvent) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

// a project was updated
type ProjectUpdateEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// collection which owns the project
	CollectionId string `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	// project id
	ProjectId string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// the fields that were updated
	UpdateMask []string `protobuf:"bytes,3,rep,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// the updated project
	Project *Project `protobuf:"bytes,4,opt,name=project,proto3" json:"project,omitempty"`
}

func (x *ProjectUpdateEvent) Reset() {
	*x = ProjectUpdateEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectUpdateEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectUpdateEvent) ProtoMessage() {}

func (x *ProjectUpdateEvent) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectUpdateEvent.ProtoReflect.Descriptor instead.
func (*ProjectUpdateEvent) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{149}
}

func (x *ProjectUpdateEvent) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

func (x *ProjectUpdateEvent) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *ProjectUpdateEvent) GetUpdateMask() []string {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *ProjectUpdateEvent) GetProject() *Project {
	if x != nil {
		return x.Project
	}
	return nil
}

// the state of a project broadcast has changed
type ProjectBroadcastStateEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// collection which owns the project
	CollectionId string `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	// project id
	ProjectId string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// the id of the broadcast
	BroadcastId string `protobuf:"bytes,3,opt,name=broadcast_id,json=broadcastId,proto3" json:"broadcast_id,omitempty"`
	// the type of state change
	//
	// Types that are assignable to Type:
	//
	//	*ProjectBroadcastStateEvent_Phase
	//	*ProjectBroadcastStateEvent_Error
	Type isProjectBroadcastStateEvent_Type `protobuf_oneof:"type"`
}

func (x *ProjectBroadcastStateEvent) Reset() {
	*x = ProjectBroadcastStateEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectBroadcastStateEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectBroadcastStateEvent) ProtoMessage() {}

func (x *ProjectBroadcastStateEvent) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectBroadcastStateEvent.ProtoReflect.Descriptor instead.
func (*ProjectBroadcastStateEvent) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{150}
}

func (x *ProjectBroadcastStateEvent) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

func (x *ProjectBroadcastStateEvent) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *ProjectBroadcastStateEvent) GetBroadcastId() string {
	if x != nil {
		return x.BroadcastId
	}
	return ""
}

func (m *ProjectBroadcastStateEvent) GetType() isProjectBroadcastStateEvent_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *ProjectBroadcastStateEvent) GetPhase() ProjectBroadcastPhase {
	if x, ok := x.GetType().(*ProjectBroadcastStateEvent_Phase); ok {
		return x.Phase
	}
	return ProjectBroadcastPhase_PROJECT_BROADCAST_PHASE_UNSPECIFIED
}

func (x *ProjectBroadcastStateEvent) GetError() ProjectBroadcastError {
	if x, ok := x.GetType().(*ProjectBroadcastStateEvent_Error); ok {
		return x.Error
	}
	return ProjectBroadcastError_PROJECT_BROADCAST_ERROR_UNSPECIFIED
}

type isProjectBroadcastStateEvent_Type interface {
	isProjectBroadcastStateEvent_Type()
}

type ProjectBroadcastStateEvent_Phase struct {
	Phase ProjectBroadcastPhase `protobuf:"varint,4,opt,name=phase,proto3,enum=live.v21.ProjectBroadcastPhase,oneof"`
}

type ProjectBroadcastStateEvent_Error struct {
	Error ProjectBroadcastError `protobuf:"varint,5,opt,name=error,proto3,enum=live.v21.ProjectBroadcastError,oneof"`
}

func (*ProjectBroadcastStateEvent_Phase) isProjectBroadcastStateEvent_Type() {}

func (*ProjectBroadcastStateEvent_Error) isProjectBroadcastStateEvent_Type() {}

// a collection was created
type CollectionCreateEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// collection id
	CollectionId string `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	// the new collection
	Collection *Collection `protobuf:"bytes,2,opt,name=collection,proto3" json:"collection,omitempty"`
}

func (x *CollectionCreateEvent) Reset() {
	*x = CollectionCreateEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionCreateEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionCreateEvent) ProtoMessage() {}

func (x *CollectionCreateEvent) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionCreateEvent.ProtoReflect.Descriptor instead.
func (*CollectionCreateEvent) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{151}
}

func (x *CollectionCreateEvent) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

func (x *CollectionCreateEvent) GetCollection() *Collection {
	if x != nil {
		return x.Collection
	}
	return nil
}

// a collection was deleted
type CollectionDeleteEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// collection id
	CollectionId string `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
}

func (x *CollectionDeleteEvent) Reset() {
	*x = CollectionDeleteEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionDeleteEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionDeleteEvent) ProtoMessage() {}

func (x *CollectionDeleteEvent) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionDeleteEvent.ProtoReflect.Descriptor instead.
func (*CollectionDeleteEvent) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{152}
}

func (x *CollectionDeleteEvent) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

// a collection was updated
type CollectionUpdateEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// collection id
	CollectionId string `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	// the fields which were updated
	UpdateMask []string `protobuf:"bytes,2,rep,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// the updated collection
	Collection *Collection `protobuf:"bytes,3,opt,name=collection,proto3" json:"collection,omitempty"`
}

func (x *CollectionUpdateEvent) Reset() {
	*x = CollectionUpdateEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionUpdateEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionUpdateEvent) ProtoMessage() {}

func (x *CollectionUpdateEvent) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionUpdateEvent.ProtoReflect.Descriptor instead.
func (*CollectionUpdateEvent) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{153}
}

func (x *CollectionUpdateEvent) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

func (x *CollectionUpdateEvent) GetUpdateMask() []string {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *CollectionUpdateEvent) GetCollection() *Collection {
	if x != nil {
		return x.Collection
	}
	return nil
}

type SourceCreateEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// collection which owns the source
	CollectionId string `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	// source id
	SourceId string  `protobuf:"bytes,2,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`
	Source   *Source `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *SourceCreateEvent) Reset() {
	*x = SourceCreateEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SourceCreateEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceCreateEvent) ProtoMessage() {}

func (x *SourceCreateEvent) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceCreateEvent.ProtoReflect.Descriptor instead.
func (*SourceCreateEvent) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{154}
}

func (x *SourceCreateEvent) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

func (x *SourceCreateEvent) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

func (x *SourceCreateEvent) GetSource() *Source {
	if x != nil {
		return x.Source
	}
	return nil
}

type SourceDeleteEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionId string `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	SourceId     string `protobuf:"bytes,2,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`
}

func (x *SourceDeleteEvent) Reset() {
	*x = SourceDeleteEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SourceDeleteEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceDeleteEvent) ProtoMessage() {}

func (x *SourceDeleteEvent) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceDeleteEvent.ProtoReflect.Descriptor instead.
func (*SourceDeleteEvent) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{155}
}

func (x *SourceDeleteEvent) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

func (x *SourceDeleteEvent) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

type SourceUpdateEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionId string   `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	SourceId     string   `protobuf:"bytes,2,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`
	UpdateMask   []string `protobuf:"bytes,3,rep,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	Source       *Source  `protobuf:"bytes,4,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *SourceUpdateEvent) Reset() {
	*x = SourceUpdateEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SourceUpdateEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceUpdateEvent) ProtoMessage() {}

func (x *SourceUpdateEvent) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceUpdateEvent.ProtoReflect.Descriptor instead.
func (*SourceUpdateEvent) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{156}
}

func (x *SourceUpdateEvent) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

func (x *SourceUpdateEvent) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

func (x *SourceUpdateEvent) GetUpdateMask() []string {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *SourceUpdateEvent) GetSource() *Source {
	if x != nil {
		return x.Source
	}
	return nil
}

type SourceAddEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionId string  `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	SourceId     string  `protobuf:"bytes,2,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`
	ProjectId    string  `protobuf:"bytes,3,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Source       *Source `protobuf:"bytes,4,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *SourceAddEvent) Reset() {
	*x = SourceAddEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SourceAddEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceAddEvent) ProtoMessage() {}

func (x *SourceAddEvent) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceAddEvent.ProtoReflect.Descriptor instead.
func (*SourceAddEvent) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{157}
}

func (x *SourceAddEvent) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

func (x *SourceAddEvent) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

func (x *SourceAddEvent) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *SourceAddEvent) GetSource() *Source {
	if x != nil {
		return x.Source
	}
	return nil
}

type SourceRemoveEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionId string `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	SourceId     string `protobuf:"bytes,2,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`
	ProjectId    string `protobuf:"bytes,3,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
}

func (x *SourceRemoveEvent) Reset() {
	*x = SourceRemoveEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SourceRemoveEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceRemoveEvent) ProtoMessage() {}

func (x *SourceRemoveEvent) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceRemoveEvent.ProtoReflect.Descriptor instead.
func (*SourceRemoveEvent) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{158}
}

func (x *SourceRemoveEvent) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

func (x *SourceRemoveEvent) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

func (x *SourceRemoveEvent) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

// the state of a destination changed
type SourceStateEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// collection which owns the project which owns the source
	CollectionId string `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	// project id
	ProjectId string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// destination id
	SourceId string `protobuf:"bytes,3,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`
	// what changed
	//
	// Types that are assignable to Type:
	//
	//	*SourceStateEvent_Connect
	Type isSourceStateEvent_Type `protobuf_oneof:"type"`
}

func (x *SourceStateEvent) Reset() {
	*x = SourceStateEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SourceStateEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceStateEvent) ProtoMessage() {}

func (x *SourceStateEvent) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceStateEvent.ProtoReflect.Descriptor instead.
func (*SourceStateEvent) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{159}
}

func (x *SourceStateEvent) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

func (x *SourceStateEvent) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *SourceStateEvent) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

func (m *SourceStateEvent) GetType() isSourceStateEvent_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *SourceStateEvent) GetConnect() ConnectState {
	if x, ok := x.GetType().(*SourceStateEvent_Connect); ok {
		return x.Connect
	}
	return ConnectState_CONNECT_STATE_UNSPECIFIED
}

type isSourceStateEvent_Type interface {
	isSourceStateEvent_Type()
}

type SourceStateEvent_Connect struct {
	// the state of the connection changed
	Connect ConnectState `protobuf:"varint,4,opt,name=connect,proto3,enum=live.v21.ConnectState,oneof"`
}

func (*SourceStateEvent_Connect) isSourceStateEvent_Type() {}

type CollectionEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*CollectionEvent_Create
	//	*CollectionEvent_Update
	//	*CollectionEvent_Delete
	Type isCollectionEvent_Type `protobuf_oneof:"type"`
}

func (x *CollectionEvent) Reset() {
	*x = CollectionEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionEvent) ProtoMessage() {}

func (x *CollectionEvent) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionEvent.ProtoReflect.Descriptor instead.
func (*CollectionEvent) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{160}
}

func (m *CollectionEvent) GetType() isCollectionEvent_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *CollectionEvent) GetCreate() *CollectionCreateEvent {
	if x, ok := x.GetType().(*CollectionEvent_Create); ok {
		return x.Create
	}
	return nil
}

func (x *CollectionEvent) GetUpdate() *CollectionUpdateEvent {
	if x, ok := x.GetType().(*CollectionEvent_Update); ok {
		return x.Update
	}
	return nil
}

func (x *CollectionEvent) GetDelete() *CollectionDeleteEvent {
	if x, ok := x.GetType().(*CollectionEvent_Delete); ok {
		return x.Delete
	}
	return nil
}

type isCollectionEvent_Type interface {
	isCollectionEvent_Type()
}

type CollectionEvent_Create struct {
	Create *CollectionCreateEvent `protobuf:"bytes,1,opt,name=create,proto3,oneof"`
}

type CollectionEvent_Update struct {
	Update *CollectionUpdateEvent `protobuf:"bytes,2,opt,name=update,proto3,oneof"`
}

type CollectionEvent_Delete struct {
	Delete *CollectionDeleteEvent `protobuf:"bytes,3,opt,name=delete,proto3,oneof"`
}

func (*CollectionEvent_Create) isCollectionEvent_Type() {}

func (*CollectionEvent_Update) isCollectionEvent_Type() {}

func (*CollectionEvent_Delete) isCollectionEvent_Type() {}

type DestinationEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*DestinationEvent_Create
	//	*DestinationEvent_Update
	//	*DestinationEvent_Delete
	//	*DestinationEvent_State
	Type isDestinationEvent_Type `protobuf_oneof:"type"`
}

func (x *DestinationEvent) Reset() {
	*x = DestinationEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestinationEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestinationEvent) ProtoMessage() {}

func (x *DestinationEvent) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestinationEvent.ProtoReflect.Descriptor instead.
func (*DestinationEvent) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{161}
}

func (m *DestinationEvent) GetType() isDestinationEvent_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *DestinationEvent) GetCreate() *DestinationCreateEvent {
	if x, ok := x.GetType().(*DestinationEvent_Create); ok {
		return x.Create
	}
	return nil
}

func (x *DestinationEvent) GetUpdate() *DestinationUpdateEvent {
	if x, ok := x.GetType().(*DestinationEvent_Update); ok {
		return x.Update
	}
	return nil
}

func (x *DestinationEvent) GetDelete() *DestinationDeleteEvent {
	if x, ok := x.GetType().(*DestinationEvent_Delete); ok {
		return x.Delete
	}
	return nil
}

func (x *DestinationEvent) GetState() *DestinationStateEvent {
	if x, ok := x.GetType().(*DestinationEvent_State); ok {
		return x.State
	}
	return nil
}

type isDestinationEvent_Type interface {
	isDestinationEvent_Type()
}

type DestinationEvent_Create struct {
	Create *DestinationCreateEvent `protobuf:"bytes,1,opt,name=create,proto3,oneof"`
}

type DestinationEvent_Update struct {
	Update *DestinationUpdateEvent `protobuf:"bytes,2,opt,name=update,proto3,oneof"`
}

type DestinationEvent_Delete struct {
	Delete *DestinationDeleteEvent `protobuf:"bytes,3,opt,name=delete,proto3,oneof"`
}

type DestinationEvent_State struct {
	State *DestinationStateEvent `protobuf:"bytes,4,opt,name=state,proto3,oneof"`
}

func (*DestinationEvent_Create) isDestinationEvent_Type() {}

func (*DestinationEvent_Update) isDestinationEvent_Type() {}

func (*DestinationEvent_Delete) isDestinationEvent_Type() {}

func (*DestinationEvent_State) isDestinationEvent_Type() {}

type ProjectEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*ProjectEvent_Create
	//	*ProjectEvent_Update
	//	*ProjectEvent_Delete
	//	*ProjectEvent_State
	Type isProjectEvent_Type `protobuf_oneof:"type"`
}

func (x *ProjectEvent) Reset() {
	*x = ProjectEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectEvent) ProtoMessage() {}

func (x *ProjectEvent) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectEvent.ProtoReflect.Descriptor instead.
func (*ProjectEvent) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{162}
}

func (m *ProjectEvent) GetType() isProjectEvent_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *ProjectEvent) GetCreate() *ProjectCreateEvent {
	if x, ok := x.GetType().(*ProjectEvent_Create); ok {
		return x.Create
	}
	return nil
}

func (x *ProjectEvent) GetUpdate() *ProjectUpdateEvent {
	if x, ok := x.GetType().(*ProjectEvent_Update); ok {
		return x.Update
	}
	return nil
}

func (x *ProjectEvent) GetDelete() *ProjectDeleteEvent {
	if x, ok := x.GetType().(*ProjectEvent_Delete); ok {
		return x.Delete
	}
	return nil
}

func (x *ProjectEvent) GetState() *ProjectBroadcastStateEvent {
	if x, ok := x.GetType().(*ProjectEvent_State); ok {
		return x.State
	}
	return nil
}

type isProjectEvent_Type interface {
	isProjectEvent_Type()
}

type ProjectEvent_Create struct {
	Create *ProjectCreateEvent `protobuf:"bytes,1,opt,name=create,proto3,oneof"`
}

type ProjectEvent_Update struct {
	Update *ProjectUpdateEvent `protobuf:"bytes,2,opt,name=update,proto3,oneof"`
}

type ProjectEvent_Delete struct {
	Delete *ProjectDeleteEvent `protobuf:"bytes,3,opt,name=delete,proto3,oneof"`
}

type ProjectEvent_State struct {
	State *ProjectBroadcastStateEvent `protobuf:"bytes,4,opt,name=state,proto3,oneof"`
}

func (*ProjectEvent_Create) isProjectEvent_Type() {}

func (*ProjectEvent_Update) isProjectEvent_Type() {}

func (*ProjectEvent_Delete) isProjectEvent_Type() {}

func (*ProjectEvent_State) isProjectEvent_Type() {}

type SourceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*SourceEvent_Create
	//	*SourceEvent_Update
	//	*SourceEvent_Delete
	//	*SourceEvent_Add
	//	*SourceEvent_Remove
	//	*SourceEvent_State
	Type isSourceEvent_Type `protobuf_oneof:"type"`
}

func (x *SourceEvent) Reset() {
	*x = SourceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SourceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceEvent) ProtoMessage() {}

func (x *SourceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceEvent.ProtoReflect.Descriptor instead.
func (*SourceEvent) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{163}
}

func (m *SourceEvent) GetType() isSourceEvent_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *SourceEvent) GetCreate() *SourceCreateEvent {
	if x, ok := x.GetType().(*SourceEvent_Create); ok {
		return x.Create
	}
	return nil
}

func (x *SourceEvent) GetUpdate() *SourceUpdateEvent {
	if x, ok := x.GetType().(*SourceEvent_Update); ok {
		return x.Update
	}
	return nil
}

func (x *SourceEvent) GetDelete() *SourceDeleteEvent {
	if x, ok := x.GetType().(*SourceEvent_Delete); ok {
		return x.Delete
	}
	return nil
}

func (x *SourceEvent) GetAdd() *SourceAddEvent {
	if x, ok := x.GetType().(*SourceEvent_Add); ok {
		return x.Add
	}
	return nil
}

func (x *SourceEvent) GetRemove() *SourceRemoveEvent {
	if x, ok := x.GetType().(*SourceEvent_Remove); ok {
		return x.Remove
	}
	return nil
}

func (x *SourceEvent) GetState() *SourceStateEvent {
	if x, ok := x.GetType().(*SourceEvent_State); ok {
		return x.State
	}
	return nil
}

type isSourceEvent_Type interface {
	isSourceEvent_Type()
}

type SourceEvent_Create struct {
	Create *SourceCreateEvent `protobuf:"bytes,1,opt,name=create,proto3,oneof"`
}

type SourceEvent_Update struct {
	Update *SourceUpdateEvent `protobuf:"bytes,2,opt,name=update,proto3,oneof"`
}

type SourceEvent_Delete struct {
	Delete *SourceDeleteEvent `protobuf:"bytes,3,opt,name=delete,proto3,oneof"`
}

type SourceEvent_Add struct {
	Add *SourceAddEvent `protobuf:"bytes,4,opt,name=add,proto3,oneof"`
}

type SourceEvent_Remove struct {
	Remove *SourceRemoveEvent `protobuf:"bytes,5,opt,name=remove,proto3,oneof"`
}

type SourceEvent_State struct {
	State *SourceStateEvent `protobuf:"bytes,6,opt,name=state,proto3,oneof"`
}

func (*SourceEvent_Create) isSourceEvent_Type() {}

func (*SourceEvent_Update) isSourceEvent_Type() {}

func (*SourceEvent_Delete) isSourceEvent_Type() {}

func (*SourceEvent_Add) isSourceEvent_Type() {}

func (*SourceEvent_Remove) isSourceEvent_Type() {}

func (*SourceEvent_State) isSourceEvent_Type() {}

type LiveEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*LiveEvent_Collection
	//	*LiveEvent_Destination
	//	*LiveEvent_Project
	//	*LiveEvent_Source
	//	*LiveEvent_Unspecified
	Type isLiveEvent_Type `protobuf_oneof:"type"`
}

func (x *LiveEvent) Reset() {
	*x = LiveEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveEvent) ProtoMessage() {}

func (x *LiveEvent) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveEvent.ProtoReflect.Descriptor instead.
func (*LiveEvent) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{164}
}

func (m *LiveEvent) GetType() isLiveEvent_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *LiveEvent) GetCollection() *CollectionEvent {
	if x, ok := x.GetType().(*LiveEvent_Collection); ok {
		return x.Collection
	}
	return nil
}

func (x *LiveEvent) GetDestination() *DestinationEvent {
	if x, ok := x.GetType().(*LiveEvent_Destination); ok {
		return x.Destination
	}
	return nil
}

func (x *LiveEvent) GetProject() *ProjectEvent {
	if x, ok := x.GetType().(*LiveEvent_Project); ok {
		return x.Project
	}
	return nil
}

func (x *LiveEvent) GetSource() *SourceEvent {
	if x, ok := x.GetType().(*LiveEvent_Source); ok {
		return x.Source
	}
	return nil
}

func (x *LiveEvent) GetUnspecified() structpb.NullValue {
	if x, ok := x.GetType().(*LiveEvent_Unspecified); ok {
		return x.Unspecified
	}
	return structpb.NullValue(0)
}

type isLiveEvent_Type interface {
	isLiveEvent_Type()
}

type LiveEvent_Collection struct {
	Collection *CollectionEvent `protobuf:"bytes,1,opt,name=collection,proto3,oneof"`
}

type LiveEvent_Destination struct {
	Destination *DestinationEvent `protobuf:"bytes,2,opt,name=destination,proto3,oneof"`
}

type LiveEvent_Project struct {
	Project *ProjectEvent `protobuf:"bytes,3,opt,name=project,proto3,oneof"`
}

type LiveEvent_Source struct {
	Source *SourceEvent `protobuf:"bytes,4,opt,name=source,proto3,oneof"`
}

type LiveEvent_Unspecified struct {
	Unspecified structpb.NullValue `protobuf:"varint,5,opt,name=unspecified,proto3,enum=google.protobuf.NullValue,oneof"`
}

func (*LiveEvent_Collection) isLiveEvent_Type() {}

func (*LiveEvent_Destination) isLiveEvent_Type() {}

func (*LiveEvent_Project) isLiveEvent_Type() {}

func (*LiveEvent_Source) isLiveEvent_Type() {}

func (*LiveEvent_Unspecified) isLiveEvent_Type() {}

type GetServiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetServiceRequest) Reset() {
	*x = GetServiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceRequest) ProtoMessage() {}

func (x *GetServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceRequest.ProtoReflect.Descriptor instead.
func (*GetServiceRequest) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{165}
}

type Service struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceName string `protobuf:"bytes,2,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	ServiceId   string `protobuf:"bytes,3,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	Enabled     bool   `protobuf:"varint,9,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Demo        bool   `protobuf:"varint,11,opt,name=demo,proto3" json:"demo,omitempty"`
}

func (x *Service) Reset() {
	*x = Service{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Service) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service) ProtoMessage() {}

func (x *Service) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service.ProtoReflect.Descriptor instead.
func (*Service) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{166}
}

func (x *Service) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *Service) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *Service) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Service) GetDemo() bool {
	if x != nil {
		return x.Demo
	}
	return false
}

type GetServiceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Service *Service `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
}

func (x *GetServiceResponse) Reset() {
	*x = GetServiceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_v21_api_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServiceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceResponse) ProtoMessage() {}

func (x *GetServiceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_live_v21_api_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceResponse.ProtoReflect.Descriptor instead.
func (*GetServiceResponse) Descriptor() ([]byte, []int) {
	return file_live_v21_api_proto_rawDescGZIP(), []int{167}
}

func (x *GetServiceResponse) GetService() *Service {
	if x != nil {
		return x.Service
	}
	return nil
}

var File_live_v21_api_proto protoreflect.FileDescriptor

var file_live_v21_api_proto_rawDesc = []byte{
	0x0a, 0x12, 0x6c, 0x69, 0x76, 0x65, 0x2f, 0x76, 0x32, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x1a, 0x14,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x32, 0x31, 0x2f, 0x65, 0x78, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x68, 0x74, 0x74, 0x70, 0x62, 0x6f, 0x64, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x63, 0x0a, 0x1f, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x4f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x1f, 0x0a, 0x1d, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xde, 0x04, 0x0a, 0x0e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x66, 0x0a, 0x10, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x19, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x42, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x42, 0x1b, 0x92, 0x41, 0x18, 0x4a,
	0x16, 0x22, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x4f, 0x52, 0x49, 0x47,
	0x49, 0x4e, 0x5f, 0x41, 0x50, 0x49, 0x22, 0x48, 0x01, 0x52, 0x0f, 0x62, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x5b, 0x0a,
	0x1d, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x1a,
	0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x41,
	0x70, 0x69, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x72, 0x0a, 0x20, 0x62, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e,
	0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52,
	0x1d, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x78,
	0x0a, 0x22, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6c, 0x69, 0x76,
	0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x4f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x1f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x1b, 0x0a, 0x19, 0x62, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06,
	0x4a, 0x04, 0x08, 0x06, 0x10, 0x07, 0x22, 0x11, 0x0a, 0x0f, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xce, 0x01, 0x0a, 0x14, 0x57, 0x65,
	0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x0f, 0x92, 0x41, 0x0c, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x4a, 0x04,
	0x74, 0x72, 0x75, 0x65, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x47, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x35, 0x92, 0x41, 0x32, 0x4a,
	0x30, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x5c, 0x2f, 0x5c, 0x2f, 0x65, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x2e, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x2f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2d, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x22, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x33, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x5f, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0f, 0x92, 0x41, 0x0c, 0x3a,
	0x04, 0x35, 0x30, 0x30, 0x30, 0x4a, 0x04, 0x35, 0x30, 0x30, 0x30, 0x48, 0x00, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x73, 0x22, 0xab, 0x02, 0x0a, 0x18, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x6f, 0x6b, 0x12, 0x4c, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x57, 0x65, 0x62, 0x68,
	0x6f, 0x6f, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x77,
	0x65, 0x62, 0x72, 0x74, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x69,
	0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52, 0x0b, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x57, 0x65, 0x62, 0x72, 0x74, 0x63, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a,
	0x0b, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x57, 0x65,
	0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x02, 0x52, 0x0a, 0x6a, 0x6f, 0x69, 0x6e, 0x57, 0x65, 0x62, 0x72, 0x74, 0x63,
	0x88, 0x01, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x62, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6a, 0x6f, 0x69,
	0x6e, 0x5f, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x22, 0xfb, 0x01, 0x0a, 0x14, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x40, 0x0a, 0x15, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x63,
	0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x06, 0x92, 0x41, 0x03, 0x4a, 0x01, 0x31, 0x48, 0x00, 0x52, 0x14, 0x62, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x05, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x6f, 0x6f, 0x6b, 0x42, 0x07, 0x92, 0x41, 0x04, 0x3a, 0x02, 0x7b, 0x7d, 0x52,
	0x05, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x12, 0x29, 0x0a, 0x0e, 0x67, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x0c, 0x67, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x55, 0x72, 0x6c, 0x88, 0x01,
	0x01, 0x3a, 0x06, 0x82, 0xb5, 0x18, 0x02, 0x08, 0x01, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x62, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x67, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x22, 0x20, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x7f, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x15, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x69, 0x76,
	0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x07, 0x92, 0x41, 0x04, 0x3a,
	0x02, 0x7b, 0x7d, 0x52, 0x14, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xde, 0x02, 0x0a, 0x21, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x40, 0x0a, 0x15, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x06,
	0x92, 0x41, 0x03, 0x4a, 0x01, 0x31, 0x48, 0x00, 0x52, 0x14, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x88, 0x01,
	0x01, 0x12, 0x41, 0x0a, 0x05, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x6f, 0x6f, 0x6b, 0x42, 0x07, 0x92, 0x41, 0x04, 0x3a, 0x02, 0x7b, 0x7d, 0x52, 0x05, 0x68,
	0x6f, 0x6f, 0x6b, 0x73, 0x12, 0x29, 0x0a, 0x0e, 0x67, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0c,
	0x67, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12,
	0x5c, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b,
	0x42, 0x1f, 0x92, 0x41, 0x19, 0x4a, 0x17, 0x22, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0xe0, 0x41,
	0x02, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x18, 0x0a,
	0x16, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x67, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x22, 0x82, 0x01, 0x0a, 0x22, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x5c, 0x0a, 0x15, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x07, 0x92, 0x41, 0x04, 0x3a, 0x02, 0x7b, 0x7d, 0x52, 0x14, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0xfd, 0x02, 0x0a, 0x0e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x69,
	0x6e, 0x67, 0x12, 0x3c, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x3a, 0x03, 0x37, 0x32, 0x30, 0x4a, 0x03, 0x37, 0x32,
	0x30, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xa0, 0x40, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x6e, 0x40, 0x48, 0x00, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x3c, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x21, 0x92, 0x41, 0x1e, 0x3a, 0x04, 0x31, 0x32, 0x38, 0x30, 0x4a, 0x04, 0x31, 0x32, 0x38, 0x30,
	0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xae, 0x40, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x74, 0x40, 0x48, 0x01, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x40,
	0x0a, 0x09, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x02, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x3a, 0x02, 0x33, 0x30, 0x4a, 0x02, 0x33, 0x30, 0x59, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x4e, 0x40, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x3f,
	0x48, 0x02, 0x52, 0x09, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x7a, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31,
	0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x53, 0x70, 0x61, 0x63, 0x65,
	0x42, 0x39, 0x92, 0x41, 0x36, 0x3a, 0x18, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x43, 0x4f, 0x4c,
	0x4f, 0x52, 0x5f, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x59, 0x55, 0x56, 0x34, 0x32, 0x30, 0x4a,
	0x1a, 0x22, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x53, 0x50,
	0x41, 0x43, 0x45, 0x5f, 0x59, 0x55, 0x56, 0x34, 0x32, 0x30, 0x22, 0x48, 0x03, 0x52, 0x0a, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x53, 0x70, 0x61, 0x63, 0x65, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22,
	0xaf, 0x01, 0x0a, 0x0e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x69,
	0x6e, 0x67, 0x12, 0x89, 0x01, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6c,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x6c, 0x69,
	0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x42, 0x3f, 0x92, 0x41, 0x3c, 0x3a, 0x1b,
	0x41, 0x55, 0x44, 0x49, 0x4f, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x4c, 0x41,
	0x59, 0x4f, 0x55, 0x54, 0x5f, 0x53, 0x54, 0x45, 0x52, 0x45, 0x4f, 0x4a, 0x1d, 0x22, 0x41, 0x55,
	0x44, 0x49, 0x4f, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x4c, 0x41, 0x59, 0x4f,
	0x55, 0x54, 0x5f, 0x53, 0x54, 0x45, 0x52, 0x45, 0x4f, 0x22, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x88, 0x01, 0x01, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6c, 0x61, 0x79, 0x6f, 0x75,
	0x74, 0x22, 0x8e, 0x03, 0x0a, 0x09, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12,
	0x3c, 0x0a, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x07, 0x92, 0x41, 0x04, 0x3a, 0x02, 0x7b,
	0x7d, 0x48, 0x00, 0x52, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a,
	0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6c,
	0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x52, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x07, 0x92, 0x41, 0x04, 0x3a, 0x02, 0x7b, 0x7d, 0x48,
	0x01, 0x52, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x78, 0x0a, 0x07, 0x71,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6c,
	0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x69, 0x6e,
	0x67, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x3d, 0x92, 0x41, 0x3a, 0x3a, 0x1a, 0x52,
	0x45, 0x4e, 0x44, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x54, 0x59,
	0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x4a, 0x1c, 0x22, 0x52, 0x45, 0x4e, 0x44,
	0x45, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54,
	0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x22, 0x48, 0x02, 0x52, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92,
	0x41, 0x17, 0x4a, 0x03, 0x35, 0x30, 0x30, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0xb3, 0x40,
	0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0x40, 0x48, 0x03, 0x52, 0x0d, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x61, 0x75, 0x64, 0x69,
	0x6f, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79,
	0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69,
	0x74, 0x79, 0x22, 0x81, 0x03, 0x0a, 0x15, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x64, 0x65,
	0x63, 0x52, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x89, 0x01, 0x0a,
	0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6c, 0x69,
	0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x64, 0x65,
	0x63, 0x52, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x6f, 0x64, 0x65,
	0x42, 0x4b, 0x92, 0x41, 0x48, 0x3a, 0x21, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x43, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f,
	0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x42, 0x52, 0x4a, 0x23, 0x22, 0x56, 0x49, 0x44, 0x45, 0x4f,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x43, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54,
	0x52, 0x4f, 0x4c, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x42, 0x52, 0x22, 0x48, 0x00, 0x52,
	0x04, 0x6d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4c, 0x0a, 0x0e, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x20, 0x92, 0x41, 0x1d, 0x4a, 0x09, 0x22, 0x33, 0x31, 0x34, 0x35, 0x37, 0x32, 0x38, 0x22,
	0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x74, 0x41, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40,
	0x0f, 0x41, 0x48, 0x01, 0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x69, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x57, 0x0a, 0x16, 0x6d, 0x61, 0x78, 0x5f, 0x6b, 0x65,
	0x79, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x3a, 0x02, 0x33, 0x30, 0x4a,
	0x02, 0x33, 0x30, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0xdd, 0x40, 0x69, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0xf0, 0x3f, 0x48, 0x02, 0x52, 0x13, 0x6d, 0x61, 0x78, 0x4b, 0x65, 0x79, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x42, 0x19, 0x0a, 0x17, 0x5f,
	0x6d, 0x61, 0x78, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22, 0xdb, 0x02, 0x0a, 0x0d, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x5a, 0x0a, 0x05, 0x63, 0x6f, 0x64, 0x65,
	0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76,
	0x32, 0x31, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x42, 0x29, 0x92,
	0x41, 0x26, 0x3a, 0x10, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x43, 0x5f,
	0x48, 0x32, 0x36, 0x34, 0x4a, 0x12, 0x22, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x43, 0x5f, 0x48, 0x32, 0x36, 0x34, 0x22, 0x48, 0x00, 0x52, 0x05, 0x63, 0x6f, 0x64, 0x65,
	0x63, 0x88, 0x01, 0x01, 0x12, 0x50, 0x0a, 0x0c, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x69, 0x76,
	0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x63,
	0x52, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x42, 0x07, 0x92, 0x41, 0x04,
	0x3a, 0x02, 0x7b, 0x7d, 0x48, 0x01, 0x52, 0x0b, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x75, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76,
	0x32, 0x31, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x42, 0x39, 0x92, 0x41, 0x36, 0x3a, 0x18, 0x56, 0x49, 0x44, 0x45, 0x4f,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x48,
	0x49, 0x47, 0x48, 0x4a, 0x1a, 0x22, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x43, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x22, 0x48,
	0x02, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x22, 0x73, 0x0a, 0x0d, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x45, 0x6e, 0x63,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x58, 0x0a, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e,
	0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x42, 0x27, 0x92, 0x41, 0x24, 0x3a,
	0x0f, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x43, 0x5f, 0x41, 0x41, 0x43,
	0x4a, 0x11, 0x22, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x43, 0x5f, 0x41,
	0x41, 0x43, 0x22, 0x48, 0x00, 0x52, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x88, 0x01, 0x01, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x22, 0x98, 0x01, 0x0a, 0x08, 0x45, 0x6e,
	0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x3b, 0x0a, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31,
	0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x07,
	0x92, 0x41, 0x04, 0x3a, 0x02, 0x7b, 0x7d, 0x48, 0x00, 0x52, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x41, 0x75,
	0x64, 0x69, 0x6f, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x07, 0x92, 0x41, 0x04,
	0x3a, 0x02, 0x7b, 0x7d, 0x48, 0x01, 0x52, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x88, 0x01, 0x01,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x61,
	0x75, 0x64, 0x69, 0x6f, 0x22, 0xa0, 0x05, 0x0a, 0x15, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x74, 0x6d, 0x70, 0x50, 0x75, 0x73, 0x68, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2e,
	0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x0f, 0x92, 0x41, 0x0c, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x4a, 0x04, 0x74, 0x72, 0x75, 0x65,
	0x48, 0x00, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x4d,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x36, 0x92, 0x41, 0x27,
	0x4a, 0x25, 0x22, 0x37, 0x31, 0x33, 0x32, 0x62, 0x30, 0x30, 0x34, 0x2d, 0x36, 0x31, 0x65, 0x38,
	0x2d, 0x34, 0x39, 0x63, 0x31, 0x2d, 0x38, 0x64, 0x63, 0x38, 0x2d, 0x34, 0x62, 0x62, 0x33, 0x32,
	0x36, 0x39, 0x63, 0x65, 0x36, 0x66, 0x22, 0xe0, 0x41, 0x05, 0xe0, 0x41, 0x03, 0x82, 0xb5, 0x18,
	0x02, 0x50, 0x01, 0x48, 0x01, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x6e, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x57, 0x92, 0x41, 0x4e, 0x4a,
	0x4c, 0x22, 0x72, 0x74, 0x6d, 0x70, 0x3a, 0x5c, 0x2f, 0x5c, 0x2f, 0x69, 0x6e, 0x67, 0x65, 0x73,
	0x74, 0x2e, 0x67, 0x6f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x32, 0x2f, 0x37, 0x31, 0x33, 0x32, 0x62, 0x30, 0x30,
	0x34, 0x2d, 0x36, 0x31, 0x65, 0x38, 0x2d, 0x34, 0x39, 0x63, 0x31, 0x2d, 0x38, 0x64, 0x63, 0x38,
	0x2d, 0x34, 0x62, 0x62, 0x33, 0x32, 0x36, 0x39, 0x63, 0x65, 0x36, 0x66, 0x22, 0xe0, 0x41, 0x05,
	0xe0, 0x41, 0x03, 0x48, 0x02, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x53, 0x0a,
	0x08, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x33, 0x92, 0x41, 0x2a, 0x4a, 0x28, 0x22, 0x72, 0x74, 0x6d, 0x70, 0x3a, 0x5c, 0x2f, 0x5c, 0x2f,
	0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x2e, 0x67, 0x6f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x32, 0x22, 0xe0, 0x41,
	0x05, 0xe0, 0x41, 0x03, 0x48, 0x03, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x88,
	0x01, 0x01, 0x12, 0x59, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x33, 0x92, 0x41, 0x2a, 0x4a, 0x28, 0x22, 0x72,
	0x74, 0x6d, 0x70, 0x3a, 0x5c, 0x2f, 0x5c, 0x2f, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x2e, 0x67,
	0x6f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x61, 0x70, 0x69, 0x32, 0x22, 0xe0, 0x41, 0x05, 0xe0, 0x41, 0x03, 0x48, 0x04, 0x52, 0x0a,
	0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a,
	0x09, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x06, 0xe0, 0x41, 0x05, 0xe0, 0x41, 0x03, 0x48, 0x05, 0x52, 0x08, 0x69, 0x6e, 0x67, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x3a, 0x05, 0x66, 0x61,
	0x6c, 0x73, 0x65, 0x4a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x48, 0x06, 0x52, 0x06, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0b, 0x69, 0x6e, 0x67, 0x65, 0x73,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe0, 0x41,
	0x05, 0xe0, 0x41, 0x03, 0x48, 0x07, 0x52, 0x0a, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6b, 0x65, 0x79, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x75, 0x72,
	0x6c, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x69, 0x6e, 0x67, 0x65,
	0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0xc8, 0x05, 0x0a, 0x0e, 0x53, 0x72, 0x74, 0x50,
	0x75, 0x73, 0x68, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2e, 0x0a, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0f, 0x92, 0x41, 0x0c,
	0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x4a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x48, 0x00, 0x52, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x58, 0x0a, 0x09, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x36, 0x92,
	0x41, 0x27, 0x4a, 0x25, 0x22, 0x37, 0x31, 0x33, 0x32, 0x62, 0x30, 0x30, 0x34, 0x2d, 0x36, 0x31,
	0x65, 0x38, 0x2d, 0x34, 0x39, 0x63, 0x31, 0x2d, 0x38, 0x64, 0x63, 0x38, 0x2d, 0x34, 0x62, 0x62,
	0x33, 0x32, 0x36, 0x39, 0x63, 0x65, 0x36, 0x66, 0x22, 0xe0, 0x41, 0x05, 0xe0, 0x41, 0x03, 0x82,
	0xb5, 0x18, 0x02, 0x50, 0x01, 0x48, 0x01, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x8e, 0x01, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x77, 0x92, 0x41, 0x6e, 0x4a, 0x6c, 0x22, 0x73, 0x72, 0x74, 0x3a, 0x5c, 0x2f,
	0x5c, 0x2f, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x3f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x3d, 0x37, 0x31, 0x33,
	0x32, 0x62, 0x30, 0x30, 0x34, 0x2d, 0x36, 0x31, 0x65, 0x38, 0x2d, 0x34, 0x39, 0x63, 0x31, 0x2d,
	0x38, 0x64, 0x63, 0x38, 0x2d, 0x34, 0x62, 0x62, 0x33, 0x32, 0x36, 0x39, 0x63, 0x65, 0x36, 0x66,
	0x2f, 0x37, 0x31, 0x33, 0x32, 0x62, 0x30, 0x30, 0x34, 0x2d, 0x36, 0x31, 0x65, 0x38, 0x2d, 0x34,
	0x39, 0x63, 0x31, 0x2d, 0x38, 0x64, 0x63, 0x38, 0x2d, 0x34, 0x62, 0x62, 0x33, 0x32, 0x36, 0x39,
	0x63, 0x65, 0x36, 0x66, 0x22, 0xe0, 0x41, 0x05, 0xe0, 0x41, 0x03, 0x48, 0x02, 0x52, 0x03, 0x75,
	0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0x92, 0x41, 0x1d, 0x4a, 0x1b, 0x22, 0x73,
	0x72, 0x74, 0x3a, 0x5c, 0x2f, 0x5c, 0x2f, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x22, 0xe0, 0x41, 0x05, 0xe0, 0x41, 0x03, 0x48,
	0x03, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x9d, 0x01,
	0x0a, 0x0b, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x77, 0x92, 0x41, 0x6e, 0x4a, 0x6c, 0x22, 0x73, 0x72, 0x74, 0x3a, 0x5c,
	0x2f, 0x5c, 0x2f, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x3f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x3d, 0x37, 0x31,
	0x33, 0x32, 0x62, 0x30, 0x30, 0x34, 0x2d, 0x36, 0x31, 0x65, 0x38, 0x2d, 0x34, 0x39, 0x63, 0x31,
	0x2d, 0x38, 0x64, 0x63, 0x38, 0x2d, 0x34, 0x62, 0x62, 0x33, 0x32, 0x36, 0x39, 0x63, 0x65, 0x36,
	0x66, 0x2f, 0x37, 0x31, 0x33, 0x32, 0x62, 0x30, 0x30, 0x34, 0x2d, 0x36, 0x31, 0x65, 0x38, 0x2d,
	0x34, 0x39, 0x63, 0x31, 0x2d, 0x38, 0x64, 0x63, 0x38, 0x2d, 0x34, 0x62, 0x62, 0x33, 0x32, 0x36,
	0x39, 0x63, 0x65, 0x36, 0x66, 0x22, 0xe0, 0x41, 0x05, 0xe0, 0x41, 0x03, 0x48, 0x04, 0x52, 0x0a,
	0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a,
	0x09, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x06, 0xe0, 0x41, 0x05, 0xe0, 0x41, 0x03, 0x48, 0x05, 0x52, 0x08, 0x69, 0x6e, 0x67, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0b, 0x69, 0x6e, 0x67, 0x65, 0x73,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe0, 0x41,
	0x05, 0xe0, 0x41, 0x03, 0x48, 0x06, 0x52, 0x0a, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x42,
	0x06, 0x0a, 0x04, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x75, 0x72, 0x6c, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x5f, 0x75, 0x72, 0x6c, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x22, 0x5b, 0x0a, 0x0f, 0x52, 0x74, 0x6d, 0x70, 0x50, 0x75, 0x6c, 0x6c, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x48, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x36, 0x92, 0x41, 0x30, 0x4a, 0x2e, 0x22, 0x72, 0x74, 0x6d, 0x70, 0x3a, 0x2f,
	0x2f, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x2e, 0x66, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x2f,
	0x61, 0x62, 0x63, 0x31, 0x32, 0x33, 0x22, 0xe0, 0x41, 0x02, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22,
	0x4a, 0x0a, 0x0e, 0x53, 0x72, 0x74, 0x50, 0x75, 0x6c, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x38, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26,
	0x92, 0x41, 0x20, 0x4a, 0x1e, 0x22, 0x73, 0x72, 0x74, 0x3a, 0x2f, 0x2f, 0x69, 0x6e, 0x67, 0x65,
	0x73, 0x74, 0x2e, 0x66, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x63,
	0x6f, 0x6d, 0x22, 0xe0, 0x41, 0x02, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x2c, 0x0a, 0x0e, 0x44,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x13, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88,
	0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x22, 0x67, 0x0a, 0x11, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x52, 0x54, 0x4d, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2e,
	0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x0f, 0x92, 0x41, 0x0c, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x4a, 0x04, 0x74, 0x72, 0x75, 0x65,
	0x48, 0x00, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x22, 0x66, 0x0a, 0x10, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x53, 0x72, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2e, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0f, 0x92, 0x41, 0x0c, 0x3a, 0x04, 0x74, 0x72,
	0x75, 0x65, 0x4a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x48, 0x00, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x9e, 0x02, 0x0a, 0x14, 0x52,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x72, 0x74, 0x6d, 0x70, 0x5f, 0x70, 0x75, 0x6c, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32,
	0x31, 0x2e, 0x52, 0x74, 0x6d, 0x70, 0x50, 0x75, 0x6c, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x48, 0x00, 0x52, 0x08, 0x72, 0x74, 0x6d, 0x70, 0x50, 0x75, 0x6c, 0x6c, 0x12, 0x35, 0x0a,
	0x08, 0x73, 0x72, 0x74, 0x5f, 0x70, 0x75, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x53, 0x72, 0x74, 0x50, 0x75,
	0x6c, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x07, 0x73, 0x72, 0x74,
	0x50, 0x75, 0x6c, 0x6c, 0x12, 0x47, 0x0a, 0x10, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x72,
	0x74, 0x6d, 0x70, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x52, 0x54, 0x4d, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x0e, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x52, 0x74, 0x6d, 0x70, 0x50, 0x75, 0x73, 0x68, 0x12, 0x44, 0x0a,
	0x0f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x72, 0x74, 0x5f, 0x70, 0x75, 0x73, 0x68,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32,
	0x31, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x53, 0x72, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x53, 0x72, 0x74, 0x50,
	0x75, 0x73, 0x68, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xb5, 0x02, 0x0a, 0x0d,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3e, 0x0a,
	0x09, 0x72, 0x74, 0x6d, 0x70, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x74, 0x6d, 0x70, 0x50, 0x75, 0x73, 0x68, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x48, 0x00, 0x52, 0x08, 0x72, 0x74, 0x6d, 0x70, 0x50, 0x75, 0x73, 0x68, 0x12, 0x35, 0x0a,
	0x08, 0x73, 0x72, 0x74, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x53, 0x72, 0x74, 0x50, 0x75,
	0x73, 0x68, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x07, 0x73, 0x72, 0x74,
	0x50, 0x75, 0x73, 0x68, 0x12, 0x38, 0x0a, 0x09, 0x72, 0x74, 0x6d, 0x70, 0x5f, 0x70, 0x75, 0x6c,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76,
	0x32, 0x31, 0x2e, 0x52, 0x74, 0x6d, 0x70, 0x50, 0x75, 0x6c, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x48, 0x00, 0x52, 0x08, 0x72, 0x74, 0x6d, 0x70, 0x50, 0x75, 0x6c, 0x6c, 0x12, 0x35,
	0x0a, 0x08, 0x73, 0x72, 0x74, 0x5f, 0x70, 0x75, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x53, 0x72, 0x74, 0x50,
	0x75, 0x6c, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x07, 0x73, 0x72,
	0x74, 0x50, 0x75, 0x6c, 0x6c, 0x12, 0x34, 0x0a, 0x07, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32,
	0x31, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x48, 0x00, 0x52, 0x07, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x42, 0x06, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x22, 0xb6, 0x01, 0x0a, 0x1a, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x74, 0x6d, 0x70, 0x50, 0x75, 0x73, 0x68, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x41, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x2a, 0x92, 0x41, 0x27, 0x4a, 0x25, 0x22, 0x37, 0x31, 0x33, 0x32, 0x62, 0x30, 0x30, 0x34, 0x2d,
	0x36, 0x31, 0x65, 0x38, 0x2d, 0x34, 0x39, 0x63, 0x31, 0x2d, 0x38, 0x64, 0x63, 0x38, 0x2d, 0x34,
	0x62, 0x62, 0x33, 0x32, 0x36, 0x39, 0x63, 0x65, 0x36, 0x66, 0x22, 0x48, 0x00, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x4d, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x3b, 0x92, 0x41, 0x21, 0x4a, 0x1f, 0x22, 0x72, 0x74, 0x6d, 0x70, 0x3a, 0x2f,
	0x2f, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x2e, 0x66, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x22, 0xe0, 0x41, 0x02, 0x82, 0xb5, 0x18, 0x10, 0x5a,
	0x0e, 0x27, 0x72, 0x74, 0x6d, 0x70, 0x27, 0x2c, 0x27, 0x72, 0x74, 0x6d, 0x70, 0x73, 0x27, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6b, 0x65, 0x79, 0x22, 0x60, 0x0a, 0x19,
	0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x72, 0x74, 0x50, 0x75,
	0x73, 0x68, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x43, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0x92, 0x41, 0x20, 0x4a, 0x1e, 0x22, 0x73, 0x72,
	0x74, 0x3a, 0x2f, 0x2f, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x2e, 0x66, 0x61, 0x6b, 0x65, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x22, 0xe0, 0x41, 0x02, 0x82, 0xb5,
	0x18, 0x07, 0x5a, 0x05, 0x27, 0x73, 0x72, 0x74, 0x27, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x7b,
	0x0a, 0x1b, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x6f,
	0x72, 0x61, 0x50, 0x75, 0x73, 0x68, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a,
	0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xae, 0x01, 0x0a, 0x10,
	0x48, 0x6c, 0x73, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x4c, 0x69, 0x76, 0x65,
	0x12, 0x3e, 0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x12, 0x92, 0x41, 0x0f, 0x3a, 0x01, 0x35,
	0x4a, 0x01, 0x35, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x48, 0x00, 0x52, 0x0d,
	0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x38, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x14, 0x92, 0x41, 0x11, 0x3a, 0x02, 0x31, 0x30, 0x4a, 0x02, 0x31,
	0x30, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x40, 0x48, 0x01, 0x52, 0x09, 0x66, 0x69,
	0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x70,
	0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x55, 0x0a, 0x0f,
	0x48, 0x6c, 0x73, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x56, 0x6f, 0x64, 0x12,
	0x31, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0x92, 0x41, 0x06, 0x3a, 0x01, 0x30, 0x4a, 0x01, 0x30,
	0x48, 0x00, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x80, 0x01, 0x0a, 0x0c, 0x48, 0x6c, 0x73, 0x4c, 0x69, 0x66, 0x65, 0x63,
	0x79, 0x63, 0x6c, 0x65, 0x12, 0x36, 0x0a, 0x03, 0x76, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x48, 0x6c, 0x73,
	0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x56, 0x6f, 0x64, 0x42, 0x07, 0x92, 0x41,
	0x04, 0x3a, 0x02, 0x7b, 0x7d, 0x48, 0x00, 0x52, 0x03, 0x76, 0x6f, 0x64, 0x12, 0x30, 0x0a, 0x04,
	0x6c, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x69, 0x76,
	0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x48, 0x6c, 0x73, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63,
	0x6c, 0x65, 0x4c, 0x69, 0x76, 0x65, 0x48, 0x00, 0x52, 0x04, 0x6c, 0x69, 0x76, 0x65, 0x42, 0x06,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xb5, 0x01, 0x0a, 0x0c, 0x48, 0x6c, 0x73, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x3d, 0x0a, 0x09, 0x6c, 0x69, 0x66, 0x65, 0x63,
	0x79, 0x63, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x69, 0x76,
	0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x48, 0x6c, 0x73, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63,
	0x6c, 0x65, 0x42, 0x07, 0x92, 0x41, 0x04, 0x3a, 0x02, 0x7b, 0x7d, 0x52, 0x09, 0x6c, 0x69, 0x66,
	0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x12, 0x51, 0x0a, 0x10, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x21, 0x92, 0x41, 0x1e, 0x3a, 0x04, 0x32, 0x30, 0x30, 0x30, 0x4a, 0x04, 0x32, 0x30, 0x30,
	0x30, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x94, 0xd1, 0x40, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x40, 0x9f, 0x40, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x73, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x55,
	0x0a, 0x16, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x33, 0x0a, 0x03, 0x68, 0x6c, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31,
	0x2e, 0x48, 0x6c, 0x73, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x42, 0x07, 0x92,
	0x41, 0x04, 0x3a, 0x02, 0x7b, 0x7d, 0x48, 0x00, 0x52, 0x03, 0x68, 0x6c, 0x73, 0x42, 0x06, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x92, 0x02, 0x0a, 0x14, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x57, 0x65, 0x62, 0x52, 0x74, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x31,
	0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x12, 0x92, 0x41, 0x0c, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x4a, 0x04, 0x74, 0x72, 0x75, 0x65,
	0xe0, 0x41, 0x02, 0x48, 0x00, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x39, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0b, 0x4a, 0x09, 0x22, 0x43,
	0x61, 0x6d, 0x65, 0x72, 0x61, 0x31, 0x22, 0xe0, 0x41, 0x02, 0x48, 0x01, 0x52, 0x0b, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x5c, 0x0a, 0x0e,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0x92, 0x41, 0x27, 0x4a, 0x25, 0x22, 0x37, 0x31, 0x33, 0x32,
	0x62, 0x30, 0x30, 0x34, 0x2d, 0x36, 0x31, 0x65, 0x38, 0x2d, 0x34, 0x39, 0x63, 0x31, 0x2d, 0x38,
	0x64, 0x63, 0x38, 0x2d, 0x34, 0x62, 0x62, 0x33, 0x32, 0x36, 0x39, 0x63, 0x65, 0x36, 0x66, 0x22,
	0xe0, 0x41, 0x05, 0xe0, 0x41, 0x03, 0x48, 0x02, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x22, 0xaf, 0x04, 0x0a, 0x10, 0x53,
	0x33, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x2b, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x13, 0x92, 0x41, 0x0d, 0x4a, 0x0b, 0x22, 0x75, 0x73, 0x2d, 0x77, 0x65, 0x73, 0x74, 0x2d, 0x31,
	0x22, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x06,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41,
	0x0b, 0x4a, 0x09, 0x22, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x22, 0xe0, 0x41, 0x02, 0x52,
	0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x27, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x92, 0x41, 0x07, 0x4a, 0x05, 0x22, 0x61,
	0x70, 0x70, 0x22, 0x48, 0x00, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x88, 0x01, 0x01,
	0x12, 0x22, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x4b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x0d, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x40, 0x0a, 0x03, 0x61, 0x63, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x6c,
	0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x53, 0x33, 0x41, 0x43, 0x4c, 0x42, 0x18, 0x92,
	0x41, 0x15, 0x4a, 0x13, 0x22, 0x53, 0x33, 0x41, 0x43, 0x4c, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49,
	0x43, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x22, 0x48, 0x03, 0x52, 0x03, 0x61, 0x63, 0x6c, 0x88, 0x01,
	0x01, 0x12, 0x43, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x4a, 0x1d, 0x22, 0x66, 0x72, 0x61, 0x31, 0x2e,
	0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x6f, 0x63, 0x65, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x22, 0x48, 0x04, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6c, 0x69, 0x76, 0x65,
	0x2e, 0x76, 0x32, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x42, 0x07, 0x92, 0x41, 0x04,
	0x3a, 0x02, 0x7b, 0x7d, 0x52, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x61, 0x63, 0x6c, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0xe8, 0x02, 0x0a,
	0x12, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x43, 0x0a, 0x09, 0x72, 0x74, 0x6d, 0x70, 0x5f, 0x70, 0x75, 0x73, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32,
	0x31, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x74, 0x6d,
	0x70, 0x50, 0x75, 0x73, 0x68, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x08,
	0x72, 0x74, 0x6d, 0x70, 0x50, 0x75, 0x73, 0x68, 0x12, 0x3d, 0x0a, 0x05, 0x61, 0x67, 0x6f, 0x72,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76,
	0x32, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67,
	0x6f, 0x72, 0x61, 0x50, 0x75, 0x73, 0x68, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00,
	0x52, 0x05, 0x61, 0x67, 0x6f, 0x72, 0x61, 0x12, 0x3b, 0x0a, 0x0a, 0x73, 0x33, 0x5f, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x69,
	0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x53, 0x33, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x09, 0x73, 0x33, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x12, 0x40, 0x0a, 0x08, 0x73, 0x72, 0x74, 0x5f, 0x70, 0x75, 0x73, 0x68,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32,
	0x31, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x72, 0x74,
	0x50, 0x75, 0x73, 0x68, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x07, 0x73,
	0x72, 0x74, 0x50, 0x75, 0x73, 0x68, 0x12, 0x47, 0x0a, 0x0e, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63,
	0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x57, 0x65, 0x62, 0x52, 0x74, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00,
	0x52, 0x0d, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x42,
	0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xde, 0x02, 0x0a, 0x0d, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x09, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0x92, 0x41,
	0x27, 0x4a, 0x25, 0x22, 0x37, 0x31, 0x33, 0x32, 0x62, 0x30, 0x30, 0x34, 0x2d, 0x36, 0x31, 0x65,
	0x38, 0x2d, 0x34, 0x39, 0x63, 0x31, 0x2d, 0x38, 0x64, 0x63, 0x38, 0x2d, 0x34, 0x62, 0x62, 0x33,
	0x32, 0x36, 0x39, 0x63, 0x65, 0x36, 0x66, 0x22, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x77, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x3d, 0x92, 0x41, 0x3a, 0x3a, 0x1c, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x47, 0x4e, 0x4f, 0x52, 0x45, 0x4a, 0x1a, 0x22, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f,
	0x52, 0x22, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x75,
	0x0a, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6c,
	0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x3d, 0x92, 0x41, 0x3a,
	0x3a, 0x1c, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x47, 0x4e, 0x4f, 0x52, 0x45, 0x4a, 0x1a,
	0x22, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x52, 0x22, 0x48, 0x01, 0x52, 0x04, 0x73, 0x74,
	0x6f, 0x70, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x22, 0x8f, 0x01, 0x0a, 0x0d, 0x57, 0x65, 0x62,
	0x52, 0x74, 0x63, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x75, 0x0a, 0x04, 0x73, 0x74,
	0x6f, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e,
	0x76, 0x32, 0x31, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x3d, 0x92, 0x41, 0x3a, 0x3a, 0x1c, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x47, 0x4e, 0x4f, 0x52, 0x45, 0x4a, 0x1a, 0x22, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x4f, 0x52, 0x22, 0x48, 0x00, 0x52, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x88, 0x01,
	0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x22, 0x4b, 0x0a, 0x0e, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6c,
	0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x48, 0x00, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42,
	0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xe9, 0x01, 0x0a, 0x15, 0x50, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x48, 0x6c, 0x73, 0x50, 0x75, 0x6c, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x31, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x12, 0x92, 0x41, 0x0c, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x4a, 0x04, 0x74,
	0x72, 0x75, 0x65, 0xe0, 0x41, 0x02, 0x48, 0x00, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x88, 0x01, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x71, 0x92, 0x41, 0x68, 0x4a, 0x66, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a,
	0x5c, 0x2f, 0x5c, 0x2f, 0x64, 0x65, 0x76, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67,
	0x2d, 0x63, 0x64, 0x6e, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x73, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2f,
	0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2f, 0x69, 0x6d, 0x67, 0x5f, 0x62, 0x69, 0x70,
	0x62, 0x6f, 0x70, 0x5f, 0x61, 0x64, 0x76, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f,
	0x74, 0x73, 0x2f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x6d, 0x33, 0x75, 0x38, 0x22, 0xe0,
	0x41, 0x05, 0xe0, 0x41, 0x03, 0x48, 0x01, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x5f,
	0x75, 0x72, 0x6c, 0x22, 0x58, 0x0a, 0x0e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3b, 0x0a, 0x06, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31,
	0x2e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x57, 0x65, 0x62, 0x52, 0x74, 0x63, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x06, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x88,
	0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x22, 0xf3, 0x01,
	0x0a, 0x14, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x64, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x87, 0x01, 0x0a, 0x0c, 0x72, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x5f, 0x92,
	0x41, 0x48, 0x4a, 0x46, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x5c, 0x2f, 0x5c, 0x2f, 0x72,
	0x61, 0x69, 0x6e, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x2e, 0x67, 0x67, 0x5c, 0x2f, 0x6f, 0x76, 0x65,
	0x72, 0x6c, 0x61, 0x79, 0x5c, 0x2f, 0x65, 0x36, 0x37, 0x63, 0x66, 0x64, 0x36, 0x61, 0x64, 0x35,
	0x37, 0x35, 0x36, 0x30, 0x39, 0x36, 0x32, 0x66, 0x64, 0x64, 0x63, 0x66, 0x36, 0x33, 0x36, 0x31,
	0x31, 0x64, 0x32, 0x38, 0x33, 0x34, 0x5c, 0x2f, 0x31, 0x22, 0x82, 0xb5, 0x18, 0x10, 0x5a, 0x0e,
	0x27, 0x68, 0x74, 0x74, 0x70, 0x27, 0x2c, 0x27, 0x68, 0x74, 0x74, 0x70, 0x73, 0x27, 0x48, 0x00,
	0x52, 0x0b, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01,
	0x12, 0x34, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x15, 0x92, 0x41, 0x12, 0x3a, 0x06, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x4a, 0x08,
	0x22, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x22, 0x48, 0x01, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0xe2, 0x02, 0x0a, 0x19, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x52, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x87, 0x01, 0x0a, 0x0c, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x65, 0x72, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x5f, 0x92, 0x41, 0x48, 0x4a, 0x46, 0x22,
	0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x5c, 0x2f, 0x5c, 0x2f, 0x72, 0x61, 0x69, 0x6e, 0x6d, 0x61,
	0x6b, 0x65, 0x72, 0x2e, 0x67, 0x67, 0x5c, 0x2f, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x5c,
	0x2f, 0x65, 0x36, 0x37, 0x63, 0x66, 0x64, 0x36, 0x61, 0x64, 0x35, 0x37, 0x35, 0x36, 0x30, 0x39,
	0x36, 0x32, 0x66, 0x64, 0x64, 0x63, 0x66, 0x36, 0x33, 0x36, 0x31, 0x31, 0x64, 0x32, 0x38, 0x33,
	0x34, 0x5c, 0x2f, 0x31, 0x22, 0x82, 0xb5, 0x18, 0x10, 0x5a, 0x0e, 0x27, 0x68, 0x74, 0x74, 0x70,
	0x27, 0x2c, 0x27, 0x68, 0x74, 0x74, 0x70, 0x73, 0x27, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x92, 0x41,
	0x12, 0x3a, 0x06, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x4a, 0x08, 0x22, 0x6c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x22, 0x48, 0x01, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x54, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x63, 0x65, 0x6e,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0x92, 0x41, 0x24, 0x4a,
	0x22, 0x22, 0x65, 0x36, 0x37, 0x63, 0x66, 0x64, 0x36, 0x61, 0x64, 0x35, 0x37, 0x35, 0x36, 0x30,
	0x39, 0x36, 0x32, 0x66, 0x64, 0x64, 0x63, 0x66, 0x36, 0x33, 0x36, 0x31, 0x31, 0x64, 0x32, 0x38,
	0x33, 0x35, 0x22, 0x48, 0x02, 0x52, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x63, 0x65,
	0x6e, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x22, 0xd8, 0x02, 0x0a, 0x10, 0x53, 0x63, 0x65,
	0x6e, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x87, 0x01,
	0x0a, 0x0c, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x5f, 0x92, 0x41, 0x48, 0x4a, 0x46, 0x22, 0x68, 0x74, 0x74, 0x70,
	0x73, 0x3a, 0x5c, 0x2f, 0x5c, 0x2f, 0x72, 0x61, 0x69, 0x6e, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x2e,
	0x67, 0x67, 0x5c, 0x2f, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x5c, 0x2f, 0x65, 0x36, 0x37,
	0x63, 0x66, 0x64, 0x36, 0x61, 0x64, 0x35, 0x37, 0x35, 0x36, 0x30, 0x39, 0x36, 0x32, 0x66, 0x64,
	0x64, 0x63, 0x66, 0x36, 0x33, 0x36, 0x31, 0x31, 0x64, 0x32, 0x38, 0x33, 0x34, 0x5c, 0x2f, 0x31,
	0x22, 0x82, 0xb5, 0x18, 0x10, 0x5a, 0x0e, 0x27, 0x68, 0x74, 0x74, 0x70, 0x27, 0x2c, 0x27, 0x68,
	0x74, 0x74, 0x70, 0x73, 0x27, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x65,
	0x72, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x5a, 0x0a, 0x12, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x5f, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x27, 0x92, 0x41, 0x24, 0x4a, 0x22, 0x22, 0x65, 0x36, 0x37, 0x63, 0x66,
	0x64, 0x36, 0x61, 0x64, 0x35, 0x37, 0x35, 0x36, 0x30, 0x39, 0x36, 0x32, 0x66, 0x64, 0x64, 0x63,
	0x66, 0x36, 0x33, 0x36, 0x31, 0x31, 0x64, 0x32, 0x38, 0x33, 0x35, 0x22, 0x48, 0x01, 0x52, 0x10,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x4a, 0x05,
	0x66, 0x61, 0x6c, 0x73, 0x65, 0x48, 0x02, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x88, 0x01,
	0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x65, 0x72, 0x5f, 0x75,
	0x72, 0x6c, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f,
	0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x22, 0x8b, 0x01, 0x0a, 0x13, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x74, 0x0a, 0x03, 0x75,
	0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x62, 0x92, 0x41, 0x48, 0x4a, 0x46, 0x22,
	0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x5c, 0x2f, 0x5c, 0x2f, 0x72, 0x61, 0x69, 0x6e, 0x6d, 0x61,
	0x6b, 0x65, 0x72, 0x2e, 0x67, 0x67, 0x5c, 0x2f, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x5c,
	0x2f, 0x65, 0x36, 0x37, 0x63, 0x66, 0x64, 0x36, 0x61, 0x64, 0x35, 0x37, 0x35, 0x36, 0x30, 0x39,
	0x36, 0x32, 0x66, 0x64, 0x64, 0x63, 0x66, 0x36, 0x33, 0x36, 0x31, 0x31, 0x64, 0x32, 0x38, 0x33,
	0x34, 0x5c, 0x2f, 0x31, 0x22, 0xe0, 0x41, 0x02, 0x82, 0xb5, 0x18, 0x10, 0x5a, 0x0e, 0x27, 0x68,
	0x74, 0x74, 0x70, 0x27, 0x2c, 0x27, 0x68, 0x74, 0x74, 0x70, 0x73, 0x27, 0x52, 0x03, 0x75, 0x72,
	0x6c, 0x22, 0xa0, 0x02, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x3b, 0x0a, 0x08, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x3f,
	0x0a, 0x0a, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x73, 0x64, 0x6b, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x53, 0x74,
	0x75, 0x64, 0x69, 0x6f, 0x53, 0x64, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x64, 0x6b, 0x12,
	0x4e, 0x0a, 0x0f, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e,
	0x76, 0x32, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x0e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x65, 0x72, 0x12,
	0x3b, 0x0a, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x07, 0x92, 0x41, 0x04, 0x3a,
	0x02, 0x7b, 0x7d, 0x48, 0x00, 0x52, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x42, 0x06, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x22, 0x4a, 0x0a, 0x0c, 0x48, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x57, 0x65,
	0x62, 0x52, 0x74, 0x63, 0x12, 0x2e, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0f, 0x92, 0x41, 0x0c, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65,
	0x4a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x48, 0x00, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x22, 0x42, 0x0a, 0x06, 0x57, 0x65, 0x62, 0x52, 0x74, 0x63, 0x12, 0x30, 0x0a, 0x06, 0x68, 0x6f,
	0x73, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x69, 0x76,
	0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x57, 0x65, 0x62, 0x52,
	0x74, 0x63, 0x48, 0x00, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x42, 0x06, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x22, 0xea, 0x01, 0x0a, 0x0c, 0x57, 0x65, 0x62, 0x52, 0x74, 0x63, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x69, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x46, 0x92, 0x41, 0x43,
	0x4a, 0x41, 0x22, 0x65, 0x79, 0x4a, 0x30, 0x65, 0x58, 0x41, 0x69, 0x4f, 0x69, 0x4a, 0x71, 0x64,
	0x33, 0x51, 0x69, 0x4c, 0x43, 0x4a, 0x68, 0x62, 0x47, 0x63, 0x69, 0x4f, 0x69, 0x4a, 0x53, 0x55,
	0x7a, 0x49, 0x31, 0x4e, 0x69, 0x49, 0x73, 0x49, 0x6d, 0x74, 0x70, 0x5a, 0x43, 0x49, 0x36, 0x49,
	0x6b, 0x4e, 0x33, 0x64, 0x58, 0x4e, 0x4e, 0x62, 0x6d, 0x5a, 0x46, 0x5a, 0x6c, 0x39, 0x33, 0x4e,
	0x6b, 0x39, 0x22, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x5c, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0x92, 0x41, 0x27, 0x4a, 0x25, 0x22,
	0x37, 0x31, 0x33, 0x32, 0x62, 0x30, 0x30, 0x34, 0x2d, 0x36, 0x31, 0x65, 0x38, 0x2d, 0x34, 0x39,
	0x63, 0x31, 0x2d, 0x38, 0x64, 0x63, 0x38, 0x2d, 0x34, 0x62, 0x62, 0x33, 0x32, 0x36, 0x39, 0x63,
	0x65, 0x36, 0x66, 0x22, 0xe0, 0x41, 0x05, 0xe0, 0x41, 0x03, 0x48, 0x00, 0x52, 0x0d, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x22, 0x43, 0x0a, 0x07, 0x4c, 0x61, 0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e,
	0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x22, 0xf3, 0x01, 0x0a, 0x0f, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x22, 0x0a, 0x0a, 0x64, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x09, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x20,
	0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x02, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x3e, 0x0a, 0x09, 0x72, 0x74, 0x6d, 0x70, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x74, 0x6d, 0x70, 0x50, 0x75, 0x73, 0x68, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x08, 0x72, 0x74, 0x6d, 0x70, 0x50, 0x75, 0x73, 0x68,
	0x12, 0x35, 0x0a, 0x08, 0x73, 0x72, 0x74, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x53, 0x72,
	0x74, 0x50, 0x75, 0x73, 0x68, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x07,
	0x73, 0x72, 0x74, 0x50, 0x75, 0x73, 0x68, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x22, 0xc9, 0x09, 0x0a,
	0x16, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4f, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a,
	0x92, 0x41, 0x27, 0x4a, 0x25, 0x22, 0x37, 0x31, 0x33, 0x32, 0x62, 0x30, 0x30, 0x34, 0x2d, 0x36,
	0x31, 0x65, 0x38, 0x2d, 0x34, 0x39, 0x63, 0x31, 0x2d, 0x38, 0x64, 0x63, 0x38, 0x2d, 0x34, 0x62,
	0x62, 0x33, 0x32, 0x36, 0x39, 0x63, 0x65, 0x36, 0x66, 0x22, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x92, 0x41,
	0x27, 0x4a, 0x25, 0x22, 0x37, 0x31, 0x33, 0x32, 0x62, 0x30, 0x30, 0x34, 0x2d, 0x36, 0x31, 0x65,
	0x38, 0x2d, 0x34, 0x39, 0x63, 0x31, 0x2d, 0x38, 0x64, 0x63, 0x38, 0x2d, 0x34, 0x62, 0x62, 0x33,
	0x32, 0x36, 0x39, 0x63, 0x65, 0x36, 0x66, 0x22, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x52, 0x0a, 0x0c, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x92, 0x41, 0x27, 0x4a, 0x25,
	0x22, 0x37, 0x31, 0x33, 0x32, 0x62, 0x30, 0x30, 0x34, 0x2d, 0x36, 0x31, 0x65, 0x38, 0x2d, 0x34,
	0x39, 0x63, 0x31, 0x2d, 0x38, 0x64, 0x63, 0x38, 0x2d, 0x34, 0x62, 0x62, 0x33, 0x32, 0x36, 0x39,
	0x63, 0x65, 0x36, 0x66, 0x22, 0x48, 0x01, 0x52, 0x0b, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0b, 0x92, 0x41, 0x08, 0x4a, 0x06,
	0x33, 0x30, 0x30, 0x30, 0x30, 0x30, 0x48, 0x02, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x52, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x42, 0x1b, 0x92, 0x41, 0x18, 0x4a, 0x16, 0x22, 0x31, 0x39, 0x38, 0x31, 0x2d, 0x30, 0x38, 0x2d,
	0x30, 0x31, 0x54, 0x30, 0x30, 0x3a, 0x30, 0x31, 0x3a, 0x30, 0x30, 0x5a, 0x22, 0x48, 0x03, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x50, 0x0a, 0x04, 0x73, 0x74, 0x6f,
	0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x42, 0x1b, 0x92, 0x41, 0x18, 0x4a, 0x16, 0x22, 0x31, 0x39, 0x38, 0x31, 0x2d,
	0x30, 0x38, 0x2d, 0x30, 0x31, 0x54, 0x30, 0x30, 0x3a, 0x30, 0x34, 0x3a, 0x32, 0x31, 0x5a, 0x22,
	0x48, 0x04, 0x52, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x88, 0x01, 0x01, 0x12, 0x61, 0x0a, 0x05, 0x70,
	0x68, 0x61, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6c, 0x69, 0x76,
	0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x72, 0x6f,
	0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x42, 0x2a, 0x92, 0x41, 0x27,
	0x4a, 0x25, 0x22, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x42, 0x52, 0x4f, 0x41, 0x44,
	0x43, 0x41, 0x53, 0x54, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x22, 0x52, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x12, 0x44,
	0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10,
	0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x42, 0x15, 0x92, 0x41, 0x12, 0x4a, 0x10, 0x22, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x5f, 0x55,
	0x53, 0x5f, 0x45, 0x41, 0x53, 0x54, 0x22, 0x48, 0x05, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x63, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0x92, 0x41, 0x08, 0x4a, 0x06, 0x22,
	0x6e, 0x79, 0x63, 0x31, 0x22, 0x48, 0x06, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x63, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x0e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x55, 0x72, 0x6c, 0x52, 0x0d, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x73, 0x12, 0x53, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e,
	0x76, 0x32, 0x31, 0x2e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x4f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x42, 0x1b, 0x92, 0x41, 0x18, 0x4a, 0x16, 0x22, 0x42, 0x52, 0x4f, 0x41, 0x44,
	0x43, 0x41, 0x53, 0x54, 0x5f, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x5f, 0x41, 0x50, 0x49, 0x22,
	0x48, 0x07, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a,
	0x13, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x48, 0x00, 0x52, 0x11, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x41, 0x70, 0x69, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x5f, 0x0a, 0x16, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76,
	0x32, 0x31, 0x2e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x4f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x48, 0x00, 0x52, 0x14, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x65, 0x0a, 0x18, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6c, 0x69, 0x76,
	0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x4f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x16, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x45,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42,
	0x11, 0x0a, 0x0f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73,
	0x74, 0x6f, 0x70, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x22, 0xab, 0x03, 0x0a, 0x06, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x62, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3d, 0x92, 0x41, 0x27, 0x4a,
	0x25, 0x22, 0x37, 0x31, 0x33, 0x32, 0x62, 0x30, 0x30, 0x34, 0x2d, 0x36, 0x31, 0x65, 0x38, 0x2d,
	0x34, 0x39, 0x63, 0x31, 0x2d, 0x38, 0x64, 0x63, 0x38, 0x2d, 0x34, 0x62, 0x62, 0x33, 0x32, 0x36,
	0x39, 0x63, 0x65, 0x36, 0x66, 0x22, 0xe0, 0x41, 0x05, 0x82, 0xb5, 0x18, 0x0c, 0x2a, 0x0a, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x33, 0x92, 0x41, 0x27, 0x4a,
	0x25, 0x22, 0x37, 0x31, 0x33, 0x32, 0x62, 0x30, 0x30, 0x34, 0x2d, 0x36, 0x31, 0x65, 0x38, 0x2d,
	0x34, 0x39, 0x63, 0x31, 0x2d, 0x38, 0x64, 0x63, 0x38, 0x2d, 0x34, 0x62, 0x62, 0x33, 0x32, 0x36,
	0x39, 0x63, 0x65, 0x36, 0x66, 0x22, 0xe0, 0x41, 0x05, 0x82, 0xb5, 0x18, 0x02, 0x10, 0x01, 0x52,
	0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x5c, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x23, 0x92, 0x41, 0x20, 0x4a, 0x1e, 0x7b, 0x22, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x22, 0x3a, 0x20, 0x22, 0x45, 0x64, 0x64, 0x69, 0x65, 0x20, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x22, 0x7d, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e,
	0x76, 0x32, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x48, 0x01, 0x52, 0x07, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x88, 0x01, 0x01,
	0x12, 0x31, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x3a, 0x08, 0x82, 0xb5, 0x18, 0x04, 0x08, 0x01, 0x38, 0x01, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x22, 0x98, 0x05, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x62, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3d, 0x92,
	0x41, 0x27, 0x4a, 0x25, 0x22, 0x37, 0x31, 0x33, 0x32, 0x62, 0x30, 0x30, 0x34, 0x2d, 0x36, 0x31,
	0x65, 0x38, 0x2d, 0x34, 0x39, 0x63, 0x31, 0x2d, 0x38, 0x64, 0x63, 0x38, 0x2d, 0x34, 0x62, 0x62,
	0x33, 0x32, 0x36, 0x39, 0x63, 0x65, 0x36, 0x66, 0x22, 0xe0, 0x41, 0x05, 0x82, 0xb5, 0x18, 0x0c,
	0x2a, 0x0a, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x59, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3a,
	0x92, 0x41, 0x27, 0x4a, 0x25, 0x22, 0x37, 0x31, 0x33, 0x32, 0x62, 0x30, 0x30, 0x34, 0x2d, 0x36,
	0x31, 0x65, 0x38, 0x2d, 0x34, 0x39, 0x63, 0x31, 0x2d, 0x38, 0x64, 0x63, 0x38, 0x2d, 0x34, 0x62,
	0x62, 0x33, 0x32, 0x36, 0x39, 0x63, 0x65, 0x36, 0x66, 0x22, 0xe0, 0x41, 0x05, 0x82, 0xb5, 0x18,
	0x09, 0x2a, 0x07, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x5a, 0x0a, 0x0e, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x33, 0x92,
	0x41, 0x27, 0x4a, 0x25, 0x22, 0x37, 0x31, 0x33, 0x32, 0x62, 0x30, 0x30, 0x34, 0x2d, 0x36, 0x31,
	0x65, 0x38, 0x2d, 0x34, 0x39, 0x63, 0x31, 0x2d, 0x38, 0x64, 0x63, 0x38, 0x2d, 0x34, 0x62, 0x62,
	0x33, 0x32, 0x36, 0x39, 0x63, 0x65, 0x36, 0x66, 0x22, 0xe0, 0x41, 0x05, 0x82, 0xb5, 0x18, 0x02,
	0x10, 0x01, 0x52, 0x0d, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x5c, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x23, 0x92, 0x41, 0x20,
	0x4a, 0x1e, 0x7b, 0x22, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x22, 0x3a, 0x20,
	0x22, 0x45, 0x64, 0x64, 0x69, 0x65, 0x20, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x22, 0x7d,
	0x48, 0x00, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12,
	0x2e, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x0f, 0x92, 0x41, 0x0c, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x4a, 0x04, 0x74, 0x72, 0x75,
	0x65, 0x48, 0x01, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x36, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2e, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0f, 0x92, 0x41, 0x0c, 0x3a, 0x04, 0x35,
	0x30, 0x30, 0x30, 0x4a, 0x04, 0x35, 0x30, 0x30, 0x30, 0x48, 0x02, 0x52, 0x07, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x12, 0x92,
	0x41, 0x0f, 0x4a, 0x04, 0x35, 0x30, 0x30, 0x30, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0xdd,
	0x40, 0x48, 0x03, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x44, 0x65, 0x6c, 0x61, 0x79,
	0x88, 0x01, 0x01, 0x3a, 0x06, 0x82, 0xb5, 0x18, 0x02, 0x08, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x61,
	0x79, 0x22, 0x85, 0x07, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x62, 0x0a,
	0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x3d, 0x92, 0x41, 0x27, 0x4a, 0x25, 0x22, 0x37, 0x31, 0x33, 0x32,
	0x62, 0x30, 0x30, 0x34, 0x2d, 0x36, 0x31, 0x65, 0x38, 0x2d, 0x34, 0x39, 0x63, 0x31, 0x2d, 0x38,
	0x64, 0x63, 0x38, 0x2d, 0x34, 0x62, 0x62, 0x33, 0x32, 0x36, 0x39, 0x63, 0x65, 0x36, 0x66, 0x22,
	0xe0, 0x41, 0x05, 0x82, 0xb5, 0x18, 0x0c, 0x2a, 0x0a, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x52, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x33, 0x92, 0x41, 0x27, 0x4a, 0x25, 0x22, 0x37, 0x31, 0x33,
	0x32, 0x62, 0x30, 0x30, 0x34, 0x2d, 0x36, 0x31, 0x65, 0x38, 0x2d, 0x34, 0x39, 0x63, 0x31, 0x2d,
	0x38, 0x64, 0x63, 0x38, 0x2d, 0x34, 0x62, 0x62, 0x33, 0x32, 0x36, 0x39, 0x63, 0x65, 0x36, 0x66,
	0x22, 0xe0, 0x41, 0x05, 0x82, 0xb5, 0x18, 0x02, 0x10, 0x01, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x5c, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x23, 0x92, 0x41, 0x20, 0x4a, 0x1e, 0x7b, 0x22, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x22, 0x3a, 0x20, 0x22, 0x45, 0x64, 0x64, 0x69, 0x65, 0x20, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x22, 0x7d, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x09, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32,
	0x31, 0x2e, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x07, 0x92, 0x41, 0x04,
	0x3a, 0x02, 0x7b, 0x7d, 0x52, 0x09, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12,
	0x37, 0x0a, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x45, 0x6e, 0x63,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x07, 0x92, 0x41, 0x04, 0x3a, 0x02, 0x7b, 0x7d, 0x52, 0x08,
	0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x34, 0x0a, 0x07, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6c, 0x69, 0x76, 0x65,
	0x2e, 0x76, 0x32, 0x31, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x08, 0x82, 0xb5, 0x18,
	0x04, 0x30, 0x00, 0x40, 0x01, 0x52, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x41,
	0x0a, 0x0c, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e,
	0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0x82, 0xb5, 0x18,
	0x02, 0x18, 0x01, 0x52, 0x0c, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x40, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32,
	0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x07, 0x92,
	0x41, 0x04, 0x3a, 0x02, 0x7b, 0x7d, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x3a, 0x09,
	0x31, 0x37, 0x32, 0x38, 0x30, 0x30, 0x30, 0x30, 0x30, 0x4a, 0x09, 0x31, 0x37, 0x32, 0x38, 0x30,
	0x30, 0x30, 0x30, 0x30, 0x59, 0x00, 0x00, 0x00, 0x00, 0x42, 0x06, 0xc2, 0x41, 0x48, 0x01, 0x52,
	0x0b, 0x6d, 0x61, 0x78, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x2d, 0x0a, 0x06, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x57, 0x65, 0x62, 0x52, 0x74,
	0x63, 0x48, 0x02, 0x52, 0x06, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x88, 0x01, 0x01, 0x12, 0x34,
	0x0a, 0x08, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x08, 0x74, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x73, 0x12, 0x32, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32,
	0x31, 0x2e, 0x4c, 0x61, 0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x48, 0x03, 0x52, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x3a, 0x06, 0x82, 0xb5, 0x18, 0x02, 0x08, 0x01,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x04, 0x08, 0x0d, 0x10, 0x0e, 0x52, 0x0b, 0x67, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x22, 0xc4, 0x02, 0x0a, 0x0a, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x33, 0x92, 0x41, 0x27, 0x4a, 0x25, 0x22, 0x37, 0x31, 0x33, 0x32, 0x62, 0x30, 0x30, 0x34, 0x2d,
	0x36, 0x31, 0x65, 0x38, 0x2d, 0x34, 0x39, 0x63, 0x31, 0x2d, 0x38, 0x64, 0x63, 0x38, 0x2d, 0x34,
	0x62, 0x62, 0x33, 0x32, 0x36, 0x39, 0x63, 0x65, 0x36, 0x66, 0x22, 0xe0, 0x41, 0x05, 0x82, 0xb5,
	0x18, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x5c, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x23, 0x92, 0x41,
	0x20, 0x4a, 0x1e, 0x7b, 0x22, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x22, 0x3a,
	0x20, 0x22, 0x45, 0x64, 0x64, 0x69, 0x65, 0x20, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x22,
	0x7d, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01,
	0x12, 0x35, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x06, 0x82, 0xb5, 0x18, 0x02, 0x18, 0x01, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e,
	0x76, 0x32, 0x31, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x06, 0x82, 0xb5, 0x18, 0x02,
	0x18, 0x01, 0x52, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x3a, 0x06, 0x82, 0xb5, 0x18,
	0x02, 0x08, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x84, 0x01, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5c, 0x0a, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x23, 0x92, 0x41, 0x20, 0x4a, 0x1e, 0x7b, 0x22, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x22, 0x3a, 0x20, 0x22, 0x45, 0x64, 0x64, 0x69,
	0x65, 0x20, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x22, 0x7d, 0x48, 0x00, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x50, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76,
	0x32, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8d, 0x02, 0x0a, 0x14, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x52, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0x92, 0x41, 0x27, 0x4a, 0x25,
	0x22, 0x37, 0x31, 0x33, 0x32, 0x62, 0x30, 0x30, 0x34, 0x2d, 0x36, 0x31, 0x65, 0x38, 0x2d, 0x34,
	0x39, 0x63, 0x31, 0x2d, 0x38, 0x64, 0x63, 0x38, 0x2d, 0x34, 0x62, 0x62, 0x33, 0x32, 0x36, 0x39,
	0x63, 0x65, 0x36, 0x66, 0x22, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x11, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61,
	0x74, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x09, 0x92, 0x41, 0x06, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x48, 0x00, 0x52, 0x10,
	0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x10, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x09, 0x92,
	0x41, 0x06, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x48, 0x01, 0x52, 0x0f, 0x70, 0x6f, 0x70, 0x75,
	0x6c, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x88, 0x01, 0x01, 0x42, 0x14,
	0x0a, 0x12, 0x5f, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74,
	0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x22, 0x4d, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x34, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32,
	0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa9, 0x02, 0x0a, 0x17, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0x92, 0x41, 0x27,
	0x4a, 0x25, 0x22, 0x37, 0x31, 0x33, 0x32, 0x62, 0x30, 0x30, 0x34, 0x2d, 0x36, 0x31, 0x65, 0x38,
	0x2d, 0x34, 0x39, 0x63, 0x31, 0x2d, 0x38, 0x64, 0x63, 0x38, 0x2d, 0x34, 0x62, 0x62, 0x33, 0x32,
	0x36, 0x39, 0x63, 0x65, 0x36, 0x66, 0x22, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x4f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x12, 0x92, 0x41, 0x0c, 0x4a, 0x0a,
	0x22, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x5c, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x23, 0x92, 0x41, 0x20, 0x4a, 0x1e, 0x7b, 0x22, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x22, 0x3a, 0x20, 0x22, 0x45, 0x64, 0x64, 0x69, 0x65, 0x20, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x22, 0x7d, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x50, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x34, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa5, 0x01, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x52, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0x92, 0x41, 0x27, 0x4a, 0x25,
	0x22, 0x37, 0x31, 0x33, 0x32, 0x62, 0x30, 0x30, 0x34, 0x2d, 0x36, 0x31, 0x65, 0x38, 0x2d, 0x34,
	0x39, 0x63, 0x31, 0x2d, 0x38, 0x64, 0x63, 0x38, 0x2d, 0x34, 0x62, 0x62, 0x33, 0x32, 0x36, 0x39,
	0x63, 0x65, 0x36, 0x66, 0x22, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73,
	0x65, 0x4a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x48, 0x00, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x22, 0xdc,
	0x01, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x0f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0x92, 0x41, 0x03, 0x4a, 0x01, 0x31, 0x52, 0x0e, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x31, 0x0a, 0x10,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0x92, 0x41, 0x03, 0x4a, 0x01, 0x31, 0x52, 0x0f,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12,
	0x5c, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x5f, 0x73,
	0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x2c, 0x92, 0x41,
	0x29, 0x4a, 0x27, 0x5b, 0x22, 0x37, 0x31, 0x33, 0x32, 0x62, 0x30, 0x30, 0x34, 0x2d, 0x36, 0x31,
	0x65, 0x38, 0x2d, 0x34, 0x39, 0x63, 0x31, 0x2d, 0x38, 0x64, 0x63, 0x38, 0x2d, 0x34, 0x62, 0x62,
	0x33, 0x32, 0x36, 0x39, 0x63, 0x65, 0x36, 0x66, 0x22, 0x5d, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x73, 0x53, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x22, 0x17, 0x0a,
	0x15, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x50, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x36, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31,
	0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x85, 0x05, 0x0a, 0x14, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x52, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0x92, 0x41, 0x27, 0x4a, 0x25, 0x22,
	0x37, 0x31, 0x33, 0x32, 0x62, 0x30, 0x30, 0x34, 0x2d, 0x36, 0x31, 0x65, 0x38, 0x2d, 0x34, 0x39,
	0x63, 0x31, 0x2d, 0x38, 0x64, 0x63, 0x38, 0x2d, 0x34, 0x62, 0x62, 0x33, 0x32, 0x36, 0x39, 0x63,
	0x65, 0x36, 0x66, 0x22, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x5c, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x23, 0x92, 0x41, 0x20, 0x4a, 0x1e, 0x7b, 0x22, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x22, 0x3a, 0x20, 0x22, 0x45, 0x64, 0x64, 0x69, 0x65, 0x20, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x22, 0x7d, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x09, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32,
	0x31, 0x2e, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x07, 0x92, 0x41, 0x04,
	0x3a, 0x02, 0x7b, 0x7d, 0x48, 0x01, 0x52, 0x09, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x69, 0x6e,
	0x67, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32,
	0x31, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x07, 0x92, 0x41, 0x04, 0x3a,
	0x02, 0x7b, 0x7d, 0x48, 0x02, 0x52, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x88,
	0x01, 0x01, 0x12, 0x3c, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76,
	0x32, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x4a, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x3a, 0x09, 0x31, 0x37, 0x32,
	0x38, 0x30, 0x30, 0x30, 0x30, 0x30, 0x4a, 0x09, 0x31, 0x37, 0x32, 0x38, 0x30, 0x30, 0x30, 0x30,
	0x30, 0x59, 0x00, 0x00, 0x00, 0x00, 0x42, 0x06, 0xc2, 0x41, 0x48, 0x03, 0x52, 0x0b, 0x6d, 0x61,
	0x78, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x06,
	0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6c,
	0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x57, 0x65, 0x62, 0x52, 0x74, 0x63, 0x48, 0x04,
	0x52, 0x06, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x4c, 0x61, 0x74, 0x4c, 0x6f, 0x6e, 0x67,
	0x48, 0x05, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65,
	0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x61, 0x78, 0x5f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x77, 0x65, 0x62,
	0x72, 0x74, 0x63, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x44, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6c, 0x69, 0x76,
	0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0xbf, 0x06, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x52, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0x92, 0x41, 0x27, 0x4a, 0x25, 0x22, 0x37, 0x31,
	0x33, 0x32, 0x62, 0x30, 0x30, 0x34, 0x2d, 0x36, 0x31, 0x65, 0x38, 0x2d, 0x34, 0x39, 0x63, 0x31,
	0x2d, 0x38, 0x64, 0x63, 0x38, 0x2d, 0x34, 0x62, 0x62, 0x33, 0x32, 0x36, 0x39, 0x63, 0x65, 0x36,
	0x66, 0x22, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0x92, 0x41, 0x27, 0x4a, 0x25, 0x22, 0x37,
	0x31, 0x33, 0x32, 0x62, 0x30, 0x30, 0x34, 0x2d, 0x36, 0x31, 0x65, 0x38, 0x2d, 0x34, 0x39, 0x63,
	0x31, 0x2d, 0x38, 0x64, 0x63, 0x38, 0x2d, 0x34, 0x62, 0x62, 0x33, 0x32, 0x36, 0x39, 0x63, 0x65,
	0x36, 0x66, 0x22, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x77, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61,
	0x73, 0x6b, 0x42, 0x3a, 0x92, 0x41, 0x34, 0x4a, 0x32, 0x22, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2c, 0x20, 0x6d, 0x61, 0x78, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c,
	0x20, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x2e, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x61, 0x74, 0x65, 0x22, 0xe0, 0x41, 0x02, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x5c, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x23, 0x92, 0x41, 0x20, 0x4a, 0x1e, 0x7b, 0x22, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x22, 0x3a, 0x20, 0x22, 0x45, 0x64, 0x64, 0x69, 0x65, 0x20,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x22, 0x7d, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x09, 0x72, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6c, 0x69,
	0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x48, 0x01, 0x52, 0x09, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01,
	0x12, 0x33, 0x0a, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x45, 0x6e,
	0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x48, 0x02, 0x52, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69,
	0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6c, 0x69, 0x76,
	0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x03, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x17, 0x92, 0x41, 0x14, 0x4a, 0x09,
	0x31, 0x37, 0x32, 0x38, 0x30, 0x30, 0x30, 0x30, 0x30, 0x59, 0x00, 0x00, 0x00, 0x00, 0x42, 0x06,
	0xc2, 0x41, 0x48, 0x04, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x06, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e,
	0x57, 0x65, 0x62, 0x52, 0x74, 0x63, 0x48, 0x05, 0x52, 0x06, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63,
	0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31,
	0x2e, 0x4c, 0x61, 0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x48, 0x06, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x69,
	0x6e, 0x67, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x7c, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2b, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x36,
	0x0a, 0x11, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x09, 0x92, 0x41, 0x06, 0x4a, 0x04,
	0x74, 0x72, 0x75, 0x65, 0x52, 0x10, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0xf0, 0x01, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x52, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0x92, 0x41, 0x27, 0x4a, 0x25, 0x22, 0x37, 0x31,
	0x33, 0x32, 0x62, 0x30, 0x30, 0x34, 0x2d, 0x36, 0x31, 0x65, 0x38, 0x2d, 0x34, 0x39, 0x63, 0x31,
	0x2d, 0x38, 0x64, 0x63, 0x38, 0x2d, 0x34, 0x62, 0x62, 0x33, 0x32, 0x36, 0x39, 0x63, 0x65, 0x36,
	0x66, 0x22, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0x92, 0x41, 0x27, 0x4a, 0x25, 0x22, 0x37,
	0x31, 0x33, 0x32, 0x62, 0x30, 0x30, 0x34, 0x2d, 0x36, 0x31, 0x65, 0x38, 0x2d, 0x34, 0x39, 0x63,
	0x31, 0x2d, 0x38, 0x64, 0x63, 0x38, 0x2d, 0x34, 0x62, 0x62, 0x33, 0x32, 0x36, 0x39, 0x63, 0x65,
	0x36, 0x66, 0x22, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x2c, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x11, 0x92, 0x41, 0x0e, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x4a, 0x05, 0x66, 0x61,
	0x6c, 0x73, 0x65, 0x48, 0x00, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x88, 0x01, 0x01, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x22, 0x78, 0x0a, 0x15, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x36, 0x0a, 0x11, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f,
	0x73, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x09, 0x92,
	0x41, 0x06, 0x4a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x10, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x53, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x6c, 0x61,
	0x79, 0x6f, 0x75, 0x74, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x22, 0x8c, 0x05, 0x0a, 0x1c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0x92, 0x41, 0x27,
	0x4a, 0x25, 0x22, 0x37, 0x31, 0x33, 0x32, 0x62, 0x30, 0x30, 0x34, 0x2d, 0x36, 0x31, 0x65, 0x38,
	0x2d, 0x34, 0x39, 0x63, 0x31, 0x2d, 0x38, 0x64, 0x63, 0x38, 0x2d, 0x34, 0x62, 0x62, 0x33, 0x32,
	0x36, 0x39, 0x63, 0x65, 0x36, 0x66, 0x22, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0x92, 0x41,
	0x27, 0x4a, 0x25, 0x22, 0x37, 0x31, 0x33, 0x32, 0x62, 0x30, 0x30, 0x34, 0x2d, 0x36, 0x31, 0x65,
	0x38, 0x2d, 0x34, 0x39, 0x63, 0x31, 0x2d, 0x38, 0x64, 0x63, 0x38, 0x2d, 0x34, 0x62, 0x62, 0x33,
	0x32, 0x36, 0x39, 0x63, 0x65, 0x36, 0x66, 0x22, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x0c, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x10, 0x92, 0x41,
	0x0d, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x4a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x48, 0x00,
	0x52, 0x0b, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x53, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x2b, 0x0a, 0x05, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x10, 0x92, 0x41, 0x0d, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x4a, 0x04, 0x74, 0x72, 0x75,
	0x65, 0x48, 0x01, 0x52, 0x05, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x88, 0x01, 0x01, 0x12, 0x63, 0x0a,
	0x0f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32,
	0x31, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x12, 0x6b, 0x0a, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x23, 0x92, 0x41, 0x20, 0x4a, 0x1e, 0x7b, 0x22, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x22, 0x3a, 0x20, 0x22, 0x45, 0x64, 0x64, 0x69, 0x65, 0x20,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x22, 0x7d, 0x48, 0x02, 0x52, 0x0f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x1a,
	0x61, 0x0a, 0x13, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76,
	0x32, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x42, 0x13, 0x0a,
	0x11, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x6e, 0x0a, 0x1d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0c, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x92, 0x41, 0x27, 0x4a, 0x25,
	0x22, 0x37, 0x31, 0x33, 0x32, 0x62, 0x30, 0x30, 0x34, 0x2d, 0x36, 0x31, 0x65, 0x38, 0x2d, 0x34,
	0x39, 0x63, 0x31, 0x2d, 0x38, 0x64, 0x63, 0x38, 0x2d, 0x34, 0x62, 0x62, 0x33, 0x32, 0x36, 0x39,
	0x63, 0x65, 0x36, 0x66, 0x22, 0x52, 0x0b, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x49, 0x64, 0x22, 0x87, 0x02, 0x0a, 0x1b, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x52, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0x92, 0x41, 0x27, 0x4a, 0x25,
	0x22, 0x37, 0x31, 0x33, 0x32, 0x62, 0x30, 0x30, 0x34, 0x2d, 0x36, 0x31, 0x65, 0x38, 0x2d, 0x34,
	0x39, 0x63, 0x31, 0x2d, 0x38, 0x64, 0x63, 0x38, 0x2d, 0x34, 0x62, 0x62, 0x33, 0x32, 0x36, 0x39,
	0x63, 0x65, 0x36, 0x66, 0x22, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0x92, 0x41, 0x27, 0x4a,
	0x25, 0x22, 0x37, 0x31, 0x33, 0x32, 0x62, 0x30, 0x30, 0x34, 0x2d, 0x36, 0x31, 0x65, 0x38, 0x2d,
	0x34, 0x39, 0x63, 0x31, 0x2d, 0x38, 0x64, 0x63, 0x38, 0x2d, 0x34, 0x62, 0x62, 0x33, 0x32, 0x36,
	0x39, 0x63, 0x65, 0x36, 0x66, 0x22, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x0b, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x5f, 0x73,
	0x74, 0x6f, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x10, 0x92, 0x41, 0x0d, 0x3a, 0x05,
	0x66, 0x61, 0x6c, 0x73, 0x65, 0x4a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x77,
	0x65, 0x62, 0x72, 0x74, 0x63, 0x53, 0x74, 0x6f, 0x70, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x22, 0x1e, 0x0a, 0x1c,
	0x53, 0x74, 0x6f, 0x70, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xef, 0x01, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x52, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0x92, 0x41, 0x27, 0x4a, 0x25,
	0x22, 0x37, 0x31, 0x33, 0x32, 0x62, 0x30, 0x30, 0x34, 0x2d, 0x36, 0x31, 0x65, 0x38, 0x2d, 0x34,
	0x39, 0x63, 0x31, 0x2d, 0x38, 0x64, 0x63, 0x38, 0x2d, 0x34, 0x62, 0x62, 0x33, 0x32, 0x36, 0x39,
	0x63, 0x65, 0x36, 0x66, 0x22, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0x92, 0x41, 0x27, 0x4a,
	0x25, 0x22, 0x37, 0x31, 0x33, 0x32, 0x62, 0x30, 0x30, 0x34, 0x2d, 0x36, 0x31, 0x65, 0x38, 0x2d,
	0x34, 0x39, 0x63, 0x31, 0x2d, 0x38, 0x64, 0x63, 0x38, 0x2d, 0x34, 0x62, 0x62, 0x33, 0x32, 0x36,
	0x39, 0x63, 0x65, 0x36, 0x66, 0x22, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x10, 0x92, 0x41, 0x0d, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65,
	0x4a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x8b,
	0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32,
	0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x3d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01,
	0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xb2, 0x02, 0x0a,
	0x22, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0x92, 0x41, 0x27, 0x4a,
	0x25, 0x22, 0x37, 0x31, 0x33, 0x32, 0x62, 0x30, 0x30, 0x34, 0x2d, 0x36, 0x31, 0x65, 0x38, 0x2d,
	0x34, 0x39, 0x63, 0x31, 0x2d, 0x38, 0x64, 0x63, 0x38, 0x2d, 0x34, 0x62, 0x62, 0x33, 0x32, 0x36,
	0x39, 0x63, 0x65, 0x36, 0x66, 0x22, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0x92, 0x41, 0x27,
	0x4a, 0x25, 0x22, 0x37, 0x31, 0x33, 0x32, 0x62, 0x30, 0x30, 0x34, 0x2d, 0x36, 0x31, 0x65, 0x38,
	0x2d, 0x34, 0x39, 0x63, 0x31, 0x2d, 0x38, 0x64, 0x63, 0x38, 0x2d, 0x34, 0x62, 0x62, 0x33, 0x32,
	0x36, 0x39, 0x63, 0x65, 0x36, 0x66, 0x22, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x5f, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31,
	0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x42, 0x2b, 0x92, 0x41,
	0x28, 0x3a, 0x11, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f,
	0x4a, 0x50, 0x45, 0x47, 0x4a, 0x13, 0x22, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x46, 0x4f, 0x52,
	0x4d, 0x41, 0x54, 0x5f, 0x4a, 0x50, 0x45, 0x47, 0x22, 0x48, 0x00, 0x52, 0x06, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x22, 0x84, 0x01, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x06, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6c, 0x69, 0x76, 0x65,
	0x2e, 0x76, 0x32, 0x31, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x42, 0x18, 0x92, 0x41, 0x15, 0x4a, 0x13, 0x22, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x46, 0x4f,
	0x52, 0x4d, 0x41, 0x54, 0x5f, 0x4a, 0x50, 0x45, 0x47, 0x22, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x22, 0xc4, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x52, 0x0a,
	0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0x92, 0x41, 0x27, 0x4a, 0x25, 0x22, 0x37, 0x31, 0x33, 0x32,
	0x62, 0x30, 0x30, 0x34, 0x2d, 0x36, 0x31, 0x65, 0x38, 0x2d, 0x34, 0x39, 0x63, 0x31, 0x2d, 0x38,
	0x64, 0x63, 0x38, 0x2d, 0x34, 0x62, 0x62, 0x33, 0x32, 0x36, 0x39, 0x63, 0x65, 0x36, 0x66, 0x22,
	0xe0, 0x41, 0x02, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x4c, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0x92, 0x41, 0x27, 0x4a, 0x25, 0x22, 0x37, 0x31, 0x33,
	0x32, 0x62, 0x30, 0x30, 0x34, 0x2d, 0x36, 0x31, 0x65, 0x38, 0x2d, 0x34, 0x39, 0x63, 0x31, 0x2d,
	0x38, 0x64, 0x63, 0x38, 0x2d, 0x34, 0x62, 0x62, 0x33, 0x32, 0x36, 0x39, 0x63, 0x65, 0x36, 0x66,
	0x22, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22,
	0x5d, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x72, 0x6f,
	0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xbd,
	0x01, 0x0a, 0x19, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x57,
	0x65, 0x62, 0x52, 0x74, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x0d,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x2d, 0x92, 0x41, 0x27, 0x4a, 0x25, 0x22, 0x37, 0x31, 0x33, 0x32, 0x62,
	0x30, 0x30, 0x34, 0x2d, 0x36, 0x31, 0x65, 0x38, 0x2d, 0x34, 0x39, 0x63, 0x31, 0x2d, 0x38, 0x64,
	0x63, 0x38, 0x2d, 0x34, 0x62, 0x62, 0x33, 0x32, 0x36, 0x39, 0x63, 0x65, 0x36, 0x66, 0x22, 0xe0,
	0x41, 0x02, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x4c, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0x92, 0x41, 0x27, 0x4a, 0x25, 0x22, 0x37, 0x31, 0x33, 0x32,
	0x62, 0x30, 0x30, 0x34, 0x2d, 0x36, 0x31, 0x65, 0x38, 0x2d, 0x34, 0x39, 0x63, 0x31, 0x2d, 0x38,
	0x64, 0x63, 0x38, 0x2d, 0x34, 0x62, 0x62, 0x33, 0x32, 0x36, 0x39, 0x63, 0x65, 0x36, 0x66, 0x22,
	0xe0, 0x41, 0x02, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0x1c,
	0x0a, 0x1a, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x57, 0x65,
	0x62, 0x52, 0x74, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xbc, 0x01, 0x0a,
	0x18, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x57, 0x65, 0x62, 0x52,
	0x74, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x0d, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x2d, 0x92, 0x41, 0x27, 0x4a, 0x25, 0x22, 0x37, 0x31, 0x33, 0x32, 0x62, 0x30, 0x30, 0x34,
	0x2d, 0x36, 0x31, 0x65, 0x38, 0x2d, 0x34, 0x39, 0x63, 0x31, 0x2d, 0x38, 0x64, 0x63, 0x38, 0x2d,
	0x34, 0x62, 0x62, 0x33, 0x32, 0x36, 0x39, 0x63, 0x65, 0x36, 0x66, 0x22, 0xe0, 0x41, 0x02, 0x52,
	0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x4c, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x2d, 0x92, 0x41, 0x27, 0x4a, 0x25, 0x22, 0x37, 0x31, 0x33, 0x32, 0x62, 0x30, 0x30,
	0x34, 0x2d, 0x36, 0x31, 0x65, 0x38, 0x2d, 0x34, 0x39, 0x63, 0x31, 0x2d, 0x38, 0x64, 0x63, 0x38,
	0x2d, 0x34, 0x62, 0x62, 0x33, 0x32, 0x36, 0x39, 0x63, 0x65, 0x36, 0x66, 0x22, 0xe0, 0x41, 0x02,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0x1b, 0x0a, 0x19, 0x53,
	0x74, 0x6f, 0x70, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x57, 0x65, 0x62, 0x52, 0x74, 0x63,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb6, 0x04, 0x0a, 0x18, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0x92, 0x41,
	0x27, 0x4a, 0x25, 0x22, 0x37, 0x31, 0x33, 0x32, 0x62, 0x30, 0x30, 0x34, 0x2d, 0x36, 0x31, 0x65,
	0x38, 0x2d, 0x34, 0x39, 0x63, 0x31, 0x2d, 0x38, 0x64, 0x63, 0x38, 0x2d, 0x34, 0x62, 0x62, 0x33,
	0x32, 0x36, 0x39, 0x63, 0x65, 0x36, 0x66, 0x22, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0x92,
	0x41, 0x27, 0x4a, 0x25, 0x22, 0x37, 0x31, 0x33, 0x32, 0x62, 0x30, 0x30, 0x34, 0x2d, 0x36, 0x31,
	0x65, 0x38, 0x2d, 0x34, 0x39, 0x63, 0x31, 0x2d, 0x38, 0x64, 0x63, 0x38, 0x2d, 0x34, 0x62, 0x62,
	0x33, 0x32, 0x36, 0x39, 0x63, 0x65, 0x36, 0x66, 0x22, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x5c, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x23, 0x92, 0x41, 0x20, 0x4a, 0x1e, 0x7b, 0x22, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x22, 0x3a, 0x20, 0x22, 0x45, 0x64, 0x64, 0x69, 0x65, 0x20, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x22, 0x7d, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32,
	0x31, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2e, 0x0a,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0f,
	0x92, 0x41, 0x0c, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x4a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x48,
	0x01, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a,
	0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x21,
	0x92, 0x41, 0x1e, 0x3a, 0x04, 0x35, 0x30, 0x30, 0x30, 0x4a, 0x04, 0x35, 0x30, 0x30, 0x30, 0x59,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0xdd, 0x40, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59,
	0x40, 0x48, 0x02, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x3a, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x12, 0x92, 0x41, 0x0f, 0x4a, 0x04, 0x35, 0x30, 0x30, 0x30,
	0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0xdd, 0x40, 0x48, 0x03, 0x52, 0x0b, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x61,
	0x79, 0x22, 0x54, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x44,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8f, 0x02, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x44,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x52, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0x92, 0x41, 0x27, 0x4a, 0x25, 0x22,
	0x37, 0x31, 0x33, 0x32, 0x62, 0x30, 0x30, 0x34, 0x2d, 0x36, 0x31, 0x65, 0x38, 0x2d, 0x34, 0x39,
	0x63, 0x31, 0x2d, 0x38, 0x64, 0x63, 0x38, 0x2d, 0x34, 0x62, 0x62, 0x33, 0x32, 0x36, 0x39, 0x63,
	0x65, 0x36, 0x66, 0x22, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0x92, 0x41, 0x27, 0x4a, 0x25,
	0x22, 0x37, 0x31, 0x33, 0x32, 0x62, 0x30, 0x30, 0x34, 0x2d, 0x36, 0x31, 0x65, 0x38, 0x2d, 0x34,
	0x39, 0x63, 0x31, 0x2d, 0x38, 0x64, 0x63, 0x38, 0x2d, 0x34, 0x62, 0x62, 0x33, 0x32, 0x36, 0x39,
	0x63, 0x65, 0x36, 0x66, 0x22, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x54, 0x0a, 0x0e, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0x92, 0x41, 0x27,
	0x4a, 0x25, 0x22, 0x37, 0x31, 0x33, 0x32, 0x62, 0x30, 0x30, 0x34, 0x2d, 0x36, 0x31, 0x65, 0x38,
	0x2d, 0x34, 0x39, 0x63, 0x31, 0x2d, 0x38, 0x64, 0x63, 0x38, 0x2d, 0x34, 0x62, 0x62, 0x33, 0x32,
	0x36, 0x39, 0x63, 0x65, 0x36, 0x66, 0x22, 0xe0, 0x41, 0x02, 0x52, 0x0d, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x51, 0x0a, 0x16, 0x47, 0x65, 0x74,
	0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e,
	0x76, 0x32, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xca, 0x02, 0x0a,
	0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x0d, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x2d, 0x92, 0x41, 0x27, 0x4a, 0x25, 0x22, 0x37, 0x31, 0x33, 0x32, 0x62, 0x30, 0x30, 0x34,
	0x2d, 0x36, 0x31, 0x65, 0x38, 0x2d, 0x34, 0x39, 0x63, 0x31, 0x2d, 0x38, 0x64, 0x63, 0x38, 0x2d,
	0x34, 0x62, 0x62, 0x33, 0x32, 0x36, 0x39, 0x63, 0x65, 0x36, 0x66, 0x22, 0xe0, 0x41, 0x02, 0x52,
	0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x4c, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x2d, 0x92, 0x41, 0x27, 0x4a, 0x25, 0x22, 0x37, 0x31, 0x33, 0x32, 0x62, 0x30, 0x30,
	0x34, 0x2d, 0x36, 0x31, 0x65, 0x38, 0x2d, 0x34, 0x39, 0x63, 0x31, 0x2d, 0x38, 0x64, 0x63, 0x38,
	0x2d, 0x34, 0x62, 0x62, 0x33, 0x32, 0x36, 0x39, 0x63, 0x65, 0x36, 0x66, 0x22, 0xe0, 0x41, 0x02,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x54, 0x0a, 0x0e, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x2d, 0x92, 0x41, 0x27, 0x4a, 0x25, 0x22, 0x37, 0x31, 0x33, 0x32, 0x62,
	0x30, 0x30, 0x34, 0x2d, 0x36, 0x31, 0x65, 0x38, 0x2d, 0x34, 0x39, 0x63, 0x31, 0x2d, 0x38, 0x64,
	0x63, 0x38, 0x2d, 0x34, 0x62, 0x62, 0x33, 0x32, 0x36, 0x39, 0x63, 0x65, 0x36, 0x66, 0x22, 0xe0,
	0x41, 0x02, 0x52, 0x0d, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x2c, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x11, 0x92, 0x41, 0x0e, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x4a, 0x05, 0x66, 0x61,
	0x6c, 0x73, 0x65, 0x48, 0x00, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x88, 0x01, 0x01, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x22, 0x53, 0x0a, 0x19, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x11, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x09, 0x92, 0x41, 0x06, 0x4a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x10, 0x62, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0xfe,
	0x05, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x0d, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x2d, 0x92, 0x41, 0x27, 0x4a, 0x25, 0x22, 0x37, 0x31, 0x33, 0x32, 0x62, 0x30,
	0x30, 0x34, 0x2d, 0x36, 0x31, 0x65, 0x38, 0x2d, 0x34, 0x39, 0x63, 0x31, 0x2d, 0x38, 0x64, 0x63,
	0x38, 0x2d, 0x34, 0x62, 0x62, 0x33, 0x32, 0x36, 0x39, 0x63, 0x65, 0x36, 0x66, 0x22, 0xe0, 0x41,
	0x02, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x4c, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x2d, 0x92, 0x41, 0x27, 0x4a, 0x25, 0x22, 0x37, 0x31, 0x33, 0x32, 0x62,
	0x30, 0x30, 0x34, 0x2d, 0x36, 0x31, 0x65, 0x38, 0x2d, 0x34, 0x39, 0x63, 0x31, 0x2d, 0x38, 0x64,
	0x63, 0x38, 0x2d, 0x34, 0x62, 0x62, 0x33, 0x32, 0x36, 0x39, 0x63, 0x65, 0x36, 0x66, 0x22, 0xe0,
	0x41, 0x02, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x54, 0x0a,
	0x0e, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0x92, 0x41, 0x27, 0x4a, 0x25, 0x22, 0x37, 0x31, 0x33,
	0x32, 0x62, 0x30, 0x30, 0x34, 0x2d, 0x36, 0x31, 0x65, 0x38, 0x2d, 0x34, 0x39, 0x63, 0x31, 0x2d,
	0x38, 0x64, 0x63, 0x38, 0x2d, 0x34, 0x62, 0x62, 0x33, 0x32, 0x36, 0x39, 0x63, 0x65, 0x36, 0x66,
	0x22, 0xe0, 0x41, 0x02, 0x52, 0x0d, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x65, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61,
	0x73, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x4d, 0x61, 0x73, 0x6b, 0x42, 0x28, 0x92, 0x41, 0x22, 0x4a, 0x20, 0x22, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2c, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x72, 0x74,
	0x6d, 0x70, 0x50, 0x75, 0x73, 0x68, 0x2e, 0x75, 0x72, 0x6c, 0x22, 0xe0, 0x41, 0x02, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x5c, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x23, 0x92, 0x41, 0x20, 0x4a, 0x1e, 0x7b, 0x22, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x22, 0x3a, 0x20, 0x22, 0x45, 0x64, 0x64, 0x69, 0x65, 0x20,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x22, 0x7d, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x69, 0x76, 0x65,
	0x2e, 0x76, 0x32, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x01, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0f, 0x92, 0x41, 0x0c, 0x3a, 0x04, 0x74, 0x72, 0x75,
	0x65, 0x4a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x48, 0x02, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1b, 0x92, 0x41, 0x18, 0x4a, 0x04, 0x35, 0x30, 0x30,
	0x30, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0xdd, 0x40, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x59, 0x40, 0x48, 0x03, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x3a, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x61,
	0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x12, 0x92, 0x41, 0x0f, 0x4a, 0x04, 0x35, 0x30,
	0x30, 0x30, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0xdd, 0x40, 0x48, 0x04, 0x52, 0x0b, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x22,
	0x8c, 0x01, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x44, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x11, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x09, 0x92, 0x41, 0x06, 0x4a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x10, 0x62, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0xd1,
	0x02, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0x92,
	0x41, 0x27, 0x4a, 0x25, 0x22, 0x37, 0x31, 0x33, 0x32, 0x62, 0x30, 0x30, 0x34, 0x2d, 0x36, 0x31,
	0x65, 0x38, 0x2d, 0x34, 0x39, 0x63, 0x31, 0x2d, 0x38, 0x64, 0x63, 0x38, 0x2d, 0x34, 0x62, 0x62,
	0x33, 0x32, 0x36, 0x39, 0x63, 0x65, 0x36, 0x66, 0x22, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x5c, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x23, 0x92, 0x41, 0x20, 0x4a, 0x1e, 0x7b, 0x22, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x22, 0x3a, 0x20, 0x22, 0x45, 0x64, 0x64, 0x69, 0x65, 0x20,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x22, 0x7d, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6c, 0x69, 0x76, 0x65,
	0x2e, 0x76, 0x32, 0x31, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x37, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x50, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x01, 0x52, 0x07, 0x70,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x22, 0x40, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6c, 0x69, 0x76,
	0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x22, 0xed, 0x01, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x0d,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x2d, 0x92, 0x41, 0x27, 0x4a, 0x25, 0x22, 0x37, 0x31, 0x33, 0x32, 0x62,
	0x30, 0x30, 0x34, 0x2d, 0x36, 0x31, 0x65, 0x38, 0x2d, 0x34, 0x39, 0x63, 0x31, 0x2d, 0x38, 0x64,
	0x63, 0x38, 0x2d, 0x34, 0x62, 0x62, 0x33, 0x32, 0x36, 0x39, 0x63, 0x65, 0x36, 0x66, 0x22, 0xe0,
	0x41, 0x02, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x4a, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x2d, 0x92, 0x41, 0x27, 0x4a, 0x25, 0x22, 0x37, 0x31, 0x33, 0x32, 0x62,
	0x30, 0x30, 0x34, 0x2d, 0x36, 0x31, 0x65, 0x38, 0x2d, 0x34, 0x39, 0x63, 0x31, 0x2d, 0x38, 0x64,
	0x63, 0x38, 0x2d, 0x34, 0x62, 0x62, 0x33, 0x32, 0x36, 0x39, 0x63, 0x65, 0x36, 0x66, 0x22, 0xe0,
	0x41, 0x02, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x05,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x11, 0x92, 0x41, 0x0e,
	0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x4a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x48, 0x00,
	0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x66,
	0x6f, 0x72, 0x63, 0x65, 0x22, 0x74, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x13,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x2c, 0x92, 0x41, 0x29, 0x4a, 0x27,
	0x5b, 0x22, 0x37, 0x31, 0x33, 0x32, 0x62, 0x30, 0x30, 0x34, 0x2d, 0x36, 0x31, 0x65, 0x38, 0x2d,
	0x34, 0x39, 0x63, 0x31, 0x2d, 0x38, 0x64, 0x63, 0x38, 0x2d, 0x34, 0x62, 0x62, 0x33, 0x32, 0x36,
	0x39, 0x63, 0x65, 0x36, 0x66, 0x22, 0x5d, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0xcd, 0x02, 0x0a, 0x19, 0x41,
	0x64, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x6f, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x2d, 0x92, 0x41, 0x27, 0x4a, 0x25, 0x22, 0x37, 0x31, 0x33, 0x32, 0x62, 0x30, 0x30, 0x34, 0x2d,
	0x36, 0x31, 0x65, 0x38, 0x2d, 0x34, 0x39, 0x63, 0x31, 0x2d, 0x38, 0x64, 0x63, 0x38, 0x2d, 0x34,
	0x62, 0x62, 0x33, 0x32, 0x36, 0x39, 0x63, 0x65, 0x36, 0x66, 0x22, 0xe0, 0x41, 0x02, 0x52, 0x0c,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x2d, 0x92, 0x41, 0x27, 0x4a, 0x25, 0x22, 0x37, 0x31, 0x33, 0x32, 0x62, 0x30, 0x30, 0x34,
	0x2d, 0x36, 0x31, 0x65, 0x38, 0x2d, 0x34, 0x39, 0x63, 0x31, 0x2d, 0x38, 0x64, 0x63, 0x38, 0x2d,
	0x34, 0x62, 0x62, 0x33, 0x32, 0x36, 0x39, 0x63, 0x65, 0x36, 0x66, 0x22, 0xe0, 0x41, 0x02, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x09, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0x92,
	0x41, 0x27, 0x4a, 0x25, 0x22, 0x37, 0x31, 0x33, 0x32, 0x62, 0x30, 0x30, 0x34, 0x2d, 0x36, 0x31,
	0x65, 0x38, 0x2d, 0x34, 0x39, 0x63, 0x31, 0x2d, 0x38, 0x64, 0x63, 0x38, 0x2d, 0x34, 0x62, 0x62,
	0x33, 0x32, 0x36, 0x39, 0x63, 0x65, 0x36, 0x66, 0x22, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76,
	0x32, 0x31, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x48, 0x00, 0x52, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x22, 0x81, 0x01, 0x0a, 0x1a, 0x41,
	0x64, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x6f, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6c, 0x69, 0x76,
	0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x36, 0x0a, 0x11, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x09, 0x92, 0x41, 0x06, 0x4a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x10, 0x62, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0xa1,
	0x03, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49,
	0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x52, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0x92, 0x41, 0x27, 0x4a, 0x25, 0x22, 0x37, 0x31,
	0x33, 0x32, 0x62, 0x30, 0x30, 0x34, 0x2d, 0x36, 0x31, 0x65, 0x38, 0x2d, 0x34, 0x39, 0x63, 0x31,
	0x2d, 0x38, 0x64, 0x63, 0x38, 0x2d, 0x34, 0x62, 0x62, 0x33, 0x32, 0x36, 0x39, 0x63, 0x65, 0x36,
	0x66, 0x22, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0x92, 0x41, 0x27, 0x4a, 0x25, 0x22, 0x37,
	0x31, 0x33, 0x32, 0x62, 0x30, 0x30, 0x34, 0x2d, 0x36, 0x31, 0x65, 0x38, 0x2d, 0x34, 0x39, 0x63,
	0x31, 0x2d, 0x38, 0x64, 0x63, 0x38, 0x2d, 0x34, 0x62, 0x62, 0x33, 0x32, 0x36, 0x39, 0x63, 0x65,
	0x36, 0x66, 0x22, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x4a, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0x92, 0x41, 0x27, 0x4a, 0x25, 0x22, 0x37, 0x31, 0x33, 0x32,
	0x62, 0x30, 0x30, 0x34, 0x2d, 0x36, 0x31, 0x65, 0x38, 0x2d, 0x34, 0x39, 0x63, 0x31, 0x2d, 0x38,
	0x64, 0x63, 0x38, 0x2d, 0x34, 0x62, 0x62, 0x33, 0x32, 0x36, 0x39, 0x63, 0x65, 0x36, 0x66, 0x22,
	0xe0, 0x41, 0x02, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x4f, 0x0a,
	0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x12,
	0x92, 0x41, 0x0c, 0x4a, 0x0a, 0x22, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xe0,
	0x41, 0x02, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x36,
	0x0a, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x48, 0x00, 0x52, 0x07, 0x74, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x22, 0x4c, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x22, 0xb2, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0x92, 0x41,
	0x27, 0x4a, 0x25, 0x22, 0x37, 0x31, 0x33, 0x32, 0x62, 0x30, 0x30, 0x34, 0x2d, 0x36, 0x31, 0x65,
	0x38, 0x2d, 0x34, 0x39, 0x63, 0x31, 0x2d, 0x38, 0x64, 0x63, 0x38, 0x2d, 0x34, 0x62, 0x62, 0x33,
	0x32, 0x36, 0x39, 0x63, 0x65, 0x36, 0x66, 0x22, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x09, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0x92, 0x41,
	0x27, 0x4a, 0x25, 0x22, 0x37, 0x31, 0x33, 0x32, 0x62, 0x30, 0x30, 0x34, 0x2d, 0x36, 0x31, 0x65,
	0x38, 0x2d, 0x34, 0x39, 0x63, 0x31, 0x2d, 0x38, 0x64, 0x63, 0x38, 0x2d, 0x34, 0x62, 0x62, 0x33,
	0x32, 0x36, 0x39, 0x63, 0x65, 0x36, 0x66, 0x22, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x49, 0x64, 0x22, 0x3d, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6c, 0x69, 0x76,
	0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x22, 0x67, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x0d, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x2d, 0x92, 0x41, 0x27, 0x4a, 0x25, 0x22, 0x37, 0x31, 0x33, 0x32, 0x62, 0x30, 0x30, 0x34,
	0x2d, 0x36, 0x31, 0x65, 0x38, 0x2d, 0x34, 0x39, 0x63, 0x31, 0x2d, 0x38, 0x64, 0x63, 0x38, 0x2d,
	0x34, 0x62, 0x62, 0x33, 0x32, 0x36, 0x39, 0x63, 0x65, 0x36, 0x66, 0x22, 0xe0, 0x41, 0x02, 0x52,
	0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x40, 0x0a,
	0x12, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x22,
	0xfa, 0x03, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d,
	0x92, 0x41, 0x27, 0x4a, 0x25, 0x22, 0x37, 0x31, 0x33, 0x32, 0x62, 0x30, 0x30, 0x34, 0x2d, 0x36,
	0x31, 0x65, 0x38, 0x2d, 0x34, 0x39, 0x63, 0x31, 0x2d, 0x38, 0x64, 0x63, 0x38, 0x2d, 0x34, 0x62,
	0x62, 0x33, 0x32, 0x36, 0x39, 0x63, 0x65, 0x36, 0x66, 0x22, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x09, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d,
	0x92, 0x41, 0x27, 0x4a, 0x25, 0x22, 0x37, 0x31, 0x33, 0x32, 0x62, 0x30, 0x30, 0x34, 0x2d, 0x36,
	0x31, 0x65, 0x38, 0x2d, 0x34, 0x39, 0x63, 0x31, 0x2d, 0x38, 0x64, 0x63, 0x38, 0x2d, 0x34, 0x62,
	0x62, 0x33, 0x32, 0x36, 0x39, 0x63, 0x65, 0x36, 0x66, 0x22, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x4f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x12, 0x92, 0x41, 0x0c, 0x4a, 0x0a, 0x22,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x5c, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x23, 0x92, 0x41, 0x20, 0x4a, 0x1e, 0x7b, 0x22, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x22, 0x3a, 0x20, 0x22, 0x45, 0x64, 0x64, 0x69, 0x65, 0x20, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x22, 0x7d, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76,
	0x32, 0x31, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x48, 0x01, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x37,
	0x0a, 0x07, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x02, 0x52, 0x07, 0x70, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x22, 0x78, 0x0a, 0x14,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x36,
	0x0a, 0x11, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x09, 0x92, 0x41, 0x06, 0x4a, 0x04,
	0x74, 0x72, 0x75, 0x65, 0x52, 0x10, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0xc6, 0x02, 0x0a, 0x1e, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x0d, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x2d, 0x92, 0x41, 0x27, 0x4a, 0x25, 0x22, 0x37, 0x31, 0x33, 0x32, 0x62, 0x30, 0x30, 0x34,
	0x2d, 0x36, 0x31, 0x65, 0x38, 0x2d, 0x34, 0x39, 0x63, 0x31, 0x2d, 0x38, 0x64, 0x63, 0x38, 0x2d,
	0x34, 0x62, 0x62, 0x33, 0x32, 0x36, 0x39, 0x63, 0x65, 0x36, 0x66, 0x22, 0xe0, 0x41, 0x02, 0x52,
	0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x4c, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x2d, 0x92, 0x41, 0x27, 0x4a, 0x25, 0x22, 0x37, 0x31, 0x33, 0x32, 0x62, 0x30, 0x30,
	0x34, 0x2d, 0x36, 0x31, 0x65, 0x38, 0x2d, 0x34, 0x39, 0x63, 0x31, 0x2d, 0x38, 0x64, 0x63, 0x38,
	0x2d, 0x34, 0x62, 0x62, 0x33, 0x32, 0x36, 0x39, 0x63, 0x65, 0x36, 0x66, 0x22, 0xe0, 0x41, 0x02,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x09, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d,
	0x92, 0x41, 0x27, 0x4a, 0x25, 0x22, 0x37, 0x31, 0x33, 0x32, 0x62, 0x30, 0x30, 0x34, 0x2d, 0x36,
	0x31, 0x65, 0x38, 0x2d, 0x34, 0x39, 0x63, 0x31, 0x2d, 0x38, 0x64, 0x63, 0x38, 0x2d, 0x34, 0x62,
	0x62, 0x33, 0x32, 0x36, 0x39, 0x63, 0x65, 0x36, 0x66, 0x22, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x3a, 0x05, 0x66, 0x61, 0x6c,
	0x73, 0x65, 0x4a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x48, 0x00, 0x52, 0x05, 0x66, 0x6f, 0x72,
	0x63, 0x65, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x22,
	0x86, 0x01, 0x0a, 0x1f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x46, 0x72, 0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x36, 0x0a, 0x11, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x09, 0x92, 0x41, 0x06,
	0x4a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x10, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0xf3, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0x92, 0x41,
	0x27, 0x4a, 0x25, 0x22, 0x37, 0x31, 0x33, 0x32, 0x62, 0x30, 0x30, 0x34, 0x2d, 0x36, 0x31, 0x65,
	0x38, 0x2d, 0x34, 0x39, 0x63, 0x31, 0x2d, 0x38, 0x64, 0x63, 0x38, 0x2d, 0x34, 0x62, 0x62, 0x33,
	0x32, 0x36, 0x39, 0x63, 0x65, 0x36, 0x66, 0x22, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x09, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0x92, 0x41,
	0x27, 0x4a, 0x25, 0x22, 0x37, 0x31, 0x33, 0x32, 0x62, 0x30, 0x30, 0x34, 0x2d, 0x36, 0x31, 0x65,
	0x38, 0x2d, 0x34, 0x39, 0x63, 0x31, 0x2d, 0x38, 0x64, 0x63, 0x38, 0x2d, 0x34, 0x62, 0x62, 0x33,
	0x32, 0x36, 0x39, 0x63, 0x65, 0x36, 0x66, 0x22, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x37,
	0x0a, 0x19, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x6c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d,
	0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d,
	0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x22, 0xc3, 0x02, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x55, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0x92,
	0x41, 0x27, 0x4a, 0x25, 0x22, 0x37, 0x31, 0x33, 0x32, 0x62, 0x30, 0x30, 0x34, 0x2d, 0x36, 0x31,
	0x65, 0x38, 0x2d, 0x34, 0x39, 0x63, 0x31, 0x2d, 0x38, 0x64, 0x63, 0x38, 0x2d, 0x34, 0x62, 0x62,
	0x33, 0x32, 0x36, 0x39, 0x63, 0x65, 0x36, 0x66, 0x22, 0xe0, 0x41, 0x02, 0x52, 0x0d, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0c, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0e, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x52, 0x6f, 0x6c,
	0x65, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x4a, 0x0c, 0x22, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x4f, 0x57,
	0x4e, 0x45, 0x52, 0x22, 0x48, 0x01, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x41, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x19, 0x92, 0x41, 0x16, 0x3a, 0x09, 0x31, 0x37, 0x32, 0x38,
	0x30, 0x30, 0x30, 0x30, 0x30, 0x4a, 0x09, 0x31, 0x37, 0x32, 0x38, 0x30, 0x30, 0x30, 0x30, 0x30,
	0x48, 0x02, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x6a, 0x0a,
	0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0c, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x2a, 0x92, 0x41, 0x27, 0x4a, 0x25, 0x22, 0x37, 0x31, 0x33, 0x32, 0x62, 0x30, 0x30, 0x34,
	0x2d, 0x36, 0x31, 0x65, 0x38, 0x2d, 0x34, 0x39, 0x63, 0x31, 0x2d, 0x38, 0x64, 0x63, 0x38, 0x2d,
	0x34, 0x62, 0x62, 0x33, 0x32, 0x36, 0x39, 0x63, 0x65, 0x36, 0x66, 0x22, 0x52, 0x0b, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x58, 0x0a, 0x16, 0x4c, 0x6f, 0x6f,
	0x6b, 0x75, 0x70, 0x47, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x2a, 0x92, 0x41, 0x27, 0x4a, 0x25, 0x22, 0x37, 0x31, 0x33, 0x32, 0x62, 0x30, 0x30,
	0x34, 0x2d, 0x36, 0x31, 0x65, 0x38, 0x2d, 0x34, 0x39, 0x63, 0x31, 0x2d, 0x38, 0x64, 0x63, 0x38,
	0x2d, 0x34, 0x62, 0x62, 0x33, 0x32, 0x36, 0x39, 0x63, 0x65, 0x36, 0x66, 0x22, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x22, 0x75, 0x0a, 0x17, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x47, 0x75, 0x65,
	0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a,
	0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x48, 0x92, 0x41, 0x45,
	0x4a, 0x43, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x5c, 0x2f, 0x5c, 0x2f, 0x72, 0x61, 0x69,
	0x6e, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x2e, 0x67, 0x67, 0x2f, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61,
	0x79, 0x2f, 0x65, 0x36, 0x37, 0x63, 0x66, 0x64, 0x36, 0x61, 0x64, 0x35, 0x37, 0x35, 0x36, 0x30,
	0x39, 0x36, 0x32, 0x66, 0x64, 0x64, 0x63, 0x66, 0x36, 0x33, 0x36, 0x31, 0x31, 0x64, 0x32, 0x38,
	0x33, 0x34, 0x2f, 0x31, 0x22, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0xc0, 0x01, 0x0a, 0x16, 0x47,
	0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x12, 0x39, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0x92, 0x41, 0x10,
	0x4a, 0x0e, 0x22, 0x45, 0x64, 0x64, 0x79, 0x20, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x22,
	0xe0, 0x41, 0x02, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x57, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x92, 0x41, 0x27, 0x4a, 0x25,
	0x22, 0x37, 0x31, 0x33, 0x32, 0x62, 0x30, 0x30, 0x34, 0x2d, 0x36, 0x31, 0x65, 0x38, 0x2d, 0x34,
	0x39, 0x63, 0x31, 0x2d, 0x38, 0x64, 0x63, 0x38, 0x2d, 0x34, 0x62, 0x62, 0x33, 0x32, 0x36, 0x39,
	0x63, 0x65, 0x36, 0x66, 0x22, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22, 0x68, 0x0a,
	0x18, 0x47, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3b, 0x0a, 0x0c, 0x6d, 0x61, 0x78,
	0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x13, 0x92, 0x41, 0x10, 0x3a, 0x06, 0x33, 0x30, 0x30, 0x30, 0x30, 0x30, 0x4a, 0x06, 0x33, 0x30,
	0x30, 0x30, 0x30, 0x30, 0x48, 0x00, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x98, 0x01, 0x0a, 0x10, 0x47, 0x75, 0x65, 0x73,
	0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x3a, 0x0a, 0x06,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6c,
	0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x47, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x48, 0x00,
	0x52, 0x06, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x12, 0x40, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6c, 0x69, 0x76,
	0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x47, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00,
	0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x22, 0x91, 0x03, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x75, 0x65,
	0x73, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0x92, 0x41, 0x27,
	0x4a, 0x25, 0x22, 0x37, 0x31, 0x33, 0x32, 0x62, 0x30, 0x30, 0x34, 0x2d, 0x36, 0x31, 0x65, 0x38,
	0x2d, 0x34, 0x39, 0x63, 0x31, 0x2d, 0x38, 0x64, 0x63, 0x38, 0x2d, 0x34, 0x62, 0x62, 0x33, 0x32,
	0x36, 0x39, 0x63, 0x65, 0x36, 0x66, 0x22, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0x92, 0x41,
	0x27, 0x4a, 0x25, 0x22, 0x37, 0x31, 0x33, 0x32, 0x62, 0x30, 0x30, 0x34, 0x2d, 0x36, 0x31, 0x65,
	0x38, 0x2d, 0x34, 0x39, 0x63, 0x31, 0x2d, 0x38, 0x64, 0x63, 0x38, 0x2d, 0x34, 0x62, 0x62, 0x33,
	0x32, 0x36, 0x39, 0x63, 0x65, 0x36, 0x66, 0x22, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x19, 0x92, 0x41,
	0x16, 0x3a, 0x09, 0x31, 0x37, 0x32, 0x38, 0x30, 0x30, 0x30, 0x30, 0x30, 0x4a, 0x09, 0x31, 0x37,
	0x32, 0x38, 0x30, 0x30, 0x30, 0x30, 0x30, 0x48, 0x00, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x04, 0x72, 0x6f, 0x6c,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76,
	0x32, 0x31, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x42, 0x14, 0x92, 0x41, 0x0e, 0x4a, 0x0c, 0x22, 0x52,
	0x4f, 0x4c, 0x45, 0x5f, 0x47, 0x55, 0x45, 0x53, 0x54, 0x22, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x72,
	0x6f, 0x6c, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x47, 0x75,
	0x65, 0x73, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d,
	0x61, 0x78, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x04, 0x08, 0x06, 0x10,
	0x07, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x8e, 0x01, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x47, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0c, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x2a, 0x92, 0x41, 0x27, 0x4a, 0x25, 0x22, 0x37, 0x31, 0x33, 0x32, 0x62, 0x30, 0x30, 0x34, 0x2d,
	0x36, 0x31, 0x65, 0x38, 0x2d, 0x34, 0x39, 0x63, 0x31, 0x2d, 0x38, 0x64, 0x63, 0x38, 0x2d, 0x34,
	0x62, 0x62, 0x33, 0x32, 0x36, 0x39, 0x63, 0x65, 0x36, 0x66, 0x22, 0x52, 0x0b, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x15, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x42,
	0x06, 0x0a, 0x04, 0x5f, 0x75, 0x72, 0x6c, 0x22, 0xfd, 0x01, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x57, 0x65, 0x62, 0x52, 0x74, 0x63, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x0d, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x2d, 0x92, 0x41, 0x27, 0x4a, 0x25, 0x22, 0x37, 0x31, 0x33, 0x32, 0x62, 0x30, 0x30,
	0x34, 0x2d, 0x36, 0x31, 0x65, 0x38, 0x2d, 0x34, 0x39, 0x63, 0x31, 0x2d, 0x38, 0x64, 0x63, 0x38,
	0x2d, 0x34, 0x62, 0x62, 0x33, 0x32, 0x36, 0x39, 0x63, 0x65, 0x36, 0x66, 0x22, 0xe0, 0x41, 0x02,
	0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x4c,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x2d, 0x92, 0x41, 0x27, 0x4a, 0x25, 0x22, 0x37, 0x31, 0x33, 0x32, 0x62, 0x30,
	0x30, 0x34, 0x2d, 0x36, 0x31, 0x65, 0x38, 0x2d, 0x34, 0x39, 0x63, 0x31, 0x2d, 0x38, 0x64, 0x63,
	0x38, 0x2d, 0x34, 0x62, 0x62, 0x33, 0x32, 0x36, 0x39, 0x63, 0x65, 0x36, 0x66, 0x22, 0xe0, 0x41,
	0x02, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0c,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x16, 0x92, 0x41, 0x10, 0x4a, 0x0e, 0x22, 0x45, 0x64, 0x64, 0x79, 0x20, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x22, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x5e, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x57, 0x65, 0x62, 0x52, 0x74, 0x63, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0d, 0x77, 0x65,
	0x62, 0x72, 0x74, 0x63, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x57, 0x65, 0x62,
	0x52, 0x74, 0x63, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x0c, 0x77, 0x65, 0x62, 0x72, 0x74,
	0x63, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x1b, 0x0a, 0x19, 0x52, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x1c, 0x0a, 0x1a, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x4d, 0x0a, 0x18, 0x47, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x22, 0x1b, 0x0a, 0x19, 0x47, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc4,
	0x04, 0x0a, 0x0f, 0x49, 0x73, 0x73, 0x75, 0x65, 0x64, 0x47, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x52, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0x92, 0x41, 0x27, 0x4a, 0x25,
	0x22, 0x37, 0x31, 0x33, 0x32, 0x62, 0x30, 0x30, 0x34, 0x2d, 0x36, 0x31, 0x65, 0x38, 0x2d, 0x34,
	0x39, 0x63, 0x31, 0x2d, 0x38, 0x64, 0x63, 0x38, 0x2d, 0x34, 0x62, 0x62, 0x33, 0x32, 0x36, 0x39,
	0x63, 0x65, 0x36, 0x66, 0x22, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0x92, 0x41, 0x27, 0x4a,
	0x25, 0x22, 0x37, 0x31, 0x33, 0x32, 0x62, 0x30, 0x30, 0x34, 0x2d, 0x36, 0x31, 0x65, 0x38, 0x2d,
	0x34, 0x39, 0x63, 0x31, 0x2d, 0x38, 0x64, 0x63, 0x38, 0x2d, 0x34, 0x62, 0x62, 0x33, 0x32, 0x36,
	0x39, 0x63, 0x65, 0x36, 0x66, 0x22, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x19, 0x92, 0x41, 0x16, 0x3a,
	0x09, 0x31, 0x37, 0x32, 0x38, 0x30, 0x30, 0x30, 0x30, 0x30, 0x4a, 0x09, 0x31, 0x37, 0x32, 0x38,
	0x30, 0x30, 0x30, 0x30, 0x30, 0x48, 0x00, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31,
	0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x42, 0x14, 0x92, 0x41, 0x0e, 0x4a, 0x0c, 0x22, 0x52, 0x4f, 0x4c,
	0x45, 0x5f, 0x47, 0x55, 0x45, 0x53, 0x54, 0x22, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x72, 0x6f, 0x6c,
	0x65, 0x12, 0x35, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x47, 0x75, 0x65, 0x73,
	0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x6a, 0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4b, 0x92, 0x41,
	0x48, 0x4a, 0x46, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x5c, 0x2f, 0x5c, 0x2f, 0x72, 0x61,
	0x69, 0x6e, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x2e, 0x67, 0x67, 0x5c, 0x2f, 0x6f, 0x76, 0x65, 0x72,
	0x6c, 0x61, 0x79, 0x5c, 0x2f, 0x65, 0x36, 0x37, 0x63, 0x66, 0x64, 0x36, 0x61, 0x64, 0x35, 0x37,
	0x35, 0x36, 0x30, 0x39, 0x36, 0x32, 0x66, 0x64, 0x64, 0x63, 0x66, 0x36, 0x33, 0x36, 0x31, 0x31,
	0x64, 0x32, 0x38, 0x33, 0x34, 0x5c, 0x2f, 0x31, 0x22, 0x52, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x55, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x09, 0xe0, 0x41, 0x05, 0x82, 0xb5, 0x18, 0x02, 0x10, 0x01, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe0, 0x41, 0x05, 0xe0, 0x41, 0x03, 0x52, 0x07, 0x6c,
	0x69, 0x6e, 0x6b, 0x55, 0x72, 0x6c, 0x3a, 0x08, 0x82, 0xb5, 0x18, 0x04, 0x08, 0x01, 0x38, 0x01,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4a, 0x04, 0x08, 0x0a, 0x10, 0x0b, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xf2, 0x03, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x47, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x52, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0x92, 0x41, 0x27, 0x4a, 0x25, 0x22, 0x37,
	0x31, 0x33, 0x32, 0x62, 0x30, 0x30, 0x34, 0x2d, 0x36, 0x31, 0x65, 0x38, 0x2d, 0x34, 0x39, 0x63,
	0x31, 0x2d, 0x38, 0x64, 0x63, 0x38, 0x2d, 0x34, 0x62, 0x62, 0x33, 0x32, 0x36, 0x39, 0x63, 0x65,
	0x36, 0x66, 0x22, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0x92, 0x41, 0x27, 0x4a, 0x25, 0x22,
	0x37, 0x31, 0x33, 0x32, 0x62, 0x30, 0x30, 0x34, 0x2d, 0x36, 0x31, 0x65, 0x38, 0x2d, 0x34, 0x39,
	0x63, 0x31, 0x2d, 0x38, 0x64, 0x63, 0x38, 0x2d, 0x34, 0x62, 0x62, 0x33, 0x32, 0x36, 0x39, 0x63,
	0x65, 0x36, 0x66, 0x22, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x19, 0x92, 0x41, 0x16, 0x3a, 0x09, 0x31,
	0x37, 0x32, 0x38, 0x30, 0x30, 0x30, 0x30, 0x30, 0x4a, 0x09, 0x31, 0x37, 0x32, 0x38, 0x30, 0x30,
	0x30, 0x30, 0x30, 0x48, 0x00, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x52,
	0x6f, 0x6c, 0x65, 0x42, 0x14, 0x92, 0x41, 0x0e, 0x4a, 0x0c, 0x22, 0x52, 0x4f, 0x4c, 0x45, 0x5f,
	0x47, 0x55, 0x45, 0x53, 0x54, 0x22, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12,
	0x35, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x47, 0x75, 0x65, 0x73, 0x74, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x71, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x5f, 0x92, 0x41, 0x48, 0x4a, 0x46, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73,
	0x3a, 0x5c, 0x2f, 0x5c, 0x2f, 0x72, 0x61, 0x69, 0x6e, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x2e, 0x67,
	0x67, 0x5c, 0x2f, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x5c, 0x2f, 0x65, 0x36, 0x37, 0x63,
	0x66, 0x64, 0x36, 0x61, 0x64, 0x35, 0x37, 0x35, 0x36, 0x30, 0x39, 0x36, 0x32, 0x66, 0x64, 0x64,
	0x63, 0x66, 0x36, 0x33, 0x36, 0x31, 0x31, 0x64, 0x32, 0x38, 0x33, 0x34, 0x5c, 0x2f, 0x31, 0x22,
	0x82, 0xb5, 0x18, 0x10, 0x5a, 0x0e, 0x27, 0x68, 0x74, 0x74, 0x70, 0x27, 0x2c, 0x27, 0x68, 0x74,
	0x74, 0x70, 0x73, 0x27, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x61,
	0x78, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x53, 0x0a, 0x17, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x47, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x67, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x69, 0x76, 0x65,
	0x2e, 0x76, 0x32, 0x31, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x64, 0x47, 0x75, 0x65, 0x73, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x67, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0x34, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x47, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xe0, 0x41, 0x05, 0x82, 0xb5, 0x18, 0x02, 0x10, 0x01, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x50, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x47, 0x75, 0x65, 0x73,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a,
	0x0a, 0x67, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x64, 0x47, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x67, 0x75,
	0x65, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x8f, 0x02, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x47,
	0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x54, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x92, 0x41, 0x27, 0x4a, 0x25, 0x22, 0x37,
	0x31, 0x33, 0x32, 0x62, 0x30, 0x30, 0x34, 0x2d, 0x36, 0x31, 0x65, 0x38, 0x2d, 0x34, 0x39, 0x63,
	0x31, 0x2d, 0x38, 0x64, 0x63, 0x38, 0x2d, 0x34, 0x62, 0x62, 0x33, 0x32, 0x36, 0x39, 0x63, 0x65,
	0x36, 0x66, 0x22, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x4e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x92, 0x41, 0x27, 0x4a,
	0x25, 0x22, 0x37, 0x31, 0x33, 0x32, 0x62, 0x30, 0x30, 0x34, 0x2d, 0x36, 0x31, 0x65, 0x38, 0x2d,
	0x34, 0x39, 0x63, 0x31, 0x2d, 0x38, 0x64, 0x63, 0x38, 0x2d, 0x34, 0x62, 0x62, 0x33, 0x32, 0x36,
	0x39, 0x63, 0x65, 0x36, 0x66, 0x22, 0x48, 0x01, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e,
	0x52, 0x6f, 0x6c, 0x65, 0x48, 0x02, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0x53, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x47, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0b, 0x67, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76,
	0x32, 0x31, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x64, 0x47, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x0a, 0x67, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x5b,
	0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0x92, 0x41, 0x27, 0x4a, 0x25, 0x22, 0x37, 0x31,
	0x33, 0x32, 0x62, 0x30, 0x30, 0x34, 0x2d, 0x36, 0x31, 0x65, 0x38, 0x2d, 0x34, 0x39, 0x63, 0x31,
	0x2d, 0x38, 0x64, 0x63, 0x38, 0x2d, 0x34, 0x62, 0x62, 0x33, 0x32, 0x36, 0x39, 0x63, 0x65, 0x36,
	0x66, 0x22, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x19, 0x0a, 0x17, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x70, 0x0a, 0x0a, 0x4a, 0x73, 0x6f, 0x6e, 0x57, 0x65,
	0x62, 0x4b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x6c, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x61, 0x6c, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x74, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x74, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x73, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x69, 0x64, 0x12, 0x0c, 0x0a, 0x01,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x6e, 0x22, 0x19, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4a,
	0x73, 0x6f, 0x6e, 0x57, 0x65, 0x62, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x44, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4a, 0x73, 0x6f, 0x6e, 0x57, 0x65,
	0x62, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x28, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x57, 0x65, 0x62,
	0x4b, 0x65, 0x79, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x22, 0x15, 0x0a, 0x13, 0x47, 0x65, 0x74,
	0x54, 0x65, 0x73, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x39, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xc9, 0x02, 0x0a, 0x16,
	0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x52, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0x92,
	0x41, 0x27, 0x4a, 0x25, 0x22, 0x37, 0x31, 0x33, 0x32, 0x62, 0x30, 0x30, 0x34, 0x2d, 0x36, 0x31,
	0x65, 0x38, 0x2d, 0x34, 0x39, 0x63, 0x31, 0x2d, 0x38, 0x64, 0x63, 0x38, 0x2d, 0x34, 0x62, 0x62,
	0x33, 0x32, 0x36, 0x39, 0x63, 0x65, 0x36, 0x66, 0x22, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d,
	0x92, 0x41, 0x27, 0x4a, 0x25, 0x22, 0x37, 0x31, 0x33, 0x32, 0x62, 0x30, 0x30, 0x34, 0x2d, 0x36,
	0x31, 0x65, 0x38, 0x2d, 0x34, 0x39, 0x63, 0x31, 0x2d, 0x38, 0x64, 0x63, 0x38, 0x2d, 0x34, 0x62,
	0x62, 0x33, 0x32, 0x36, 0x39, 0x63, 0x65, 0x36, 0x66, 0x22, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x54, 0x0a, 0x0e, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x2d, 0x92, 0x41, 0x27, 0x4a, 0x25, 0x22, 0x37, 0x31, 0x33, 0x32, 0x62, 0x30, 0x30, 0x34,
	0x2d, 0x36, 0x31, 0x65, 0x38, 0x2d, 0x34, 0x39, 0x63, 0x31, 0x2d, 0x38, 0x64, 0x63, 0x38, 0x2d,
	0x34, 0x62, 0x62, 0x33, 0x32, 0x36, 0x39, 0x63, 0x65, 0x36, 0x66, 0x22, 0xe0, 0x41, 0x02, 0x52,
	0x0d, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x37,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x44,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x90, 0x02, 0x0a, 0x16, 0x44, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x52, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0x92, 0x41, 0x27, 0x4a, 0x25,
	0x22, 0x37, 0x31, 0x33, 0x32, 0x62, 0x30, 0x30, 0x34, 0x2d, 0x36, 0x31, 0x65, 0x38, 0x2d, 0x34,
	0x39, 0x63, 0x31, 0x2d, 0x38, 0x64, 0x63, 0x38, 0x2d, 0x34, 0x62, 0x62, 0x33, 0x32, 0x36, 0x39,
	0x63, 0x65, 0x36, 0x66, 0x22, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0x92, 0x41, 0x27, 0x4a,
	0x25, 0x22, 0x37, 0x31, 0x33, 0x32, 0x62, 0x30, 0x30, 0x34, 0x2d, 0x36, 0x31, 0x65, 0x38, 0x2d,
	0x34, 0x39, 0x63, 0x31, 0x2d, 0x38, 0x64, 0x63, 0x38, 0x2d, 0x34, 0x62, 0x62, 0x33, 0x32, 0x36,
	0x39, 0x63, 0x65, 0x36, 0x66, 0x22, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x54, 0x0a, 0x0e, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0x92, 0x41,
	0x27, 0x4a, 0x25, 0x22, 0x37, 0x31, 0x33, 0x32, 0x62, 0x30, 0x30, 0x34, 0x2d, 0x36, 0x31, 0x65,
	0x38, 0x2d, 0x34, 0x39, 0x63, 0x31, 0x2d, 0x38, 0x64, 0x63, 0x38, 0x2d, 0x34, 0x62, 0x62, 0x33,
	0x32, 0x36, 0x39, 0x63, 0x65, 0x36, 0x66, 0x22, 0xe0, 0x41, 0x02, 0x52, 0x0d, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xea, 0x02, 0x0a, 0x16, 0x44,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x52, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0x92, 0x41,
	0x27, 0x4a, 0x25, 0x22, 0x37, 0x31, 0x33, 0x32, 0x62, 0x30, 0x30, 0x34, 0x2d, 0x36, 0x31, 0x65,
	0x38, 0x2d, 0x34, 0x39, 0x63, 0x31, 0x2d, 0x38, 0x64, 0x63, 0x38, 0x2d, 0x34, 0x62, 0x62, 0x33,
	0x32, 0x36, 0x39, 0x63, 0x65, 0x36, 0x66, 0x22, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0x92,
	0x41, 0x27, 0x4a, 0x25, 0x22, 0x37, 0x31, 0x33, 0x32, 0x62, 0x30, 0x30, 0x34, 0x2d, 0x36, 0x31,
	0x65, 0x38, 0x2d, 0x34, 0x39, 0x63, 0x31, 0x2d, 0x38, 0x64, 0x63, 0x38, 0x2d, 0x34, 0x62, 0x62,
	0x33, 0x32, 0x36, 0x39, 0x63, 0x65, 0x36, 0x66, 0x22, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x54, 0x0a, 0x0e, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x2d, 0x92, 0x41, 0x27, 0x4a, 0x25, 0x22, 0x37, 0x31, 0x33, 0x32, 0x62, 0x30, 0x30, 0x34, 0x2d,
	0x36, 0x31, 0x65, 0x38, 0x2d, 0x34, 0x39, 0x63, 0x31, 0x2d, 0x38, 0x64, 0x63, 0x38, 0x2d, 0x34,
	0x62, 0x62, 0x33, 0x32, 0x36, 0x39, 0x63, 0x65, 0x36, 0x66, 0x22, 0xe0, 0x41, 0x02, 0x52, 0x0d,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x37,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x44,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xcb, 0x02, 0x0a, 0x15, 0x44, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x52, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0x92, 0x41, 0x27, 0x4a, 0x25, 0x22,
	0x37, 0x31, 0x33, 0x32, 0x62, 0x30, 0x30, 0x34, 0x2d, 0x36, 0x31, 0x65, 0x38, 0x2d, 0x34, 0x39,
	0x63, 0x31, 0x2d, 0x38, 0x64, 0x63, 0x38, 0x2d, 0x34, 0x62, 0x62, 0x33, 0x32, 0x36, 0x39, 0x63,
	0x65, 0x36, 0x66, 0x22, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0x92, 0x41, 0x27, 0x4a, 0x25,
	0x22, 0x37, 0x31, 0x33, 0x32, 0x62, 0x30, 0x30, 0x34, 0x2d, 0x36, 0x31, 0x65, 0x38, 0x2d, 0x34,
	0x39, 0x63, 0x31, 0x2d, 0x38, 0x64, 0x63, 0x38, 0x2d, 0x34, 0x62, 0x62, 0x33, 0x32, 0x36, 0x39,
	0x63, 0x65, 0x36, 0x66, 0x22, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x54, 0x0a, 0x0e, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0x92, 0x41, 0x27,
	0x4a, 0x25, 0x22, 0x37, 0x31, 0x33, 0x32, 0x62, 0x30, 0x30, 0x34, 0x2d, 0x36, 0x31, 0x65, 0x38,
	0x2d, 0x34, 0x39, 0x63, 0x31, 0x2d, 0x38, 0x64, 0x63, 0x38, 0x2d, 0x34, 0x62, 0x62, 0x33, 0x32,
	0x36, 0x39, 0x63, 0x65, 0x36, 0x66, 0x22, 0xe0, 0x41, 0x02, 0x52, 0x0d, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6c, 0x69, 0x76,
	0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x42, 0x06, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xdd, 0x01, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x4f, 0x0a, 0x0d,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x2a, 0x92, 0x41, 0x27, 0x4a, 0x25, 0x22, 0x37, 0x31, 0x33, 0x32, 0x62,
	0x30, 0x30, 0x34, 0x2d, 0x36, 0x31, 0x65, 0x38, 0x2d, 0x34, 0x39, 0x63, 0x31, 0x2d, 0x38, 0x64,
	0x63, 0x38, 0x2d, 0x34, 0x62, 0x62, 0x33, 0x32, 0x36, 0x39, 0x63, 0x65, 0x36, 0x66, 0x22, 0x52,
	0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x49, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x2a, 0x92, 0x41, 0x27, 0x4a, 0x25, 0x22, 0x37, 0x31, 0x33, 0x32, 0x62, 0x30, 0x30,
	0x34, 0x2d, 0x36, 0x31, 0x65, 0x38, 0x2d, 0x34, 0x39, 0x63, 0x31, 0x2d, 0x38, 0x64, 0x63, 0x38,
	0x2d, 0x34, 0x62, 0x62, 0x33, 0x32, 0x36, 0x39, 0x63, 0x65, 0x36, 0x66, 0x22, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6c, 0x69, 0x76, 0x65,
	0x2e, 0x76, 0x32, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0xb0, 0x01, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x4f, 0x0a, 0x0d,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x2a, 0x92, 0x41, 0x27, 0x4a, 0x25, 0x22, 0x37, 0x31, 0x33, 0x32, 0x62,
	0x30, 0x30, 0x34, 0x2d, 0x36, 0x31, 0x65, 0x38, 0x2d, 0x34, 0x39, 0x63, 0x31, 0x2d, 0x38, 0x64,
	0x63, 0x38, 0x2d, 0x34, 0x62, 0x62, 0x33, 0x32, 0x36, 0x39, 0x63, 0x65, 0x36, 0x66, 0x22, 0x52,
	0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x49, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x2a, 0x92, 0x41, 0x27, 0x4a, 0x25, 0x22, 0x37, 0x31, 0x33, 0x32, 0x62, 0x30, 0x30,
	0x34, 0x2d, 0x36, 0x31, 0x65, 0x38, 0x2d, 0x34, 0x39, 0x63, 0x31, 0x2d, 0x38, 0x64, 0x63, 0x38,
	0x2d, 0x34, 0x62, 0x62, 0x33, 0x32, 0x36, 0x39, 0x63, 0x65, 0x36, 0x66, 0x22, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0xfe, 0x01, 0x0a, 0x12, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x4f, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x92, 0x41, 0x27, 0x4a, 0x25, 0x22, 0x37, 0x31,
	0x33, 0x32, 0x62, 0x30, 0x30, 0x34, 0x2d, 0x36, 0x31, 0x65, 0x38, 0x2d, 0x34, 0x39, 0x63, 0x31,
	0x2d, 0x38, 0x64, 0x63, 0x38, 0x2d, 0x34, 0x62, 0x62, 0x33, 0x32, 0x36, 0x39, 0x63, 0x65, 0x36,
	0x66, 0x22, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x49, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x92, 0x41, 0x27, 0x4a, 0x25, 0x22, 0x37, 0x31, 0x33, 0x32,
	0x62, 0x30, 0x30, 0x34, 0x2d, 0x36, 0x31, 0x65, 0x38, 0x2d, 0x34, 0x39, 0x63, 0x31, 0x2d, 0x38,
	0x64, 0x63, 0x38, 0x2d, 0x34, 0x62, 0x62, 0x33, 0x32, 0x36, 0x39, 0x63, 0x65, 0x36, 0x66, 0x22,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x2b, 0x0a, 0x07,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0xd5, 0x02, 0x0a, 0x1a, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x4f, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x2a, 0x92, 0x41, 0x27, 0x4a, 0x25, 0x22, 0x37, 0x31, 0x33, 0x32, 0x62, 0x30, 0x30, 0x34, 0x2d,
	0x36, 0x31, 0x65, 0x38, 0x2d, 0x34, 0x39, 0x63, 0x31, 0x2d, 0x38, 0x64, 0x63, 0x38, 0x2d, 0x34,
	0x62, 0x62, 0x33, 0x32, 0x36, 0x39, 0x63, 0x65, 0x36, 0x66, 0x22, 0x52, 0x0c, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x92,
	0x41, 0x27, 0x4a, 0x25, 0x22, 0x37, 0x31, 0x33, 0x32, 0x62, 0x30, 0x30, 0x34, 0x2d, 0x36, 0x31,
	0x65, 0x38, 0x2d, 0x34, 0x39, 0x63, 0x31, 0x2d, 0x38, 0x64, 0x63, 0x38, 0x2d, 0x34, 0x62, 0x62,
	0x33, 0x32, 0x36, 0x39, 0x63, 0x65, 0x36, 0x66, 0x22, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32,
	0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x48, 0x00, 0x52, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65,
	0x12, 0x37, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1f, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x22, 0x9e, 0x01, 0x0a, 0x15, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x4f, 0x0a, 0x0d, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x2a, 0x92, 0x41, 0x27, 0x4a, 0x25, 0x22, 0x37, 0x31, 0x33, 0x32, 0x62, 0x30,
	0x30, 0x34, 0x2d, 0x36, 0x31, 0x65, 0x38, 0x2d, 0x34, 0x39, 0x63, 0x31, 0x2d, 0x38, 0x64, 0x63,
	0x38, 0x2d, 0x34, 0x62, 0x62, 0x33, 0x32, 0x36, 0x39, 0x63, 0x65, 0x36, 0x66, 0x22, 0x52, 0x0c,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x0a,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x68, 0x0a, 0x15, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x4f, 0x0a, 0x0d, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x2a, 0x92, 0x41, 0x27, 0x4a, 0x25, 0x22, 0x37, 0x31, 0x33, 0x32, 0x62, 0x30,
	0x30, 0x34, 0x2d, 0x36, 0x31, 0x65, 0x38, 0x2d, 0x34, 0x39, 0x63, 0x31, 0x2d, 0x38, 0x64, 0x63,
	0x38, 0x2d, 0x34, 0x62, 0x62, 0x33, 0x32, 0x36, 0x39, 0x63, 0x65, 0x36, 0x66, 0x22, 0x52, 0x0c,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xbf, 0x01, 0x0a,
	0x15, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x4f, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x92,
	0x41, 0x27, 0x4a, 0x25, 0x22, 0x37, 0x31, 0x33, 0x32, 0x62, 0x30, 0x30, 0x34, 0x2d, 0x36, 0x31,
	0x65, 0x38, 0x2d, 0x34, 0x39, 0x63, 0x31, 0x2d, 0x38, 0x64, 0x63, 0x38, 0x2d, 0x34, 0x62, 0x62,
	0x33, 0x32, 0x36, 0x39, 0x63, 0x65, 0x36, 0x66, 0x22, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x34, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6c,
	0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd7,
	0x01, 0x0a, 0x11, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x4f, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x92, 0x41, 0x27,
	0x4a, 0x25, 0x22, 0x37, 0x31, 0x33, 0x32, 0x62, 0x30, 0x30, 0x34, 0x2d, 0x36, 0x31, 0x65, 0x38,
	0x2d, 0x34, 0x39, 0x63, 0x31, 0x2d, 0x38, 0x64, 0x63, 0x38, 0x2d, 0x34, 0x62, 0x62, 0x33, 0x32,
	0x36, 0x39, 0x63, 0x65, 0x36, 0x66, 0x22, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x92, 0x41, 0x27, 0x4a, 0x25, 0x22,
	0x37, 0x31, 0x33, 0x32, 0x62, 0x30, 0x30, 0x34, 0x2d, 0x36, 0x31, 0x65, 0x38, 0x2d, 0x34, 0x39,
	0x63, 0x31, 0x2d, 0x38, 0x64, 0x63, 0x38, 0x2d, 0x34, 0x62, 0x62, 0x33, 0x32, 0x36, 0x39, 0x63,
	0x65, 0x36, 0x66, 0x22, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x28,
	0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x55, 0x0a, 0x11, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x22,
	0xa0, 0x01, 0x0a, 0x11, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e,
	0x76, 0x32, 0x31, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x22, 0x9b, 0x01, 0x0a, 0x0e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x64, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32,
	0x31, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x22, 0x74, 0x0a, 0x11, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0xb9, 0x02, 0x0a, 0x10, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x52, 0x0a, 0x0d, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x2d, 0x92, 0x41, 0x27, 0x4a, 0x25, 0x22, 0x37, 0x31, 0x33, 0x32, 0x62, 0x30,
	0x30, 0x34, 0x2d, 0x36, 0x31, 0x65, 0x38, 0x2d, 0x34, 0x39, 0x63, 0x31, 0x2d, 0x38, 0x64, 0x63,
	0x38, 0x2d, 0x34, 0x62, 0x62, 0x33, 0x32, 0x36, 0x39, 0x63, 0x65, 0x36, 0x66, 0x22, 0xe0, 0x41,
	0x02, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x49, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x2a, 0x92, 0x41, 0x27, 0x4a, 0x25, 0x22, 0x37, 0x31, 0x33, 0x32, 0x62,
	0x30, 0x30, 0x34, 0x2d, 0x36, 0x31, 0x65, 0x38, 0x2d, 0x34, 0x39, 0x63, 0x31, 0x2d, 0x38, 0x64,
	0x63, 0x38, 0x2d, 0x34, 0x62, 0x62, 0x33, 0x32, 0x36, 0x39, 0x63, 0x65, 0x36, 0x66, 0x22, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x09, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0x92,
	0x41, 0x27, 0x4a, 0x25, 0x22, 0x37, 0x31, 0x33, 0x32, 0x62, 0x30, 0x30, 0x34, 0x2d, 0x36, 0x31,
	0x65, 0x38, 0x2d, 0x34, 0x39, 0x63, 0x31, 0x2d, 0x38, 0x64, 0x63, 0x38, 0x2d, 0x34, 0x62, 0x62,
	0x33, 0x32, 0x36, 0x39, 0x63, 0x65, 0x36, 0x66, 0x22, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76,
	0x32, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48,
	0x00, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x22, 0xca, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x06, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32,
	0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x06, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x12, 0x39, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x06,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c,
	0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22,
	0x87, 0x02, 0x0a, 0x10, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x06, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e,
	0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x06, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x12, 0x3a, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x06,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6c,
	0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76,
	0x32, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xfc, 0x01, 0x0a, 0x0c, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x06, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x69, 0x76,
	0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x06, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x12, 0x36, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x06, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x69, 0x76,
	0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x12, 0x3c, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xd3, 0x02, 0x0a, 0x0b, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x06, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e,
	0x76, 0x32, 0x31, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x06, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12,
	0x35, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x06,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32,
	0x31, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x2c, 0x0a,
	0x03, 0x61, 0x64, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6c, 0x69, 0x76,
	0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x64, 0x64, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x03, 0x61, 0x64, 0x64, 0x12, 0x35, 0x0a, 0x06, 0x72,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x69,
	0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xb5,
	0x02, 0x0a, 0x09, 0x4c, 0x69, 0x76, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x0a,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x07, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x69, 0x76,
	0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x2f, 0x0a,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3e,
	0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48,
	0x00, 0x52, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x06,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x13, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xc2, 0x01, 0x0a, 0x07,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4f, 0x0a, 0x0a, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30,
	0x92, 0x41, 0x27, 0x4a, 0x25, 0x22, 0x37, 0x31, 0x33, 0x32, 0x62, 0x30, 0x30, 0x34, 0x2d, 0x36,
	0x31, 0x65, 0x38, 0x2d, 0x34, 0x39, 0x63, 0x31, 0x2d, 0x38, 0x64, 0x63, 0x38, 0x2d, 0x34, 0x62,
	0x62, 0x33, 0x32, 0x36, 0x39, 0x63, 0x65, 0x36, 0x66, 0x22, 0x82, 0xb5, 0x18, 0x02, 0x10, 0x01,
	0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x42, 0x09, 0x92, 0x41,
	0x06, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x1e, 0x0a, 0x04, 0x64, 0x65, 0x6d, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0a,
	0x92, 0x41, 0x07, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x04, 0x64, 0x65, 0x6d, 0x6f,
	0x22, 0x41, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76,
	0x32, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2a, 0xa6, 0x01, 0x0a, 0x0f, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x20, 0x0a, 0x1c, 0x42, 0x52, 0x4f, 0x41, 0x44,
	0x43, 0x41, 0x53, 0x54, 0x5f, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x52, 0x4f,
	0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x5f, 0x41, 0x50,
	0x49, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54,
	0x5f, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x02,
	0x12, 0x1d, 0x0a, 0x19, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x4f, 0x52,
	0x49, 0x47, 0x49, 0x4e, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x03, 0x12,
	0x1b, 0x0a, 0x17, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x4f, 0x52, 0x49,
	0x47, 0x49, 0x4e, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x04, 0x2a, 0x5a, 0x0a, 0x0b,
	0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x57,
	0x45, 0x42, 0x48, 0x4f, 0x4f, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x57, 0x45, 0x42,
	0x48, 0x4f, 0x4f, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x4f, 0x4f, 0x4b, 0x10, 0x01,
	0x12, 0x16, 0x0a, 0x12, 0x57, 0x45, 0x42, 0x48, 0x4f, 0x4f, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x2a, 0x99, 0x01, 0x0a, 0x0e, 0x57, 0x65, 0x62,
	0x68, 0x6f, 0x6f, 0x6b, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x57,
	0x45, 0x42, 0x48, 0x4f, 0x4f, 0x4b, 0x5f, 0x53, 0x55, 0x42, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f,
	0x57, 0x45, 0x42, 0x48, 0x4f, 0x4f, 0x4b, 0x5f, 0x53, 0x55, 0x42, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x10,
	0x01, 0x12, 0x20, 0x0a, 0x1c, 0x57, 0x45, 0x42, 0x48, 0x4f, 0x4f, 0x4b, 0x5f, 0x53, 0x55, 0x42,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x57, 0x45, 0x42, 0x52, 0x54,
	0x43, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x57, 0x45, 0x42, 0x48, 0x4f, 0x4f, 0x4b, 0x5f, 0x53,
	0x55, 0x42, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x5f, 0x57, 0x45, 0x42, 0x52,
	0x54, 0x43, 0x10, 0x03, 0x2a, 0x42, 0x0a, 0x0b, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x46, 0x4f, 0x52,
	0x4d, 0x41, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41,
	0x54, 0x5f, 0x4a, 0x50, 0x45, 0x47, 0x10, 0x01, 0x2a, 0x52, 0x0a, 0x0f, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x56,
	0x49, 0x44, 0x45, 0x4f, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x53, 0x50, 0x41, 0x43, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c,
	0x0a, 0x18, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x53, 0x50,
	0x41, 0x43, 0x45, 0x5f, 0x59, 0x55, 0x56, 0x34, 0x32, 0x30, 0x10, 0x01, 0x2a, 0x5b, 0x0a, 0x12,
	0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x61, 0x79, 0x6f,
	0x75, 0x74, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x5f, 0x43, 0x48, 0x41, 0x4e,
	0x4e, 0x45, 0x4c, 0x5f, 0x4c, 0x41, 0x59, 0x4f, 0x55, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x55, 0x44, 0x49,
	0x4f, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x4c, 0x41, 0x59, 0x4f, 0x55, 0x54,
	0x5f, 0x53, 0x54, 0x45, 0x52, 0x45, 0x4f, 0x10, 0x01, 0x2a, 0x71, 0x0a, 0x10, 0x52, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x21, 0x0a,
	0x1d, 0x52, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x49,
	0x54, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x51, 0x55,
	0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x10, 0x01,
	0x12, 0x1a, 0x0a, 0x16, 0x52, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x51, 0x55,
	0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x02, 0x2a, 0x3f, 0x0a, 0x0a,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x12, 0x1b, 0x0a, 0x17, 0x56, 0x49,
	0x44, 0x45, 0x4f, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x43, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x56, 0x49, 0x44, 0x45, 0x4f,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x43, 0x5f, 0x48, 0x32, 0x36, 0x34, 0x10, 0x01, 0x2a, 0x9c, 0x01,
	0x0a, 0x11, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x1f, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x56, 0x49, 0x44, 0x45,
	0x4f, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f,
	0x42, 0x41, 0x53, 0x45, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x56, 0x49,
	0x44, 0x45, 0x4f, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c,
	0x45, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x56, 0x49, 0x44, 0x45,
	0x4f, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f,
	0x48, 0x49, 0x47, 0x48, 0x10, 0x04, 0x22, 0x04, 0x08, 0x01, 0x10, 0x01, 0x2a, 0x3e, 0x0a, 0x0a,
	0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x55,
	0x44, 0x49, 0x4f, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x43, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x55, 0x44, 0x49, 0x4f,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x43, 0x5f, 0x41, 0x41, 0x43, 0x10, 0x01, 0x2a, 0x71, 0x0a, 0x19,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x52, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2d, 0x0a, 0x29, 0x56, 0x49, 0x44,
	0x45, 0x4f, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x43, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f,
	0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x56, 0x49, 0x44, 0x45,
	0x4f, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x43, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4e,
	0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x42, 0x52, 0x10, 0x01, 0x2a,
	0xca, 0x02, 0x0a, 0x15, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x23, 0x50, 0x52, 0x4f,
	0x4a, 0x45, 0x43, 0x54, 0x5f, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x50,
	0x48, 0x41, 0x53, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x27, 0x0a, 0x23, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x42, 0x52,
	0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x50,
	0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54,
	0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x02,
	0x12, 0x24, 0x0a, 0x20, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x42, 0x52, 0x4f, 0x41,
	0x44, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52,
	0x54, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x23, 0x0a, 0x1f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43,
	0x54, 0x5f, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x50, 0x48, 0x41, 0x53,
	0x45, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x24, 0x0a, 0x20, 0x50,
	0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54,
	0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x10,
	0x05, 0x12, 0x23, 0x0a, 0x1f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x42, 0x52, 0x4f,
	0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x53, 0x54, 0x4f,
	0x50, 0x50, 0x45, 0x44, 0x10, 0x06, 0x12, 0x24, 0x0a, 0x20, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43,
	0x54, 0x5f, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x50, 0x48, 0x41, 0x53,
	0x45, 0x5f, 0x41, 0x52, 0x43, 0x48, 0x49, 0x56, 0x45, 0x44, 0x10, 0x07, 0x2a, 0xc5, 0x01, 0x0a,
	0x05, 0x53, 0x33, 0x41, 0x43, 0x4c, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x33, 0x41, 0x43, 0x4c, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a,
	0x0d, 0x53, 0x33, 0x41, 0x43, 0x4c, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x10, 0x01,
	0x12, 0x15, 0x0a, 0x11, 0x53, 0x33, 0x41, 0x43, 0x4c, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43,
	0x5f, 0x52, 0x45, 0x41, 0x44, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x33, 0x41, 0x43, 0x4c,
	0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x57, 0x52, 0x49,
	0x54, 0x45, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x33, 0x41, 0x43, 0x4c, 0x5f, 0x41, 0x55,
	0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x41, 0x44,
	0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x33, 0x41, 0x43, 0x4c, 0x5f, 0x42, 0x55, 0x43, 0x4b,
	0x45, 0x54, 0x5f, 0x4f, 0x57, 0x4e, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x10, 0x05, 0x12,
	0x23, 0x0a, 0x1f, 0x53, 0x33, 0x41, 0x43, 0x4c, 0x5f, 0x42, 0x55, 0x43, 0x4b, 0x45, 0x54, 0x5f,
	0x4f, 0x57, 0x4e, 0x45, 0x52, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52,
	0x4f, 0x4c, 0x10, 0x06, 0x2a, 0x7c, 0x0a, 0x13, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x21, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x52, 0x49,
	0x47, 0x47, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x47, 0x4e, 0x4f,
	0x52, 0x45, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54,
	0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x52,
	0x10, 0x03, 0x2a, 0xa3, 0x02, 0x0a, 0x06, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a,
	0x12, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x5f,
	0x55, 0x53, 0x5f, 0x45, 0x41, 0x53, 0x54, 0x5f, 0x31, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x52,
	0x45, 0x47, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x5f, 0x45, 0x41, 0x53, 0x54, 0x5f, 0x32, 0x10,
	0x02, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x5f, 0x57,
	0x45, 0x53, 0x54, 0x5f, 0x31, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x45, 0x47, 0x49, 0x4f,
	0x4e, 0x5f, 0x55, 0x53, 0x5f, 0x57, 0x45, 0x53, 0x54, 0x5f, 0x32, 0x10, 0x04, 0x12, 0x17, 0x0a,
	0x13, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x5f, 0x43, 0x45, 0x4e, 0x54, 0x52,
	0x41, 0x4c, 0x5f, 0x31, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e,
	0x5f, 0x41, 0x50, 0x5f, 0x53, 0x4f, 0x55, 0x54, 0x48, 0x45, 0x41, 0x53, 0x54, 0x5f, 0x31, 0x10,
	0x0a, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x5f, 0x53,
	0x4f, 0x55, 0x54, 0x48, 0x45, 0x41, 0x53, 0x54, 0x5f, 0x32, 0x10, 0x0b, 0x12, 0x15, 0x0a, 0x11,
	0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x5f, 0x53, 0x4f, 0x55, 0x54, 0x48, 0x5f,
	0x31, 0x10, 0x0f, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x41,
	0x5f, 0x45, 0x41, 0x53, 0x54, 0x5f, 0x31, 0x10, 0x14, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x47,
	0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x55, 0x5f, 0x43, 0x45, 0x4e, 0x54, 0x52, 0x41, 0x4c, 0x5f, 0x31,
	0x10, 0x1e, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x55, 0x5f,
	0x57, 0x45, 0x53, 0x54, 0x5f, 0x31, 0x10, 0x1f, 0x2a, 0xaf, 0x01, 0x0a, 0x04, 0x52, 0x6f, 0x6c,
	0x65, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x4f, 0x4c, 0x45, 0x5f,
	0x48, 0x4f, 0x53, 0x54, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x43,
	0x4f, 0x48, 0x4f, 0x53, 0x54, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x4f, 0x4c, 0x45, 0x5f,
	0x43, 0x4f, 0x4e, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x0e, 0x0a,
	0x0a, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x47, 0x55, 0x45, 0x53, 0x54, 0x10, 0x04, 0x12, 0x0f, 0x0a,
	0x0b, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x45, 0x52, 0x10, 0x05, 0x12, 0x11,
	0x0a, 0x0d, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x45, 0x52, 0x10,
	0x06, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f,
	0x52, 0x4d, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x49, 0x4d, 0x50,
	0x45, 0x52, 0x53, 0x4f, 0x4e, 0x41, 0x54, 0x45, 0x10, 0x08, 0x2a, 0x95, 0x01, 0x0a, 0x15, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x27, 0x0a, 0x23, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f,
	0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x24, 0x0a,
	0x20, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41,
	0x53, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41,
	0x4c, 0x10, 0x01, 0x12, 0x2d, 0x0a, 0x29, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x42,
	0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x44,
	0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44,
	0x10, 0x02, 0x2a, 0x6a, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1e,
	0x0a, 0x1a, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x02, 0x2a, 0xcc,
	0x01, 0x0a, 0x0c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1e, 0x0a, 0x1a, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x19, 0x0a, 0x15, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53,
	0x55, 0x42, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x03,
	0x12, 0x16, 0x0a, 0x12, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56,
	0x45, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x55, 0x42,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x06, 0x2a, 0x8d, 0x01,
	0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10,
	0x04, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x44, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x32, 0xed, 0x02,
	0x0a, 0x1b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x9f, 0x01,
	0x0a, 0x17, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x2e, 0x6c, 0x69, 0x76, 0x65,
	0x2e, 0x76, 0x32, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f,
	0x92, 0x41, 0x0e, 0x62, 0x0c, 0x0a, 0x0a, 0x0a, 0x06, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x12,
	0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0xab, 0x01, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b,
	0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6c, 0x69,
	0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32, 0x92, 0x41, 0x0e, 0x62, 0x0c,
	0x0a, 0x0a, 0x0a, 0x06, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x12, 0x00, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1b, 0x3a, 0x01, 0x2a, 0x1a, 0x16, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0xeb, 0x04,
	0x0a, 0x11, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x71, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76,
	0x32, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6c, 0x69, 0x76,
	0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x16,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x3a, 0x01, 0x2a, 0x22, 0x0b, 0x2f, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x75, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76,
	0x32, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76,
	0x32, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d,
	0x12, 0x1b, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x68, 0x0a,
	0x0e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x1f, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x20, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x13, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x12, 0x0b, 0x2f, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x81, 0x01, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x2e, 0x6c,
	0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x22, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x3a, 0x01, 0x2a, 0x32, 0x1b,
	0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x7e, 0x0a, 0x10, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x21, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x2a, 0x1b,
	0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x32, 0x83, 0x0d, 0x0a, 0x0e,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x80,
	0x01, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x1e, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1f, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x3a, 0x01, 0x2a, 0x22, 0x23, 0x2f, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x81, 0x01, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x1b, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e,
	0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x38, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x32, 0x12, 0x30, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x7b, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x8a, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1e, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76,
	0x32, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76,
	0x32, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x38, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32,
	0x2a, 0x30, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x7d, 0x12, 0x8d, 0x01, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x1e, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x3a, 0x01, 0x2a,
	0x32, 0x30, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x7d, 0x12, 0xb2, 0x01, 0x0a, 0x15, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x12, 0x26, 0x2e, 0x6c,
	0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x48, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x42, 0x1a, 0x40, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x7b, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x2f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0xae, 0x01, 0x0a, 0x14, 0x53, 0x74, 0x6f, 0x70,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x12, 0x25, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x70,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76,
	0x32, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x47, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x41, 0x1a, 0x3f, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x7b, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x2f, 0x73, 0x74, 0x6f, 0x70, 0x12, 0xa6, 0x01, 0x0a, 0x12, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x57, 0x65, 0x62, 0x52, 0x74, 0x63, 0x12,
	0x23, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x57, 0x65, 0x62, 0x52, 0x74, 0x63, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x57, 0x65, 0x62, 0x52,
	0x74, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x45, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x3f, 0x1a, 0x3d, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x7b, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x2f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x12, 0xa2, 0x01, 0x0a, 0x11, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x57, 0x65, 0x62, 0x52, 0x74, 0x63, 0x12, 0x22, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76,
	0x32, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x57, 0x65,
	0x62, 0x52, 0x74, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6c, 0x69,
	0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x57, 0x65, 0x62, 0x52, 0x74, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x44, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3e, 0x1a, 0x3c, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x7b, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x77, 0x65, 0x62, 0x72, 0x74,
	0x63, 0x2f, 0x73, 0x74, 0x6f, 0x70, 0x12, 0xd6, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x2c, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x5a, 0x92, 0x41, 0x0c, 0x3a, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2f,
	0x6a, 0x70, 0x65, 0x67, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x45, 0x12, 0x43, 0x2f, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f,
	0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x62, 0x72, 0x6f,
	0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12,
	0xbf, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x2e,
	0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6c, 0x69, 0x76, 0x65,
	0x2e, 0x76, 0x32, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x42,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x49, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x43, 0x12, 0x41,
	0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x32, 0xd8, 0x05, 0x0a, 0x12, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xa5, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22,
	0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x47, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x41, 0x3a,
	0x01, 0x2a, 0x22, 0x3c, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x7b, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0xaa, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x55, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4f, 0x12, 0x4d,
	0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xb6, 0x01,
	0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x22, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76,
	0x32, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x58, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x52, 0x3a, 0x01, 0x2a, 0x32, 0x4d, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x7b, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xb3, 0x01, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x2e, 0x6c,
	0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x23, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x55, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4f, 0x2a, 0x4d, 0x2f,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x32, 0xd4, 0x0a, 0x0a,
	0x0d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x7c,
	0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1d,
	0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e,
	0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x27, 0x3a, 0x01, 0x2a, 0x22, 0x22, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x85, 0x01, 0x0a,
	0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1d, 0x2e,
	0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6c,
	0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x36, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x30, 0x2a, 0x2e, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x7b, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x7b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x7d, 0x12, 0x88, 0x01, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1d, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x39, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x3a, 0x01, 0x2a, 0x32,
	0x2e, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2f, 0x7b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x12,
	0xb8, 0x01, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x49, 0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x26, 0x2e, 0x6c, 0x69, 0x76, 0x65,
	0x2e, 0x76, 0x32, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x27, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4e, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x48, 0x3a, 0x01, 0x2a, 0x32, 0x43, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x7b, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x7b,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x7c, 0x0a, 0x09, 0x47, 0x65,
	0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1a, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76,
	0x32, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x36, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x12, 0x2e, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x7b, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x73, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x1b, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x12, 0x22, 0x2f, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0xaf, 0x01,
	0x0a, 0x12, 0x41, 0x64, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x6f, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x23, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e,
	0x41, 0x64, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x6f, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6c, 0x69, 0x76, 0x65,
	0x2e, 0x76, 0x32, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x6f,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x4e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x48, 0x3a, 0x01, 0x2a, 0x1a, 0x43, 0x2f, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f,
	0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2f, 0x7b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x12,
	0xbb, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x46, 0x72, 0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x28, 0x2e, 0x6c, 0x69,
	0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31,
	0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x72, 0x6f,
	0x6d, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x4b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x45, 0x2a, 0x43, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x7b, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2f, 0x7b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x93, 0x01,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x6c,
	0x69, 0x73, 0x74, 0x12, 0x22, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x42, 0x6f, 0x64, 0x79, 0x22, 0x44, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x3e, 0x12, 0x3c, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x7b, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x7b, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x2e, 0x6d,
	0x33, 0x75, 0x38, 0x32, 0xc1, 0x02, 0x0a, 0x1c, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x41,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x8f, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x22, 0x2e, 0x6c, 0x69, 0x76,
	0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23,
	0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x31, 0x92, 0x41, 0x0e, 0x62, 0x0c, 0x0a, 0x0a, 0x0a, 0x06, 0x41, 0x70,
	0x69, 0x4b, 0x65, 0x79, 0x12, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x3a, 0x01, 0x2a, 0x22,
	0x15, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x8e, 0x01, 0x0a, 0x0f, 0x4c, 0x6f, 0x6f, 0x6b, 0x75,
	0x70, 0x47, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x2e, 0x6c, 0x69, 0x76,
	0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x47, 0x75, 0x65, 0x73,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6c,
	0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x47, 0x75,
	0x65, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x36, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x12, 0x2e, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2f, 0x67,
	0x75, 0x65, 0x73, 0x74, 0x2d, 0x63, 0x6f, 0x64, 0x65, 0x2f, 0x7b, 0x63, 0x6f, 0x64, 0x65, 0x7d,
	0x2f, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x32, 0xac, 0x07, 0x0a, 0x15, 0x41, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x93, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x75, 0x65, 0x73,
	0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x27, 0x2e, 0x6c,
	0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x75,
	0x65, 0x73, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x3a, 0x01, 0x2a, 0x22, 0x1b, 0x2f, 0x61, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x2f, 0x67, 0x75, 0x65, 0x73, 0x74, 0x12, 0x81, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x23,
	0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x52,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1a, 0x3a, 0x01, 0x2a, 0x1a, 0x15, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x70, 0x0a, 0x17, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x65, 0x62, 0x52, 0x74, 0x63, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x28, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x65, 0x62, 0x52, 0x74, 0x63, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x29, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x57, 0x65, 0x62, 0x52, 0x74, 0x63, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x80, 0x01,
	0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x20, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x47, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x22, 0x20,
	0x2f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2f, 0x67, 0x75, 0x65, 0x73, 0x74, 0x2d, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x7e, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x47, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x1d, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47,
	0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1e, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x75,
	0x65, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x12, 0x27, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2f, 0x67,
	0x75, 0x65, 0x73, 0x74, 0x2d, 0x63, 0x6f, 0x64, 0x65, 0x2f, 0x7b, 0x63, 0x6f, 0x64, 0x65, 0x7d,
	0x12, 0x7a, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x47, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x73, 0x12, 0x1e, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x47, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1f, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x47, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x12, 0x20, 0x2f, 0x61, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x2f, 0x67, 0x75, 0x65, 0x73, 0x74, 0x2d, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x87, 0x01, 0x0a,
	0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x20, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x47, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x47, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x2a, 0x27, 0x2f,
	0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x2f, 0x67, 0x75, 0x65, 0x73, 0x74, 0x2d, 0x63, 0x6f, 0x64, 0x65, 0x2f,
	0x7b, 0x63, 0x6f, 0x64, 0x65, 0x7d, 0x32, 0x94, 0x02, 0x0a, 0x1b, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x77, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4a, 0x73, 0x6f,
	0x6e, 0x57, 0x65, 0x62, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x74, 0x12, 0x21, 0x2e, 0x6c, 0x69, 0x76,
	0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4a, 0x73, 0x6f, 0x6e, 0x57, 0x65, 0x62,
	0x4b, 0x65, 0x79, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e,
	0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4a, 0x73, 0x6f, 0x6e,
	0x57, 0x65, 0x62, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f, 0x61, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x77, 0x6b, 0x73, 0x12,
	0x7c, 0x0a, 0x11, 0x47, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x12, 0x22, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e,
	0x47, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e,
	0x76, 0x32, 0x31, 0x2e, 0x47, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x72, 0x2f, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x7b, 0x63, 0x6f, 0x64, 0x65, 0x7d, 0x32, 0x7c, 0x0a,
	0x0e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x6a, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x2e,
	0x6c, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6c, 0x69, 0x76,
	0x65, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x92, 0x41, 0x0e, 0x62, 0x0c, 0x0a,
	0x0a, 0x0a, 0x06, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x12, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x0a, 0x12, 0x08, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0xc9, 0x09, 0x92, 0x41,
	0xa5, 0x08, 0x12, 0x05, 0x32, 0x03, 0x32, 0x2e, 0x31, 0x1a, 0x0f, 0x6c, 0x69, 0x76, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x22, 0x08, 0x2f, 0x6c, 0x69, 0x76,
	0x65, 0x2f, 0x76, 0x32, 0x2a, 0x01, 0x02, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x52, 0x2f, 0x0a, 0x03, 0x34,
	0x30, 0x31, 0x12, 0x28, 0x0a, 0x26, 0x54, 0x68, 0x65, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x20,
	0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x4d, 0x0a, 0x03,
	0x34, 0x30, 0x33, 0x12, 0x46, 0x0a, 0x44, 0x54, 0x68, 0x65, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64,
	0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x2d, 0x0a, 0x03, 0x34,
	0x30, 0x34, 0x12, 0x26, 0x0a, 0x24, 0x54, 0x68, 0x65, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x77, 0x61, 0x73,
	0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x61, 0x0a, 0x03, 0x34, 0x32,
	0x39, 0x12, 0x5a, 0x0a, 0x58, 0x54, 0x68, 0x65, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x69, 0x73, 0x20, 0x62, 0x75,
	0x73, 0x79, 0x3b, 0x20, 0x70, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x75, 0x73, 0x65, 0x20, 0x61,
	0x6e, 0x20, 0x65, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x20, 0x62, 0x61,
	0x63, 0x6b, 0x6f, 0x66, 0x66, 0x20, 0x6f, 0x6e, 0x20, 0x73, 0x75, 0x62, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x74, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x52, 0x45, 0x0a,
	0x03, 0x35, 0x30, 0x30, 0x12, 0x3e, 0x0a, 0x3c, 0x54, 0x68, 0x65, 0x20, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x69, 0x73,
	0x20, 0x75, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x3b, 0x20, 0x70, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x20, 0x74, 0x72, 0x79, 0x20, 0x61, 0x67, 0x61, 0x69, 0x6e, 0x20, 0x6c,
	0x61, 0x74, 0x65, 0x72, 0x5a, 0x88, 0x03, 0x0a, 0xd8, 0x01, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0xc8, 0x01, 0x08, 0x02, 0x12, 0xaa, 0x01, 0x41,
	0x73, 0x73, 0x65, 0x72, 0x74, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x69, 0x6e, 0x74, 0x6f, 0x20, 0x61, 0x20, 0x48,
	0x54, 0x54, 0x50, 0x20, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x64,
	0x20, 0x27, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a,
	0x20, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x27, 0x3c, 0x62, 0x72, 0x3e, 0x3c, 0x70, 0x72, 0x65,
	0x3e, 0x63, 0x75, 0x72, 0x6c, 0x20, 0x2d, 0x48, 0x20, 0x27, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x20, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x20,
	0x62, 0x61, 0x72, 0x27, 0x20, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x6c, 0x69, 0x76,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2f, 0x6c, 0x69, 0x76,
	0x65, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x66, 0x6f, 0x6f, 0x3c, 0x2f, 0x70, 0x72, 0x65, 0x3e, 0x1a, 0x15, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x20, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72,
	0x20, 0x02, 0x0a, 0xaa, 0x01, 0x0a, 0x06, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x12, 0x9f, 0x01,
	0x08, 0x02, 0x12, 0x8d, 0x01, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x20, 0x79, 0x6f, 0x75, 0x72,
	0x20, 0x61, 0x70, 0x69, 0x20, 0x6b, 0x65, 0x79, 0x20, 0x69, 0x6e, 0x74, 0x6f, 0x20, 0x61, 0x20,
	0x48, 0x54, 0x54, 0x50, 0x20, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x20, 0x6e, 0x61, 0x6d, 0x65,
	0x64, 0x20, 0x27, 0x58, 0x2d, 0x41, 0x50, 0x49, 0x2d, 0x4b, 0x65, 0x79, 0x27, 0x3c, 0x62, 0x72,
	0x3e, 0x3c, 0x70, 0x72, 0x65, 0x3e, 0x63, 0x75, 0x72, 0x6c, 0x20, 0x2d, 0x48, 0x20, 0x27, 0x58,
	0x2d, 0x41, 0x50, 0x49, 0x2d, 0x4b, 0x65, 0x79, 0x3a, 0x62, 0x61, 0x72, 0x27, 0x20, 0x68, 0x74,
	0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x2f, 0x6c, 0x69, 0x76, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x66, 0x6f, 0x6f, 0x3c, 0x2f, 0x70, 0x72,
	0x65, 0x3e, 0x1a, 0x09, 0x58, 0x2d, 0x41, 0x50, 0x49, 0x2d, 0x4b, 0x65, 0x79, 0x20, 0x02, 0x62,
	0x11, 0x0a, 0x0f, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x00, 0x7a, 0xe2, 0x01, 0x0a, 0x0b, 0x78, 0x2d, 0x74, 0x61, 0x67, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x12, 0xd2, 0x01, 0x32, 0xcf, 0x01, 0x0a, 0xcc, 0x01, 0x2a, 0xc9, 0x01, 0x0a, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0a, 0x1a, 0x08, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x0a, 0xb2, 0x01, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0xa9, 0x01, 0x32, 0xa6,
	0x01, 0x0a, 0x13, 0x1a, 0x11, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x0a, 0x10, 0x1a, 0x0e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x0a, 0x0f, 0x1a, 0x0d, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x0a, 0x14, 0x1a, 0x12, 0x44, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x0a,
	0x17, 0x1a, 0x15, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x0a, 0x1e, 0x1a, 0x1c, 0x42, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x0a, 0x1d, 0x1a, 0x1b, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x2e, 0x6c, 0x69, 0x76,
	0x65, 0x2e, 0x76, 0x32, 0x31, 0x42, 0x08, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x45, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x67, 0x6f, 0x2f, 0x73, 0x64,
	0x6b, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6c, 0x69, 0x76, 0x65, 0x2f, 0x76, 0x32, 0x31,
	0x3b, 0x6c, 0x69, 0x76, 0x65, 0x76, 0x32, 0x31, 0xa2, 0x02, 0x03, 0x4c, 0x58, 0x58, 0xaa, 0x02,
	0x08, 0x4c, 0x69, 0x76, 0x65, 0x2e, 0x56, 0x32, 0x31, 0xca, 0x02, 0x08, 0x4c, 0x69, 0x76, 0x65,
	0x5c, 0x56, 0x32, 0x31, 0xe2, 0x02, 0x14, 0x4c, 0x69, 0x76, 0x65, 0x5c, 0x56, 0x32, 0x31, 0x5c,
	0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x09, 0x4c, 0x69,
	0x76, 0x65, 0x3a, 0x3a, 0x56, 0x32, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_live_v21_api_proto_rawDescOnce sync.Once
	file_live_v21_api_proto_rawDescData = file_live_v21_api_proto_rawDesc
)

func file_live_v21_api_proto_rawDescGZIP() []byte {
	file_live_v21_api_proto_rawDescOnce.Do(func() {
		file_live_v21_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_live_v21_api_proto_rawDescData)
	})
	return file_live_v21_api_proto_rawDescData
}

var file_live_v21_api_proto_enumTypes = make([]protoimpl.EnumInfo, 20)
var file_live_v21_api_proto_msgTypes = make([]protoimpl.MessageInfo, 169)
var file_live_v21_api_proto_goTypes = []interface{}{
	(BroadcastOrigin)(0),                        // 0: live.v21.BroadcastOrigin
	(WebhookType)(0),                            // 1: live.v21.WebhookType
	(WebhookSubtype)(0),                         // 2: live.v21.WebhookSubtype
	(ImageFormat)(0),                            // 3: live.v21.ImageFormat
	(VideoColorSpace)(0),                        // 4: live.v21.VideoColorSpace
	(AudioChannelLayout)(0),                     // 5: live.v21.AudioChannelLayout
	(RenderingQuality)(0),                       // 6: live.v21.RenderingQuality
	(VideoCodec)(0),                             // 7: live.v21.VideoCodec
	(VideoCodecProfile)(0),                      // 8: live.v21.VideoCodecProfile
	(AudioCodec)(0),                             // 9: live.v21.AudioCodec
	(VideoCodecRateControlMode)(0),              // 10: live.v21.VideoCodecRateControlMode
	(ProjectBroadcastPhase)(0),                  // 11: live.v21.ProjectBroadcastPhase
	(S3ACL)(0),                                  // 12: live.v21.S3ACL
	(SourceTriggerAction)(0),                    // 13: live.v21.SourceTriggerAction
	(Region)(0),                                 // 14: live.v21.Region
	(Role)(0),                                   // 15: live.v21.Role
	(ProjectBroadcastError)(0),                  // 16: live.v21.ProjectBroadcastError
	(ConnectState)(0),                           // 17: live.v21.ConnectState
	(EventSubType)(0),                           // 18: live.v21.EventSubType
	(EventType)(0),                              // 19: live.v21.EventType
	(*BroadcastOriginExternalMetadata)(nil),     // 20: live.v21.BroadcastOriginExternalMetadata
	(*BroadcastOriginSourceMetadata)(nil),       // 21: live.v21.BroadcastOriginSourceMetadata
	(*WebhookRequest)(nil),                      // 22: live.v21.WebhookRequest
	(*WebhookResponse)(nil),                     // 23: live.v21.WebhookResponse
	(*WebhookConfiguration)(nil),                // 24: live.v21.WebhookConfiguration
	(*AccountConfigurationHook)(nil),            // 25: live.v21.AccountConfigurationHook
	(*AccountConfiguration)(nil),                // 26: live.v21.AccountConfiguration
	(*GetAccountConfigurationRequest)(nil),      // 27: live.v21.GetAccountConfigurationRequest
	(*GetAccountConfigurationResponse)(nil),     // 28: live.v21.GetAccountConfigurationResponse
	(*UpdateAccountConfigurationRequest)(nil),   // 29: live.v21.UpdateAccountConfigurationRequest
	(*UpdateAccountConfigurationResponse)(nil),  // 30: live.v21.UpdateAccountConfigurationResponse
	(*VideoRendering)(nil),                      // 31: live.v21.VideoRendering
	(*AudioRendering)(nil),                      // 32: live.v21.AudioRendering
	(*Rendering)(nil),                           // 33: live.v21.Rendering
	(*VideoCodecRateControl)(nil),               // 34: live.v21.VideoCodecRateControl
	(*VideoEncoding)(nil),                       // 35: live.v21.VideoEncoding
	(*AudioEncoding)(nil),                       // 36: live.v21.AudioEncoding
	(*Encoding)(nil),                            // 37: live.v21.Encoding
	(*SourceRtmpPushAddress)(nil),               // 38: live.v21.SourceRtmpPushAddress
	(*SrtPushAddress)(nil),                      // 39: live.v21.SrtPushAddress
	(*RtmpPullAddress)(nil),                     // 40: live.v21.RtmpPullAddress
	(*SrtPullAddress)(nil),                      // 41: live.v21.SrtPullAddress
	(*DynamicAddress)(nil),                      // 42: live.v21.DynamicAddress
	(*DirectRTMPAddress)(nil),                   // 43: live.v21.DirectRTMPAddress
	(*DirectSrtAddress)(nil),                    // 44: live.v21.DirectSrtAddress
	(*RuntimeSourceAddress)(nil),                // 45: live.v21.RuntimeSourceAddress
	(*SourceAddress)(nil),                       // 46: live.v21.SourceAddress
	(*DestinationRtmpPushAddress)(nil),          // 47: live.v21.DestinationRtmpPushAddress
	(*DestinationSrtPushAddress)(nil),           // 48: live.v21.DestinationSrtPushAddress
	(*DestinationAgoraPushAddress)(nil),         // 49: live.v21.DestinationAgoraPushAddress
	(*HlsLifecycleLive)(nil),                    // 50: live.v21.HlsLifecycleLive
	(*HlsLifecycleVod)(nil),                     // 51: live.v21.HlsLifecycleVod
	(*HlsLifecycle)(nil),                        // 52: live.v21.HlsLifecycle
	(*HlsPackaging)(nil),                        // 53: live.v21.HlsPackaging
	(*ObjectStoragePackaging)(nil),              // 54: live.v21.ObjectStoragePackaging
	(*PreviewWebRtcAddress)(nil),                // 55: live.v21.PreviewWebRtcAddress
	(*S3StorageAddress)(nil),                    // 56: live.v21.S3StorageAddress
	(*DestinationAddress)(nil),                  // 57: live.v21.DestinationAddress
	(*SourceTrigger)(nil),                       // 58: live.v21.SourceTrigger
	(*WebRtcTrigger)(nil),                       // 59: live.v21.WebRtcTrigger
	(*ProjectTrigger)(nil),                      // 60: live.v21.ProjectTrigger
	(*PreviewHlsPullAddress)(nil),               // 61: live.v21.PreviewHlsPullAddress
	(*PreviewAddress)(nil),                      // 62: live.v21.PreviewAddress
	(*StudioSdkComposition)(nil),                // 63: live.v21.StudioSdkComposition
	(*StudioRendererComposition)(nil),           // 64: live.v21.StudioRendererComposition
	(*SceneComposition)(nil),                    // 65: live.v21.SceneComposition
	(*ExternalComposition)(nil),                 // 66: live.v21.ExternalComposition
	(*Composition)(nil),                         // 67: live.v21.Composition
	(*HostedWebRtc)(nil),                        // 68: live.v21.HostedWebRtc
	(*WebRtc)(nil),                              // 69: live.v21.WebRtc
	(*WebRtcAccess)(nil),                        // 70: live.v21.WebRtcAccess
	(*LatLong)(nil),                             // 71: live.v21.LatLong
	(*DirectIngestUrl)(nil),                     // 72: live.v21.DirectIngestUrl
	(*ProjectBroadcastStatus)(nil),              // 73: live.v21.ProjectBroadcastStatus
	(*Source)(nil),                              // 74: live.v21.Source
	(*Destination)(nil),                         // 75: live.v21.Destination
	(*Project)(nil),                             // 76: live.v21.Project
	(*Collection)(nil),                          // 77: live.v21.Collection
	(*CreateCollectionRequest)(nil),             // 78: live.v21.CreateCollectionRequest
	(*CreateCollectionResponse)(nil),            // 79: live.v21.CreateCollectionResponse
	(*GetCollectionRequest)(nil),                // 80: live.v21.GetCollectionRequest
	(*GetCollectionResponse)(nil),               // 81: live.v21.GetCollectionResponse
	(*UpdateCollectionRequest)(nil),             // 82: live.v21.UpdateCollectionRequest
	(*UpdateCollectionResponse)(nil),            // 83: live.v21.UpdateCollectionResponse
	(*DeleteCollectionRequest)(nil),             // 84: live.v21.DeleteCollectionRequest
	(*DeleteCollectionResponse)(nil),            // 85: live.v21.DeleteCollectionResponse
	(*GetCollectionsRequest)(nil),               // 86: live.v21.GetCollectionsRequest
	(*GetCollectionsResponse)(nil),              // 87: live.v21.GetCollectionsResponse
	(*CreateProjectRequest)(nil),                // 88: live.v21.CreateProjectRequest
	(*CreateProjectResponse)(nil),               // 89: live.v21.CreateProjectResponse
	(*UpdateProjectRequest)(nil),                // 90: live.v21.UpdateProjectRequest
	(*UpdateProjectResponse)(nil),               // 91: live.v21.UpdateProjectResponse
	(*DeleteProjectRequest)(nil),                // 92: live.v21.DeleteProjectRequest
	(*DeleteProjectResponse)(nil),               // 93: live.v21.DeleteProjectResponse
	(*StartProjectBroadcastRequest)(nil),        // 94: live.v21.StartProjectBroadcastRequest
	(*StartProjectBroadcastResponse)(nil),       // 95: live.v21.StartProjectBroadcastResponse
	(*StopProjectBroadcastRequest)(nil),         // 96: live.v21.StopProjectBroadcastRequest
	(*StopProjectBroadcastResponse)(nil),        // 97: live.v21.StopProjectBroadcastResponse
	(*GetProjectRequest)(nil),                   // 98: live.v21.GetProjectRequest
	(*GetProjectResponse)(nil),                  // 99: live.v21.GetProjectResponse
	(*GetProjectBroadcastSnapshotRequest)(nil),  // 100: live.v21.GetProjectBroadcastSnapshotRequest
	(*GetProjectBroadcastSnapshotResponse)(nil), // 101: live.v21.GetProjectBroadcastSnapshotResponse
	(*GetProjectBroadcastStatusRequest)(nil),    // 102: live.v21.GetProjectBroadcastStatusRequest
	(*GetProjectBroadcastStatusResponse)(nil),   // 103: live.v21.GetProjectBroadcastStatusResponse
	(*StartProjectWebRtcRequest)(nil),           // 104: live.v21.StartProjectWebRtcRequest
	(*StartProjectWebRtcResponse)(nil),          // 105: live.v21.StartProjectWebRtcResponse
	(*StopProjectWebRtcRequest)(nil),            // 106: live.v21.StopProjectWebRtcRequest
	(*StopProjectWebRtcResponse)(nil),           // 107: live.v21.StopProjectWebRtcResponse
	(*CreateDestinationRequest)(nil),            // 108: live.v21.CreateDestinationRequest
	(*CreateDestinationResponse)(nil),           // 109: live.v21.CreateDestinationResponse
	(*GetDestinationRequest)(nil),               // 110: live.v21.GetDestinationRequest
	(*GetDestinationResponse)(nil),              // 111: live.v21.GetDestinationResponse
	(*DeleteDestinationRequest)(nil),            // 112: live.v21.DeleteDestinationRequest
	(*DeleteDestinationResponse)(nil),           // 113: live.v21.DeleteDestinationResponse
	(*UpdateDestinationRequest)(nil),            // 114: live.v21.UpdateDestinationRequest
	(*UpdateDestinationResponse)(nil),           // 115: live.v21.UpdateDestinationResponse
	(*CreateSourceRequest)(nil),                 // 116: live.v21.CreateSourceRequest
	(*CreateSourceResponse)(nil),                // 117: live.v21.CreateSourceResponse
	(*DeleteSourceRequest)(nil),                 // 118: live.v21.DeleteSourceRequest
	(*DeleteSourceResponse)(nil),                // 119: live.v21.DeleteSourceResponse
	(*AddSourceToProjectRequest)(nil),           // 120: live.v21.AddSourceToProjectRequest
	(*AddSourceToProjectResponse)(nil),          // 121: live.v21.AddSourceToProjectResponse
	(*UpdateSourceInProjectRequest)(nil),        // 122: live.v21.UpdateSourceInProjectRequest
	(*UpdateSourceInProjectResponse)(nil),       // 123: live.v21.UpdateSourceInProjectResponse
	(*GetSourceRequest)(nil),                    // 124: live.v21.GetSourceRequest
	(*GetSourceResponse)(nil),                   // 125: live.v21.GetSourceResponse
	(*GetSourcesRequest)(nil),                   // 126: live.v21.GetSourcesRequest
	(*GetSourcesResponse)(nil),                  // 127: live.v21.GetSourcesResponse
	(*UpdateSourceRequest)(nil),                 // 128: live.v21.UpdateSourceRequest
	(*UpdateSourceResponse)(nil),                // 129: live.v21.UpdateSourceResponse
	(*RemoveSourceFromProjectRequest)(nil),      // 130: live.v21.RemoveSourceFromProjectRequest
	(*RemoveSourceFromProjectResponse)(nil),     // 131: live.v21.RemoveSourceFromProjectResponse
	(*GetSourcePlaylistRequest)(nil),            // 132: live.v21.GetSourcePlaylistRequest
	(*GetSourcePlaylistResponse)(nil),           // 133: live.v21.GetSourcePlaylistResponse
	(*CreateAccessTokenRequest)(nil),            // 134: live.v21.CreateAccessTokenRequest
	(*CreateAccessTokenResponse)(nil),           // 135: live.v21.CreateAccessTokenResponse
	(*LookupGuestCodeRequest)(nil),              // 136: live.v21.LookupGuestCodeRequest
	(*LookupGuestCodeResponse)(nil),             // 137: live.v21.LookupGuestCodeResponse
	(*GuestAccessTokenDirect)(nil),              // 138: live.v21.GuestAccessTokenDirect
	(*GuestAccessTokenExchange)(nil),            // 139: live.v21.GuestAccessTokenExchange
	(*GuestAccessToken)(nil),                    // 140: live.v21.GuestAccessToken
	(*CreateGuestAccessTokenRequest)(nil),       // 141: live.v21.CreateGuestAccessTokenRequest
	(*CreateGuestAccessTokenResponse)(nil),      // 142: live.v21.CreateGuestAccessTokenResponse
	(*CreateWebRtcAccessTokenRequest)(nil),      // 143: live.v21.CreateWebRtcAccessTokenRequest
	(*CreateWebRtcAccessTokenResponse)(nil),     // 144: live.v21.CreateWebRtcAccessTokenResponse
	(*RefreshAccessTokenRequest)(nil),           // 145: live.v21.RefreshAccessTokenRequest
	(*RefreshAccessTokenResponse)(nil),          // 146: live.v21.RefreshAccessTokenResponse
	(*GuestCodeRedirectRequest)(nil),            // 147: live.v21.GuestCodeRedirectRequest
	(*GuestCodeRedirectResponse)(nil),           // 148: live.v21.GuestCodeRedirectResponse
	(*IssuedGuestCode)(nil),                     // 149: live.v21.IssuedGuestCode
	(*CreateGuestCodeRequest)(nil),              // 150: live.v21.CreateGuestCodeRequest
	(*CreateGuestCodeResponse)(nil),             // 151: live.v21.CreateGuestCodeResponse
	(*GetGuestCodeRequest)(nil),                 // 152: live.v21.GetGuestCodeRequest
	(*GetGuestCodeResponse)(nil),                // 153: live.v21.GetGuestCodeResponse
	(*GetGuestCodesRequest)(nil),                // 154: live.v21.GetGuestCodesRequest
	(*GetGuestCodesResponse)(nil),               // 155: live.v21.GetGuestCodesResponse
	(*DeleteGuestCodeRequest)(nil),              // 156: live.v21.DeleteGuestCodeRequest
	(*DeleteGuestCodeResponse)(nil),             // 157: live.v21.DeleteGuestCodeResponse
	(*JsonWebKey)(nil),                          // 158: live.v21.JsonWebKey
	(*GetJsonWebKeySetRequest)(nil),             // 159: live.v21.GetJsonWebKeySetRequest
	(*GetJsonWebKeySetResponse)(nil),            // 160: live.v21.GetJsonWebKeySetResponse
	(*GetTestTokenRequest)(nil),                 // 161: live.v21.GetTestTokenRequest
	(*GetTestTokenResponse)(nil),                // 162: live.v21.GetTestTokenResponse
	(*DestinationCreateEvent)(nil),              // 163: live.v21.DestinationCreateEvent
	(*DestinationDeleteEvent)(nil),              // 164: live.v21.DestinationDeleteEvent
	(*DestinationUpdateEvent)(nil),              // 165: live.v21.DestinationUpdateEvent
	(*DestinationStateEvent)(nil),               // 166: live.v21.DestinationStateEvent
	(*ProjectCreateEvent)(nil),                  // 167: live.v21.ProjectCreateEvent
	(*ProjectDeleteEvent)(nil),                  // 168: live.v21.ProjectDeleteEvent
	(*ProjectUpdateEvent)(nil),                  // 169: live.v21.ProjectUpdateEvent
	(*ProjectBroadcastStateEvent)(nil),          // 170: live.v21.ProjectBroadcastStateEvent
	(*CollectionCreateEvent)(nil),               // 171: live.v21.CollectionCreateEvent
	(*CollectionDeleteEvent)(nil),               // 172: live.v21.CollectionDeleteEvent
	(*CollectionUpdateEvent)(nil),               // 173: live.v21.CollectionUpdateEvent
	(*SourceCreateEvent)(nil),                   // 174: live.v21.SourceCreateEvent
	(*SourceDeleteEvent)(nil),                   // 175: live.v21.SourceDeleteEvent
	(*SourceUpdateEvent)(nil),                   // 176: live.v21.SourceUpdateEvent
	(*SourceAddEvent)(nil),                      // 177: live.v21.SourceAddEvent
	(*SourceRemoveEvent)(nil),                   // 178: live.v21.SourceRemoveEvent
	(*SourceStateEvent)(nil),                    // 179: live.v21.SourceStateEvent
	(*CollectionEvent)(nil),                     // 180: live.v21.CollectionEvent
	(*DestinationEvent)(nil),                    // 181: live.v21.DestinationEvent
	(*ProjectEvent)(nil),                        // 182: live.v21.ProjectEvent
	(*SourceEvent)(nil),                         // 183: live.v21.SourceEvent
	(*LiveEvent)(nil),                           // 184: live.v21.LiveEvent
	(*GetServiceRequest)(nil),                   // 185: live.v21.GetServiceRequest
	(*Service)(nil),                             // 186: live.v21.Service
	(*GetServiceResponse)(nil),                  // 187: live.v21.GetServiceResponse
	nil,                                         // 188: live.v21.StartProjectBroadcastRequest.DynamicSourcesEntry
	(*structpb.Value)(nil),                      // 189: google.protobuf.Value
	(*fieldmaskpb.FieldMask)(nil),               // 190: google.protobuf.FieldMask
	(*timestamppb.Timestamp)(nil),               // 191: google.protobuf.Timestamp
	(structpb.NullValue)(0),                     // 192: google.protobuf.NullValue
	(*httpbody.HttpBody)(nil),                   // 193: google.api.HttpBody
}
var file_live_v21_api_proto_depIdxs = []int32{
	189, // 0: live.v21.BroadcastOriginExternalMetadata.value:type_name -> google.protobuf.Value
	0,   // 1: live.v21.WebhookRequest.broadcast_origin:type_name -> live.v21.BroadcastOrigin
	189, // 2: live.v21.WebhookRequest.broadcast_origin_api_metadata:type_name -> google.protobuf.Value
	21,  // 3: live.v21.WebhookRequest.broadcast_origin_source_metadata:type_name -> live.v21.BroadcastOriginSourceMetadata
	20,  // 4: live.v21.WebhookRequest.broadcast_origin_external_metadata:type_name -> live.v21.BroadcastOriginExternalMetadata
	24,  // 5: live.v21.AccountConfigurationHook.start_broadcast:type_name -> live.v21.WebhookConfiguration
	24,  // 6: live.v21.AccountConfigurationHook.start_webrtc:type_name -> live.v21.WebhookConfiguration
	24,  // 7: live.v21.AccountConfigurationHook.join_webrtc:type_name -> live.v21.WebhookConfiguration
	25,  // 8: live.v21.AccountConfiguration.hooks:type_name -> live.v21.AccountConfigurationHook
	26,  // 9: live.v21.GetAccountConfigurationResponse.account_configuration:type_name -> live.v21.AccountConfiguration
	25,  // 10: live.v21.UpdateAccountConfigurationRequest.hooks:type_name -> live.v21.AccountConfigurationHook
	190, // 11: live.v21.UpdateAccountConfigurationRequest.update_mask:type_name -> google.protobuf.FieldMask
	26,  // 12: live.v21.UpdateAccountConfigurationResponse.account_configuration:type_name -> live.v21.AccountConfiguration
	4,   // 13: live.v21.VideoRendering.color_space:type_name -> live.v21.VideoColorSpace
	5,   // 14: live.v21.AudioRendering.channel_layout:type_name -> live.v21.AudioChannelLayout
	31,  // 15: live.v21.Rendering.video:type_name -> live.v21.VideoRendering
	32,  // 16: live.v21.Rendering.audio:type_name -> live.v21.AudioRendering
	6,   // 17: live.v21.Rendering.quality:type_name -> live.v21.RenderingQuality
	10,  // 18: live.v21.VideoCodecRateControl.mode:type_name -> live.v21.VideoCodecRateControlMode
	7,   // 19: live.v21.VideoEncoding.codec:type_name -> live.v21.VideoCodec
	34,  // 20: live.v21.VideoEncoding.rate_control:type_name -> live.v21.VideoCodecRateControl
	8,   // 21: live.v21.VideoEncoding.profile:type_name -> live.v21.VideoCodecProfile
	9,   // 22: live.v21.AudioEncoding.codec:type_name -> live.v21.AudioCodec
	35,  // 23: live.v21.Encoding.video:type_name -> live.v21.VideoEncoding
	36,  // 24: live.v21.Encoding.audio:type_name -> live.v21.AudioEncoding
	40,  // 25: live.v21.RuntimeSourceAddress.rtmp_pull:type_name -> live.v21.RtmpPullAddress
	41,  // 26: live.v21.RuntimeSourceAddress.srt_pull:type_name -> live.v21.SrtPullAddress
	43,  // 27: live.v21.RuntimeSourceAddress.direct_rtmp_push:type_name -> live.v21.DirectRTMPAddress
	44,  // 28: live.v21.RuntimeSourceAddress.direct_srt_push:type_name -> live.v21.DirectSrtAddress
	38,  // 29: live.v21.SourceAddress.rtmp_push:type_name -> live.v21.SourceRtmpPushAddress
	39,  // 30: live.v21.SourceAddress.srt_push:type_name -> live.v21.SrtPushAddress
	40,  // 31: live.v21.SourceAddress.rtmp_pull:type_name -> live.v21.RtmpPullAddress
	41,  // 32: live.v21.SourceAddress.srt_pull:type_name -> live.v21.SrtPullAddress
	42,  // 33: live.v21.SourceAddress.dynamic:type_name -> live.v21.DynamicAddress
	51,  // 34: live.v21.HlsLifecycle.vod:type_name -> live.v21.HlsLifecycleVod
	50,  // 35: live.v21.HlsLifecycle.live:type_name -> live.v21.HlsLifecycleLive
	52,  // 36: live.v21.HlsPackaging.lifecycle:type_name -> live.v21.HlsLifecycle
	53,  // 37: live.v21.ObjectStoragePackaging.hls:type_name -> live.v21.HlsPackaging
	12,  // 38: live.v21.S3StorageAddress.acl:type_name -> live.v21.S3ACL
	54,  // 39: live.v21.S3StorageAddress.packaging:type_name -> live.v21.ObjectStoragePackaging
	47,  // 40: live.v21.DestinationAddress.rtmp_push:type_name -> live.v21.DestinationRtmpPushAddress
	49,  // 41: live.v21.DestinationAddress.agora:type_name -> live.v21.DestinationAgoraPushAddress
	56,  // 42: live.v21.DestinationAddress.s3_storage:type_name -> live.v21.S3StorageAddress
	48,  // 43: live.v21.DestinationAddress.srt_push:type_name -> live.v21.DestinationSrtPushAddress
	55,  // 44: live.v21.DestinationAddress.webrtc_preview:type_name -> live.v21.PreviewWebRtcAddress
	13,  // 45: live.v21.SourceTrigger.start:type_name -> live.v21.SourceTriggerAction
	13,  // 46: live.v21.SourceTrigger.stop:type_name -> live.v21.SourceTriggerAction
	13,  // 47: live.v21.WebRtcTrigger.stop:type_name -> live.v21.SourceTriggerAction
	58,  // 48: live.v21.ProjectTrigger.source:type_name -> live.v21.SourceTrigger
	55,  // 49: live.v21.PreviewAddress.webrtc:type_name -> live.v21.PreviewWebRtcAddress
	66,  // 50: live.v21.Composition.external:type_name -> live.v21.ExternalComposition
	63,  // 51: live.v21.Composition.studio_sdk:type_name -> live.v21.StudioSdkComposition
	64,  // 52: live.v21.Composition.studio_renderer:type_name -> live.v21.StudioRendererComposition
	65,  // 53: live.v21.Composition.scene:type_name -> live.v21.SceneComposition
	68,  // 54: live.v21.WebRtc.hosted:type_name -> live.v21.HostedWebRtc
	38,  // 55: live.v21.DirectIngestUrl.rtmp_push:type_name -> live.v21.SourceRtmpPushAddress
	39,  // 56: live.v21.DirectIngestUrl.srt_push:type_name -> live.v21.SrtPushAddress
	191, // 57: live.v21.ProjectBroadcastStatus.start:type_name -> google.protobuf.Timestamp
	191, // 58: live.v21.ProjectBroadcastStatus.stop:type_name -> google.protobuf.Timestamp
	11,  // 59: live.v21.ProjectBroadcastStatus.phase:type_name -> live.v21.ProjectBroadcastPhase
	14,  // 60: live.v21.ProjectBroadcastStatus.region:type_name -> live.v21.Region
	72,  // 61: live.v21.ProjectBroadcastStatus.direct_ingests:type_name -> live.v21.DirectIngestUrl
	0,   // 62: live.v21.ProjectBroadcastStatus.origin:type_name -> live.v21.BroadcastOrigin
	189, // 63: live.v21.ProjectBroadcastStatus.origin_api_metadata:type_name -> google.protobuf.Value
	21,  // 64: live.v21.ProjectBroadcastStatus.origin_source_metadata:type_name -> live.v21.BroadcastOriginSourceMetadata
	20,  // 65: live.v21.ProjectBroadcastStatus.origin_external_metadata:type_name -> live.v21.BroadcastOriginExternalMetadata
	189, // 66: live.v21.Source.metadata:type_name -> google.protobuf.Value
	62,  // 67: live.v21.Source.preview:type_name -> live.v21.PreviewAddress
	46,  // 68: live.v21.Source.address:type_name -> live.v21.SourceAddress
	189, // 69: live.v21.Destination.metadata:type_name -> google.protobuf.Value
	57,  // 70: live.v21.Destination.address:type_name -> live.v21.DestinationAddress
	189, // 71: live.v21.Project.metadata:type_name -> google.protobuf.Value
	33,  // 72: live.v21.Project.rendering:type_name -> live.v21.Rendering
	37,  // 73: live.v21.Project.encoding:type_name -> live.v21.Encoding
	74,  // 74: live.v21.Project.sources:type_name -> live.v21.Source
	75,  // 75: live.v21.Project.destinations:type_name -> live.v21.Destination
	67,  // 76: live.v21.Project.composition:type_name -> live.v21.Composition
	69,  // 77: live.v21.Project.webrtc:type_name -> live.v21.WebRtc
	60,  // 78: live.v21.Project.triggers:type_name -> live.v21.ProjectTrigger
	71,  // 79: live.v21.Project.location:type_name -> live.v21.LatLong
	189, // 80: live.v21.Collection.metadata:type_name -> google.protobuf.Value
	76,  // 81: live.v21.Collection.projects:type_name -> live.v21.Project
	74,  // 82: live.v21.Collection.sources:type_name -> live.v21.Source
	189, // 83: live.v21.CreateCollectionRequest.metadata:type_name -> google.protobuf.Value
	77,  // 84: live.v21.CreateCollectionResponse.collection:type_name -> live.v21.Collection
	77,  // 85: live.v21.GetCollectionResponse.collection:type_name -> live.v21.Collection
	190, // 86: live.v21.UpdateCollectionRequest.update_mask:type_name -> google.protobuf.FieldMask
	189, // 87: live.v21.UpdateCollectionRequest.metadata:type_name -> google.protobuf.Value
	77,  // 88: live.v21.UpdateCollectionResponse.collection:type_name -> live.v21.Collection
	77,  // 89: live.v21.GetCollectionsResponse.collections:type_name -> live.v21.Collection
	189, // 90: live.v21.CreateProjectRequest.metadata:type_name -> google.protobuf.Value
	33,  // 91: live.v21.CreateProjectRequest.rendering:type_name -> live.v21.Rendering
	37,  // 92: live.v21.CreateProjectRequest.encoding:type_name -> live.v21.Encoding
	67,  // 93: live.v21.CreateProjectRequest.composition:type_name -> live.v21.Composition
	69,  // 94: live.v21.CreateProjectRequest.webrtc:type_name -> live.v21.WebRtc
	71,  // 95: live.v21.CreateProjectRequest.location:type_name -> live.v21.LatLong
	76,  // 96: live.v21.CreateProjectResponse.project:type_name -> live.v21.Project
	190, // 97: live.v21.UpdateProjectRequest.update_mask:type_name -> google.protobuf.FieldMask
	189, // 98: live.v21.UpdateProjectRequest.metadata:type_name -> google.protobuf.Value
	33,  // 99: live.v21.UpdateProjectRequest.rendering:type_name -> live.v21.Rendering
	37,  // 100: live.v21.UpdateProjectRequest.encoding:type_name -> live.v21.Encoding
	67,  // 101: live.v21.UpdateProjectRequest.composition:type_name -> live.v21.Composition
	69,  // 102: live.v21.UpdateProjectRequest.webrtc:type_name -> live.v21.WebRtc
	71,  // 103: live.v21.UpdateProjectRequest.location:type_name -> live.v21.LatLong
	76,  // 104: live.v21.UpdateProjectResponse.project:type_name -> live.v21.Project
	188, // 105: live.v21.StartProjectBroadcastRequest.dynamic_sources:type_name -> live.v21.StartProjectBroadcastRequest.DynamicSourcesEntry
	189, // 106: live.v21.StartProjectBroadcastRequest.request_metadata:type_name -> google.protobuf.Value
	76,  // 107: live.v21.GetProjectResponse.project:type_name -> live.v21.Project
	73,  // 108: live.v21.GetProjectResponse.status:type_name -> live.v21.ProjectBroadcastStatus
	3,   // 109: live.v21.GetProjectBroadcastSnapshotRequest.format:type_name -> live.v21.ImageFormat
	3,   // 110: live.v21.GetProjectBroadcastSnapshotResponse.format:type_name -> live.v21.ImageFormat
	73,  // 111: live.v21.GetProjectBroadcastStatusResponse.status:type_name -> live.v21.ProjectBroadcastStatus
	189, // 112: live.v21.CreateDestinationRequest.metadata:type_name -> google.protobuf.Value
	57,  // 113: live.v21.CreateDestinationRequest.address:type_name -> live.v21.DestinationAddress
	75,  // 114: live.v21.CreateDestinationResponse.destination:type_name -> live.v21.Destination
	75,  // 115: live.v21.GetDestinationResponse.destination:type_name -> live.v21.Destination
	190, // 116: live.v21.UpdateDestinationRequest.update_mask:type_name -> google.protobuf.FieldMask
	189, // 117: live.v21.UpdateDestinationRequest.metadata:type_name -> google.protobuf.Value
	57,  // 118: live.v21.UpdateDestinationRequest.address:type_name -> live.v21.DestinationAddress
	75,  // 119: live.v21.UpdateDestinationResponse.destination:type_name -> live.v21.Destination
	189, // 120: live.v21.CreateSourceRequest.metadata:type_name -> google.protobuf.Value
	46,  // 121: live.v21.CreateSourceRequest.address:type_name -> live.v21.SourceAddress
	62,  // 122: live.v21.CreateSourceRequest.preview:type_name -> live.v21.PreviewAddress
	74,  // 123: live.v21.CreateSourceResponse.source:type_name -> live.v21.Source
	58,  // 124: live.v21.AddSourceToProjectRequest.trigger:type_name -> live.v21.SourceTrigger
	76,  // 125: live.v21.AddSourceToProjectResponse.project:type_name -> live.v21.Project
	190, // 126: live.v21.UpdateSourceInProjectRequest.update_mask:type_name -> google.protobuf.FieldMask
	58,  // 127: live.v21.UpdateSourceInProjectRequest.trigger:type_name -> live.v21.SourceTrigger
	76,  // 128: live.v21.UpdateSourceInProjectResponse.project:type_name -> live.v21.Project
	74,  // 129: live.v21.GetSourceResponse.source:type_name -> live.v21.Source
	74,  // 130: live.v21.GetSourcesResponse.sources:type_name -> live.v21.Source
	190, // 131: live.v21.UpdateSourceRequest.update_mask:type_name -> google.protobuf.FieldMask
	189, // 132: live.v21.UpdateSourceRequest.metadata:type_name -> google.protobuf.Value
	46,  // 133: live.v21.UpdateSourceRequest.address:type_name -> live.v21.SourceAddress
	62,  // 134: live.v21.UpdateSourceRequest.preview:type_name -> live.v21.PreviewAddress
	74,  // 135: live.v21.UpdateSourceResponse.source:type_name -> live.v21.Source
	76,  // 136: live.v21.RemoveSourceFromProjectResponse.project:type_name -> live.v21.Project
	15,  // 137: live.v21.CreateAccessTokenRequest.role:type_name -> live.v21.Role
	138, // 138: live.v21.GuestAccessToken.direct:type_name -> live.v21.GuestAccessTokenDirect
	139, // 139: live.v21.GuestAccessToken.exchange:type_name -> live.v21.GuestAccessTokenExchange
	15,  // 140: live.v21.CreateGuestAccessTokenRequest.role:type_name -> live.v21.Role
	140, // 141: live.v21.CreateGuestAccessTokenRequest.token:type_name -> live.v21.GuestAccessToken
	70,  // 142: live.v21.CreateWebRtcAccessTokenResponse.webrtc_access:type_name -> live.v21.WebRtcAccess
	15,  // 143: live.v21.IssuedGuestCode.role:type_name -> live.v21.Role
	140, // 144: live.v21.IssuedGuestCode.token:type_name -> live.v21.GuestAccessToken
	15,  // 145: live.v21.CreateGuestCodeRequest.role:type_name -> live.v21.Role
	140, // 146: live.v21.CreateGuestCodeRequest.token:type_name -> live.v21.GuestAccessToken
	149, // 147: live.v21.CreateGuestCodeResponse.guest_code:type_name -> live.v21.IssuedGuestCode
	149, // 148: live.v21.GetGuestCodeResponse.guest_code:type_name -> live.v21.IssuedGuestCode
	15,  // 149: live.v21.GetGuestCodesRequest.role:type_name -> live.v21.Role
	149, // 150: live.v21.GetGuestCodesResponse.guest_codes:type_name -> live.v21.IssuedGuestCode
	158, // 151: live.v21.GetJsonWebKeySetResponse.keys:type_name -> live.v21.JsonWebKey
	75,  // 152: live.v21.DestinationCreateEvent.destination:type_name -> live.v21.Destination
	75,  // 153: live.v21.DestinationUpdateEvent.destination:type_name -> live.v21.Destination
	17,  // 154: live.v21.DestinationStateEvent.connect:type_name -> live.v21.ConnectState
	76,  // 155: live.v21.ProjectCreateEvent.project:type_name -> live.v21.Project
	76,  // 156: live.v21.ProjectUpdateEvent.project:type_name -> live.v21.Project
	11,  // 157: live.v21.ProjectBroadcastStateEvent.phase:type_name -> live.v21.ProjectBroadcastPhase
	16,  // 158: live.v21.ProjectBroadcastStateEvent.error:type_name -> live.v21.ProjectBroadcastError
	77,  // 159: live.v21.CollectionCreateEvent.collection:type_name -> live.v21.Collection
	77,  // 160: live.v21.CollectionUpdateEvent.collection:type_name -> live.v21.Collection
	74,  // 161: live.v21.SourceCreateEvent.source:type_name -> live.v21.Source
	74,  // 162: live.v21.SourceUpdateEvent.source:type_name -> live.v21.Source
	74,  // 163: live.v21.SourceAddEvent.source:type_name -> live.v21.Source
	17,  // 164: live.v21.SourceStateEvent.connect:type_name -> live.v21.ConnectState
	171, // 165: live.v21.CollectionEvent.create:type_name -> live.v21.CollectionCreateEvent
	173, // 166: live.v21.CollectionEvent.update:type_name -> live.v21.CollectionUpdateEvent
	172, // 167: live.v21.CollectionEvent.delete:type_name -> live.v21.CollectionDeleteEvent
	163, // 168: live.v21.DestinationEvent.create:type_name -> live.v21.DestinationCreateEvent
	165, // 169: live.v21.DestinationEvent.update:type_name -> live.v21.DestinationUpdateEvent
	164, // 170: live.v21.DestinationEvent.delete:type_name -> live.v21.DestinationDeleteEvent
	166, // 171: live.v21.DestinationEvent.state:type_name -> live.v21.DestinationStateEvent
	167, // 172: live.v21.ProjectEvent.create:type_name -> live.v21.ProjectCreateEvent
	169, // 173: live.v21.ProjectEvent.update:type_name -> live.v21.ProjectUpdateEvent
	168, // 174: live.v21.ProjectEvent.delete:type_name -> live.v21.ProjectDeleteEvent
	170, // 175: live.v21.ProjectEvent.state:type_name -> live.v21.ProjectBroadcastStateEvent
	174, // 176: live.v21.SourceEvent.create:type_name -> live.v21.SourceCreateEvent
	176, // 177: live.v21.SourceEvent.update:type_name -> live.v21.SourceUpdateEvent
	175, // 178: live.v21.SourceEvent.delete:type_name -> live.v21.SourceDeleteEvent
	177, // 179: live.v21.SourceEvent.add:type_name -> live.v21.SourceAddEvent
	178, // 180: live.v21.SourceEvent.remove:type_name -> live.v21.SourceRemoveEvent
	179, // 181: live.v21.SourceEvent.state:type_name -> live.v21.SourceStateEvent
	180, // 182: live.v21.LiveEvent.collection:type_name -> live.v21.CollectionEvent
	181, // 183: live.v21.LiveEvent.destination:type_name -> live.v21.DestinationEvent
	182, // 184: live.v21.LiveEvent.project:type_name -> live.v21.ProjectEvent
	183, // 185: live.v21.LiveEvent.source:type_name -> live.v21.SourceEvent
	192, // 186: live.v21.LiveEvent.unspecified:type_name -> google.protobuf.NullValue
	186, // 187: live.v21.GetServiceResponse.service:type_name -> live.v21.Service
	45,  // 188: live.v21.StartProjectBroadcastRequest.DynamicSourcesEntry.value:type_name -> live.v21.RuntimeSourceAddress
	27,  // 189: live.v21.AccountConfigurationService.GetAccountConfiguration:input_type -> live.v21.GetAccountConfigurationRequest
	29,  // 190: live.v21.AccountConfigurationService.UpdateAccountConfiguration:input_type -> live.v21.UpdateAccountConfigurationRequest
	78,  // 191: live.v21.CollectionService.CreateCollection:input_type -> live.v21.CreateCollectionRequest
	80,  // 192: live.v21.CollectionService.GetCollection:input_type -> live.v21.GetCollectionRequest
	86,  // 193: live.v21.CollectionService.GetCollections:input_type -> live.v21.GetCollectionsRequest
	82,  // 194: live.v21.CollectionService.UpdateCollection:input_type -> live.v21.UpdateCollectionRequest
	84,  // 195: live.v21.CollectionService.DeleteCollection:input_type -> live.v21.DeleteCollectionRequest
	88,  // 196: live.v21.ProjectService.CreateProject:input_type -> live.v21.CreateProjectRequest
	98,  // 197: live.v21.ProjectService.GetProject:input_type -> live.v21.GetProjectRequest
	92,  // 198: live.v21.ProjectService.DeleteProject:input_type -> live.v21.DeleteProjectRequest
	90,  // 199: live.v21.ProjectService.UpdateProject:input_type -> live.v21.UpdateProjectRequest
	94,  // 200: live.v21.ProjectService.StartProjectBroadcast:input_type -> live.v21.StartProjectBroadcastRequest
	96,  // 201: live.v21.ProjectService.StopProjectBroadcast:input_type -> live.v21.StopProjectBroadcastRequest
	104, // 202: live.v21.ProjectService.StartProjectWebRtc:input_type -> live.v21.StartProjectWebRtcRequest
	106, // 203: live.v21.ProjectService.StopProjectWebRtc:input_type -> live.v21.StopProjectWebRtcRequest
	100, // 204: live.v21.ProjectService.GetProjectBroadcastSnapshot:input_type -> live.v21.GetProjectBroadcastSnapshotRequest
	102, // 205: live.v21.ProjectService.GetProjectBroadcastStatus:input_type -> live.v21.GetProjectBroadcastStatusRequest
	108, // 206: live.v21.DestinationService.CreateDestination:input_type -> live.v21.CreateDestinationRequest
	110, // 207: live.v21.DestinationService.GetDestination:input_type -> live.v21.GetDestinationRequest
	114, // 208: live.v21.DestinationService.UpdateDestination:input_type -> live.v21.UpdateDestinationRequest
	112, // 209: live.v21.DestinationService.DeleteDestination:input_type -> live.v21.DeleteDestinationRequest
	116, // 210: live.v21.SourceService.CreateSource:input_type -> live.v21.CreateSourceRequest
	118, // 211: live.v21.SourceService.DeleteSource:input_type -> live.v21.DeleteSourceRequest
	128, // 212: live.v21.SourceService.UpdateSource:input_type -> live.v21.UpdateSourceRequest
	122, // 213: live.v21.SourceService.UpdateSourceInProject:input_type -> live.v21.UpdateSourceInProjectRequest
	124, // 214: live.v21.SourceService.GetSource:input_type -> live.v21.GetSourceRequest
	126, // 215: live.v21.SourceService.GetSources:input_type -> live.v21.GetSourcesRequest
	120, // 216: live.v21.SourceService.AddSourceToProject:input_type -> live.v21.AddSourceToProjectRequest
	130, // 217: live.v21.SourceService.RemoveSourceFromProject:input_type -> live.v21.RemoveSourceFromProjectRequest
	132, // 218: live.v21.SourceService.GetSourcePlaylist:input_type -> live.v21.GetSourcePlaylistRequest
	134, // 219: live.v21.BackendAuthenticationService.CreateAccessToken:input_type -> live.v21.CreateAccessTokenRequest
	136, // 220: live.v21.BackendAuthenticationService.LookupGuestCode:input_type -> live.v21.LookupGuestCodeRequest
	141, // 221: live.v21.AuthenticationService.CreateGuestAccessToken:input_type -> live.v21.CreateGuestAccessTokenRequest
	145, // 222: live.v21.AuthenticationService.RefreshAccessToken:input_type -> live.v21.RefreshAccessTokenRequest
	143, // 223: live.v21.AuthenticationService.CreateWebRtcAccessToken:input_type -> live.v21.CreateWebRtcAccessTokenRequest
	150, // 224: live.v21.AuthenticationService.CreateGuestCode:input_type -> live.v21.CreateGuestCodeRequest
	152, // 225: live.v21.AuthenticationService.GetGuestCode:input_type -> live.v21.GetGuestCodeRequest
	154, // 226: live.v21.AuthenticationService.GetGuestCodes:input_type -> live.v21.GetGuestCodesRequest
	156, // 227: live.v21.AuthenticationService.DeleteGuestCode:input_type -> live.v21.DeleteGuestCodeRequest
	159, // 228: live.v21.PublicAuthenticationService.GetJsonWebKeySet:input_type -> live.v21.GetJsonWebKeySetRequest
	147, // 229: live.v21.PublicAuthenticationService.GuestCodeRedirect:input_type -> live.v21.GuestCodeRedirectRequest
	185, // 230: live.v21.AccountService.GetService:input_type -> live.v21.GetServiceRequest
	28,  // 231: live.v21.AccountConfigurationService.GetAccountConfiguration:output_type -> live.v21.GetAccountConfigurationResponse
	30,  // 232: live.v21.AccountConfigurationService.UpdateAccountConfiguration:output_type -> live.v21.UpdateAccountConfigurationResponse
	79,  // 233: live.v21.CollectionService.CreateCollection:output_type -> live.v21.CreateCollectionResponse
	81,  // 234: live.v21.CollectionService.GetCollection:output_type -> live.v21.GetCollectionResponse
	87,  // 235: live.v21.CollectionService.GetCollections:output_type -> live.v21.GetCollectionsResponse
	83,  // 236: live.v21.CollectionService.UpdateCollection:output_type -> live.v21.UpdateCollectionResponse
	85,  // 237: live.v21.CollectionService.DeleteCollection:output_type -> live.v21.DeleteCollectionResponse
	89,  // 238: live.v21.ProjectService.CreateProject:output_type -> live.v21.CreateProjectResponse
	99,  // 239: live.v21.ProjectService.GetProject:output_type -> live.v21.GetProjectResponse
	93,  // 240: live.v21.ProjectService.DeleteProject:output_type -> live.v21.DeleteProjectResponse
	91,  // 241: live.v21.ProjectService.UpdateProject:output_type -> live.v21.UpdateProjectResponse
	95,  // 242: live.v21.ProjectService.StartProjectBroadcast:output_type -> live.v21.StartProjectBroadcastResponse
	97,  // 243: live.v21.ProjectService.StopProjectBroadcast:output_type -> live.v21.StopProjectBroadcastResponse
	105, // 244: live.v21.ProjectService.StartProjectWebRtc:output_type -> live.v21.StartProjectWebRtcResponse
	107, // 245: live.v21.ProjectService.StopProjectWebRtc:output_type -> live.v21.StopProjectWebRtcResponse
	101, // 246: live.v21.ProjectService.GetProjectBroadcastSnapshot:output_type -> live.v21.GetProjectBroadcastSnapshotResponse
	103, // 247: live.v21.ProjectService.GetProjectBroadcastStatus:output_type -> live.v21.GetProjectBroadcastStatusResponse
	109, // 248: live.v21.DestinationService.CreateDestination:output_type -> live.v21.CreateDestinationResponse
	111, // 249: live.v21.DestinationService.GetDestination:output_type -> live.v21.GetDestinationResponse
	115, // 250: live.v21.DestinationService.UpdateDestination:output_type -> live.v21.UpdateDestinationResponse
	113, // 251: live.v21.DestinationService.DeleteDestination:output_type -> live.v21.DeleteDestinationResponse
	117, // 252: live.v21.SourceService.CreateSource:output_type -> live.v21.CreateSourceResponse
	119, // 253: live.v21.SourceService.DeleteSource:output_type -> live.v21.DeleteSourceResponse
	129, // 254: live.v21.SourceService.UpdateSource:output_type -> live.v21.UpdateSourceResponse
	123, // 255: live.v21.SourceService.UpdateSourceInProject:output_type -> live.v21.UpdateSourceInProjectResponse
	125, // 256: live.v21.SourceService.GetSource:output_type -> live.v21.GetSourceResponse
	127, // 257: live.v21.SourceService.GetSources:output_type -> live.v21.GetSourcesResponse
	121, // 258: live.v21.SourceService.AddSourceToProject:output_type -> live.v21.AddSourceToProjectResponse
	131, // 259: live.v21.SourceService.RemoveSourceFromProject:output_type -> live.v21.RemoveSourceFromProjectResponse
	193, // 260: live.v21.SourceService.GetSourcePlaylist:output_type -> google.api.HttpBody
	135, // 261: live.v21.BackendAuthenticationService.CreateAccessToken:output_type -> live.v21.CreateAccessTokenResponse
	137, // 262: live.v21.BackendAuthenticationService.LookupGuestCode:output_type -> live.v21.LookupGuestCodeResponse
	142, // 263: live.v21.AuthenticationService.CreateGuestAccessToken:output_type -> live.v21.CreateGuestAccessTokenResponse
	146, // 264: live.v21.AuthenticationService.RefreshAccessToken:output_type -> live.v21.RefreshAccessTokenResponse
	144, // 265: live.v21.AuthenticationService.CreateWebRtcAccessToken:output_type -> live.v21.CreateWebRtcAccessTokenResponse
	151, // 266: live.v21.AuthenticationService.CreateGuestCode:output_type -> live.v21.CreateGuestCodeResponse
	153, // 267: live.v21.AuthenticationService.GetGuestCode:output_type -> live.v21.GetGuestCodeResponse
	155, // 268: live.v21.AuthenticationService.GetGuestCodes:output_type -> live.v21.GetGuestCodesResponse
	157, // 269: live.v21.AuthenticationService.DeleteGuestCode:output_type -> live.v21.DeleteGuestCodeResponse
	160, // 270: live.v21.PublicAuthenticationService.GetJsonWebKeySet:output_type -> live.v21.GetJsonWebKeySetResponse
	148, // 271: live.v21.PublicAuthenticationService.GuestCodeRedirect:output_type -> live.v21.GuestCodeRedirectResponse
	187, // 272: live.v21.AccountService.GetService:output_type -> live.v21.GetServiceResponse
	231, // [231:273] is the sub-list for method output_type
	189, // [189:231] is the sub-list for method input_type
	189, // [189:189] is the sub-list for extension type_name
	189, // [189:189] is the sub-list for extension extendee
	0,   // [0:189] is the sub-list for field type_name
}

func init() { file_live_v21_api_proto_init() }
func file_live_v21_api_proto_init() {
	if File_live_v21_api_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_live_v21_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BroadcastOriginExternalMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BroadcastOriginSourceMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebhookRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebhookResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebhookConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountConfigurationHook); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAccountConfigurationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAccountConfigurationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAccountConfigurationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAccountConfigurationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoRendering); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AudioRendering); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rendering); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoCodecRateControl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoEncoding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AudioEncoding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Encoding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SourceRtmpPushAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SrtPushAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RtmpPullAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SrtPullAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DynamicAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DirectRTMPAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DirectSrtAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuntimeSourceAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SourceAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestinationRtmpPushAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestinationSrtPushAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestinationAgoraPushAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HlsLifecycleLive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HlsLifecycleVod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HlsLifecycle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HlsPackaging); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectStoragePackaging); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreviewWebRtcAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S3StorageAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestinationAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SourceTrigger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebRtcTrigger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectTrigger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreviewHlsPullAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreviewAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StudioSdkComposition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StudioRendererComposition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SceneComposition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalComposition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Composition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostedWebRtc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebRtc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebRtcAccess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LatLong); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DirectIngestUrl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectBroadcastStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Source); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Destination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Project); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Collection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCollectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCollectionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCollectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCollectionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCollectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCollectionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCollectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCollectionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCollectionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCollectionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateProjectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProjectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteProjectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartProjectBroadcastRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartProjectBroadcastResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopProjectBroadcastRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopProjectBroadcastResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProjectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProjectBroadcastSnapshotRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProjectBroadcastSnapshotResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProjectBroadcastStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProjectBroadcastStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartProjectWebRtcRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartProjectWebRtcResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopProjectWebRtcRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopProjectWebRtcResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDestinationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDestinationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDestinationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDestinationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDestinationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDestinationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDestinationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDestinationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSourceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSourceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddSourceToProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddSourceToProjectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSourceInProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSourceInProjectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSourceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSourcesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSourcesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSourceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveSourceFromProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveSourceFromProjectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSourcePlaylistRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSourcePlaylistResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAccessTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAccessTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LookupGuestCodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LookupGuestCodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuestAccessTokenDirect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuestAccessTokenExchange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuestAccessToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGuestAccessTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGuestAccessTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateWebRtcAccessTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateWebRtcAccessTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshAccessTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshAccessTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuestCodeRedirectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuestCodeRedirectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssuedGuestCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGuestCodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGuestCodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGuestCodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGuestCodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGuestCodesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGuestCodesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteGuestCodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteGuestCodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JsonWebKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetJsonWebKeySetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetJsonWebKeySetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTestTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTestTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestinationCreateEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestinationDeleteEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestinationUpdateEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestinationStateEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectCreateEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectDeleteEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectUpdateEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectBroadcastStateEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionCreateEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionDeleteEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionUpdateEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SourceCreateEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SourceDeleteEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SourceUpdateEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SourceAddEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SourceRemoveEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SourceStateEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestinationEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SourceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Service); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_v21_api_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServiceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_live_v21_api_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*WebhookRequest_BroadcastOriginApiMetadata)(nil),
		(*WebhookRequest_BroadcastOriginSourceMetadata)(nil),
		(*WebhookRequest_BroadcastOriginExternalMetadata)(nil),
	}
	file_live_v21_api_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_live_v21_api_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_live_v21_api_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_live_v21_api_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_live_v21_api_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_live_v21_api_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_live_v21_api_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_live_v21_api_proto_msgTypes[14].OneofWrappers = []interface{}{}
	file_live_v21_api_proto_msgTypes[15].OneofWrappers = []interface{}{}
	file_live_v21_api_proto_msgTypes[16].OneofWrappers = []interface{}{}
	file_live_v21_api_proto_msgTypes[17].OneofWrappers = []interface{}{}
	file_live_v21_api_proto_msgTypes[18].OneofWrappers = []interface{}{}
	file_live_v21_api_proto_msgTypes[19].OneofWrappers = []interface{}{}
	file_live_v21_api_proto_msgTypes[22].OneofWrappers = []interface{}{}
	file_live_v21_api_proto_msgTypes[23].OneofWrappers = []interface{}{}
	file_live_v21_api_proto_msgTypes[24].OneofWrappers = []interface{}{}
	file_live_v21_api_proto_msgTypes[25].OneofWrappers = []interface{}{
		(*RuntimeSourceAddress_RtmpPull)(nil),
		(*RuntimeSourceAddress_SrtPull)(nil),
		(*RuntimeSourceAddress_DirectRtmpPush)(nil),
		(*RuntimeSourceAddress_DirectSrtPush)(nil),
	}
	file_live_v21_api_proto_msgTypes[26].OneofWrappers = []interface{}{
		(*SourceAddress_RtmpPush)(nil),
		(*SourceAddress_SrtPush)(nil),
		(*SourceAddress_RtmpPull)(nil),
		(*SourceAddress_SrtPull)(nil),
		(*SourceAddress_Dynamic)(nil),
	}
	file_live_v21_api_proto_msgTypes[27].OneofWrappers = []interface{}{}
	file_live_v21_api_proto_msgTypes[30].OneofWrappers = []interface{}{}
	file_live_v21_api_proto_msgTypes[31].OneofWrappers = []interface{}{}
	file_live_v21_api_proto_msgTypes[32].OneofWrappers = []interface{}{
		(*HlsLifecycle_Vod)(nil),
		(*HlsLifecycle_Live)(nil),
	}
	file_live_v21_api_proto_msgTypes[33].OneofWrappers = []interface{}{}
	file_live_v21_api_proto_msgTypes[34].OneofWrappers = []interface{}{
		(*ObjectStoragePackaging_Hls)(nil),
	}
	file_live_v21_api_proto_msgTypes[35].OneofWrappers = []interface{}{}
	file_live_v21_api_proto_msgTypes[36].OneofWrappers = []interface{}{}
	file_live_v21_api_proto_msgTypes[37].OneofWrappers = []interface{}{
		(*DestinationAddress_RtmpPush)(nil),
		(*DestinationAddress_Agora)(nil),
		(*DestinationAddress_S3Storage)(nil),
		(*DestinationAddress_SrtPush)(nil),
		(*DestinationAddress_WebrtcPreview)(nil),
	}
	file_live_v21_api_proto_msgTypes[38].OneofWrappers = []interface{}{}
	file_live_v21_api_proto_msgTypes[39].OneofWrappers = []interface{}{}
	file_live_v21_api_proto_msgTypes[40].OneofWrappers = []interface{}{
		(*ProjectTrigger_Source)(nil),
	}
	file_live_v21_api_proto_msgTypes[41].OneofWrappers = []interface{}{}
	file_live_v21_api_proto_msgTypes[42].OneofWrappers = []interface{}{}
	file_live_v21_api_proto_msgTypes[43].OneofWrappers = []interface{}{}
	file_live_v21_api_proto_msgTypes[44].OneofWrappers = []interface{}{}
	file_live_v21_api_proto_msgTypes[45].OneofWrappers = []interface{}{}
	file_live_v21_api_proto_msgTypes[47].OneofWrappers = []interface{}{
		(*Composition_External)(nil),
		(*Composition_StudioSdk)(nil),
		(*Composition_StudioRenderer)(nil),
		(*Composition_Scene)(nil),
	}
	file_live_v21_api_proto_msgTypes[48].OneofWrappers = []interface{}{}
	file_live_v21_api_proto_msgTypes[49].OneofWrappers = []interface{}{
		(*WebRtc_Hosted)(nil),
	}
	file_live_v21_api_proto_msgTypes[50].OneofWrappers = []interface{}{}
	file_live_v21_api_proto_msgTypes[52].OneofWrappers = []interface{}{
		(*DirectIngestUrl_RtmpPush)(nil),
		(*DirectIngestUrl_SrtPush)(nil),
	}
	file_live_v21_api_proto_msgTypes[53].OneofWrappers = []interface{}{
		(*ProjectBroadcastStatus_OriginApiMetadata)(nil),
		(*ProjectBroadcastStatus_OriginSourceMetadata)(nil),
		(*ProjectBroadcastStatus_OriginExternalMetadata)(nil),
	}
	file_live_v21_api_proto_msgTypes[54].OneofWrappers = []interface{}{}
	file_live_v21_api_proto_msgTypes[55].OneofWrappers = []interface{}{}
	file_live_v21_api_proto_msgTypes[56].OneofWrappers = []interface{}{}
	file_live_v21_api_proto_msgTypes[57].OneofWrappers = []interface{}{}
	file_live_v21_api_proto_msgTypes[58].OneofWrappers = []interface{}{}
	file_live_v21_api_proto_msgTypes[60].OneofWrappers = []interface{}{}
	file_live_v21_api_proto_msgTypes[62].OneofWrappers = []interface{}{}
	file_live_v21_api_proto_msgTypes[64].OneofWrappers = []interface{}{}
	file_live_v21_api_proto_msgTypes[68].OneofWrappers = []interface{}{}
	file_live_v21_api_proto_msgTypes[70].OneofWrappers = []interface{}{}
	file_live_v21_api_proto_msgTypes[72].OneofWrappers = []interface{}{}
	file_live_v21_api_proto_msgTypes[74].OneofWrappers = []interface{}{}
	file_live_v21_api_proto_msgTypes[76].OneofWrappers = []interface{}{}
	file_live_v21_api_proto_msgTypes[78].OneofWrappers = []interface{}{}
	file_live_v21_api_proto_msgTypes[79].OneofWrappers = []interface{}{}
	file_live_v21_api_proto_msgTypes[80].OneofWrappers = []interface{}{}
	file_live_v21_api_proto_msgTypes[88].OneofWrappers = []interface{}{}
	file_live_v21_api_proto_msgTypes[92].OneofWrappers = []interface{}{}
	file_live_v21_api_proto_msgTypes[94].OneofWrappers = []interface{}{}
	file_live_v21_api_proto_msgTypes[96].OneofWrappers = []interface{}{}
	file_live_v21_api_proto_msgTypes[98].OneofWrappers = []interface{}{}
	file_live_v21_api_proto_msgTypes[100].OneofWrappers = []interface{}{}
	file_live_v21_api_proto_msgTypes[102].OneofWrappers = []interface{}{}
	file_live_v21_api_proto_msgTypes[108].OneofWrappers = []interface{}{}
	file_live_v21_api_proto_msgTypes[110].OneofWrappers = []interface{}{}
	file_live_v21_api_proto_msgTypes[112].OneofWrappers = []interface{}{}
	file_live_v21_api_proto_msgTypes[114].OneofWrappers = []interface{}{}
	file_live_v21_api_proto_msgTypes[118].OneofWrappers = []interface{}{}
	file_live_v21_api_proto_msgTypes[119].OneofWrappers = []interface{}{}
	file_live_v21_api_proto_msgTypes[120].OneofWrappers = []interface{}{
		(*GuestAccessToken_Direct)(nil),
		(*GuestAccessToken_Exchange)(nil),
	}
	file_live_v21_api_proto_msgTypes[121].OneofWrappers = []interface{}{}
	file_live_v21_api_proto_msgTypes[122].OneofWrappers = []interface{}{}
	file_live_v21_api_proto_msgTypes[129].OneofWrappers = []interface{}{}
	file_live_v21_api_proto_msgTypes[130].OneofWrappers = []interface{}{}
	file_live_v21_api_proto_msgTypes[134].OneofWrappers = []interface{}{}
	file_live_v21_api_proto_msgTypes[146].OneofWrappers = []interface{}{
		(*DestinationStateEvent_Connect)(nil),
	}
	file_live_v21_api_proto_msgTypes[150].OneofWrappers = []interface{}{
		(*ProjectBroadcastStateEvent_Phase)(nil),
		(*ProjectBroadcastStateEvent_Error)(nil),
	}
	file_live_v21_api_proto_msgTypes[159].OneofWrappers = []interface{}{
		(*SourceStateEvent_Connect)(nil),
	}
	file_live_v21_api_proto_msgTypes[160].OneofWrappers = []interface{}{
		(*CollectionEvent_Create)(nil),
		(*CollectionEvent_Update)(nil),
		(*CollectionEvent_Delete)(nil),
	}
	file_live_v21_api_proto_msgTypes[161].OneofWrappers = []interface{}{
		(*DestinationEvent_Create)(nil),
		(*DestinationEvent_Update)(nil),
		(*DestinationEvent_Delete)(nil),
		(*DestinationEvent_State)(nil),
	}
	file_live_v21_api_proto_msgTypes[162].OneofWrappers = []interface{}{
		(*ProjectEvent_Create)(nil),
		(*ProjectEvent_Update)(nil),
		(*ProjectEvent_Delete)(nil),
		(*ProjectEvent_State)(nil),
	}
	file_live_v21_api_proto_msgTypes[163].OneofWrappers = []interface{}{
		(*SourceEvent_Create)(nil),
		(*SourceEvent_Update)(nil),
		(*SourceEvent_Delete)(nil),
		(*SourceEvent_Add)(nil),
		(*SourceEvent_Remove)(nil),
		(*SourceEvent_State)(nil),
	}
	file_live_v21_api_proto_msgTypes[164].OneofWrappers = []interface{}{
		(*LiveEvent_Collection)(nil),
		(*LiveEvent_Destination)(nil),
		(*LiveEvent_Project)(nil),
		(*LiveEvent_Source)(nil),
		(*LiveEvent_Unspecified)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_live_v21_api_proto_rawDesc,
			NumEnums:      20,
			NumMessages:   169,
			NumExtensions: 0,
			NumServices:   9,
		},
		GoTypes:           file_live_v21_api_proto_goTypes,
		DependencyIndexes: file_live_v21_api_proto_depIdxs,
		EnumInfos:         file_live_v21_api_proto_enumTypes,
		MessageInfos:      file_live_v21_api_proto_msgTypes,
	}.Build()
	File_live_v21_api_proto = out.File
	file_live_v21_api_proto_rawDesc = nil
	file_live_v21_api_proto_goTypes = nil
	file_live_v21_api_proto_depIdxs = nil
}
